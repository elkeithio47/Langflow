{"id":"1d200b16-7f16-4f62-8860-527a0d3d3291","data":{"nodes":[{"id":"Prompt-rQG8O","type":"genericNode","position":{"x":600.4092631781136,"y":283.25081718778074},"data":{"type":"Prompt","node":{"template":{"_type":"Component","code":{"type":"code","required":true,"placeholder":"","list":false,"show":true,"multiline":true,"value":"from langflow.base.prompts.api_utils import process_prompt_template\nfrom langflow.custom import Component\nfrom langflow.inputs.inputs import DefaultPromptField\nfrom langflow.io import Output, PromptInput\nfrom langflow.schema.message import Message\nfrom langflow.template.utils import update_template_values\n\n\nclass PromptComponent(Component):\n    display_name: str = \"Prompt\"\n    description: str = \"Create a prompt template with dynamic variables.\"\n    icon = \"prompts\"\n    trace_type = \"prompt\"\n    name = \"Prompt\"\n\n    inputs = [\n        PromptInput(name=\"template\", display_name=\"Template\"),\n    ]\n\n    outputs = [\n        Output(display_name=\"Prompt Message\", name=\"prompt\", method=\"build_prompt\"),\n    ]\n\n    async def build_prompt(\n        self,\n    ) -> Message:\n        prompt = await Message.from_template_and_variables(**self._attributes)\n        self.status = prompt.text\n        return prompt\n\n    def _update_template(self, frontend_node: dict):\n        prompt_template = frontend_node[\"template\"][\"template\"][\"value\"]\n        custom_fields = frontend_node[\"custom_fields\"]\n        frontend_node_template = frontend_node[\"template\"]\n        _ = process_prompt_template(\n            template=prompt_template,\n            name=\"template\",\n            custom_fields=custom_fields,\n            frontend_node_template=frontend_node_template,\n        )\n        return frontend_node\n\n    def post_code_processing(self, new_frontend_node: dict, current_frontend_node: dict):\n        \"\"\"This function is called after the code validation is done.\"\"\"\n        frontend_node = super().post_code_processing(new_frontend_node, current_frontend_node)\n        template = frontend_node[\"template\"][\"template\"][\"value\"]\n        # Kept it duplicated for backwards compatibility\n        _ = process_prompt_template(\n            template=template,\n            name=\"template\",\n            custom_fields=frontend_node[\"custom_fields\"],\n            frontend_node_template=frontend_node[\"template\"],\n        )\n        # Now that template is updated, we need to grab any values that were set in the current_frontend_node\n        # and update the frontend_node with those values\n        update_template_values(new_template=frontend_node, previous_template=current_frontend_node[\"template\"])\n        return frontend_node\n\n    def _get_fallback_input(self, **kwargs):\n        return DefaultPromptField(**kwargs)\n","fileTypes":[],"file_path":"","password":false,"name":"code","advanced":true,"dynamic":true,"info":"","load_from_db":false,"title_case":false},"template":{"trace_as_input":true,"list":false,"required":false,"placeholder":"","show":true,"name":"template","value":"You are a Market Lag Indicator Expert, specialized in detecting various market indicators for both Stock Market and Crypto Market tickers. Your task is to analyze the given ticker and provide a comprehensive market analysis.\n\nYou will be given two inputs:\n<ticker_symbol>{ticker_symbol}</ticker_symbol>\n<market_type>{market_type}</market_type>\n\nUse the following tools to gather and analyze data:\n- Coinmarketcap Tool\n- CoinGecko Tool\n- Google Serper Tool\n- News Tool\n- DuckDuckGo Internet Search Tool\n- Yahoo Finance Crypto Tool\n- Yahoo Finance Stock Market Tool\n- Wikipedia Tool\n\nAlways use the Sanitization Tool to clean the data before processing.\n\nFollow these steps to complete your analysis:\n\n1. Determine which tools are most relevant based on the {market_type}.\n2. Use the tools in a logical sequence to gather comprehensive data about the {ticker_symbol}.\n3. Cross-reference information from multiple sources to ensure accuracy.\n4. Analyze the following indicators:\n   - Pre-Market Analysis (Price Movement and Volume)\n   - Moving Averages (MAs)\n   - Relative Strength Index (RSI)\n   - Stochastic Oscillator\n   - Bollinger Bands\n   - On-Balance Volume (OBV)\n   - Average Directional Index (ADX)\n   - Volume Indicators\n   - Commodity Channel Index (CCI)\n5. Combine indicators for confirmation and identify trends and patterns.\n6. Consider short-term, mid-term, and long-term horizons in your analysis.\n7. Look for interconnections between different trends and weak signals of emerging developments.\n\nAfter completing your analysis, provide your output in the following JSON format:\n\n<output_format>\n\\x7B\n    \"Summary\": \\x7B\n        \"Company Name\": \"\",\n        \"Ticker Symbol\": \"\",\n        \"Market Name\": \"\",\n        \"Timestamp\": \"\",\n        \"Action Recommendation (Next 24 Hours)\": \"\",\n        \"Action Recommendation (Next 48 Hours)\": \"\",\n        \"Overall Trend\": \"\"\n    \\x7D,\n    \"Price and Volume\": \\x7B\n        \"Current Price\": \"\",\n        \"Pre-Market Price\": \"\",\n        \"Volume\": \"\"\n    \\x7D,\n    \"Technical Indicators\": \\x7B\n        \"5-Day Moving Average\": \"\",\n        \"20-Day Moving Average\": \"\",\n        \"Moving Average Signal\": \"\",\n        \"RSI\": \"\",\n        \"Bollinger Bands Summary\": \"\"\n    \\x7D,\n    \"Stochastic Oscillator\": \\x7B\n        \"%K\": \"\",\n        \"%D\": \"\",\n        \"Signal\": \"\"\n    \\x7D,\n    \"Combined Indicators\": \\x7B\n        \"EMA 10\": \"\",\n        \"EMA 20\": \"\",\n        \"EMA Crossover Signal\": \"\",\n        \"MACD Signal\": \"\",\n        \"OBV Trend\": \"\",\n        \"Chaikin Money Flow\": \"\"\n    \\x7D\n\\x7D\n</output_format>\n\nIf you encounter any errors or missing data while using the tools, mention it in your analysis and try to provide as much information as possible based on the available data.\n\nRemember to:\n1. Use all relevant tools to gather comprehensive data.\n2. Provide accurate and up-to-date information.\n3. Justify your recommendations and trend analysis based on the indicators.\n4. Ensure all fields in the JSON output are filled with appropriate values.\n5. If certain data is not available for the given ticker or market type, indicate it as \"N/A\" in the respective fields.\n\nYour analysis should be thorough, accurate, and provide valuable insights for market participants. Always strive for the highest level of precision and reliability in your output.","display_name":"Template","advanced":false,"dynamic":false,"info":"","title_case":false,"type":"prompt","_input_type":"PromptInput"},"ticker_symbol":{"field_type":"str","required":false,"placeholder":"","list":false,"show":true,"multiline":true,"value":"","fileTypes":[],"file_path":"","name":"ticker_symbol","display_name":"ticker_symbol","advanced":false,"input_types":["Message","Text"],"dynamic":false,"info":"","load_from_db":false,"title_case":false,"type":"str"},"market_type":{"field_type":"str","required":false,"placeholder":"","list":false,"show":true,"multiline":true,"value":"","fileTypes":[],"file_path":"","name":"market_type","display_name":"market_type","advanced":false,"input_types":["Message","Text"],"dynamic":false,"info":"","load_from_db":false,"title_case":false,"type":"str"}},"description":"Create a prompt template with dynamic variables.","icon":"prompts","is_input":null,"is_output":null,"is_composition":null,"base_classes":["Message"],"name":"","display_name":"Prompt","documentation":"","custom_fields":{"template":["ticker_symbol","market_type"]},"output_types":[],"full_path":null,"pinned":false,"conditional_paths":[],"frozen":false,"outputs":[{"types":["Message"],"selected":"Message","name":"prompt","hidden":null,"display_name":"Prompt Message","method":"build_prompt","value":"__UNDEFINED__","cache":true,"required_inputs":null}],"field_order":["template"],"beta":false,"error":null,"edited":false,"metadata":{},"lf_version":"1.0.19"},"id":"Prompt-rQG8O"},"selected":false,"width":384,"height":480,"positionAbsolute":{"x":600.4092631781136,"y":283.25081718778074},"dragging":false},{"id":"TextInput-tfkok","type":"genericNode","position":{"x":145.0709014574884,"y":-83.8375198749365},"data":{"type":"TextInput","node":{"template":{"_type":"Component","code":{"type":"code","required":true,"placeholder":"","list":false,"show":true,"multiline":true,"value":"from langflow.base.io.text import TextComponent\nfrom langflow.io import MultilineInput, Output\nfrom langflow.schema.message import Message\n\n\nclass TextInputComponent(TextComponent):\n    display_name = \"Text Input\"\n    description = \"Get text inputs from the Playground.\"\n    icon = \"type\"\n    name = \"TextInput\"\n\n    inputs = [\n        MultilineInput(\n            name=\"input_value\",\n            display_name=\"Text\",\n            info=\"Text to be passed as input.\",\n        ),\n    ]\n    outputs = [\n        Output(display_name=\"Text\", name=\"text\", method=\"text_response\"),\n    ]\n\n    def text_response(self) -> Message:\n        return Message(\n            text=self.input_value,\n        )\n","fileTypes":[],"file_path":"","password":false,"name":"code","advanced":true,"dynamic":true,"info":"","load_from_db":false,"title_case":false},"input_value":{"trace_as_input":true,"multiline":true,"trace_as_metadata":true,"load_from_db":false,"list":false,"required":false,"placeholder":"","show":true,"name":"input_value","value":"S&P500","display_name":"Text","advanced":false,"input_types":["Message"],"dynamic":false,"info":"Text to be passed as input.","title_case":false,"type":"str","_input_type":"MultilineInput"}},"description":"Get text inputs from the Playground.","icon":"type","base_classes":["Message"],"display_name":"Text Input","documentation":"","custom_fields":{},"output_types":[],"pinned":false,"conditional_paths":[],"frozen":false,"outputs":[{"types":["Message"],"selected":"Message","name":"text","display_name":"Text","method":"text_response","value":"__UNDEFINED__","cache":true}],"field_order":["input_value"],"beta":false,"edited":false,"metadata":{},"lf_version":"1.0.19"},"id":"TextInput-tfkok"},"selected":false,"width":384,"height":291,"positionAbsolute":{"x":145.0709014574884,"y":-83.8375198749365},"dragging":false},{"id":"TextInput-qSOPl","type":"genericNode","position":{"x":132.56823048561944,"y":256.4479638712986},"data":{"type":"TextInput","node":{"template":{"_type":"Component","code":{"type":"code","required":true,"placeholder":"","list":false,"show":true,"multiline":true,"value":"from langflow.base.io.text import TextComponent\nfrom langflow.io import MultilineInput, Output\nfrom langflow.schema.message import Message\n\n\nclass TextInputComponent(TextComponent):\n    display_name = \"Text Input\"\n    description = \"Get text inputs from the Playground.\"\n    icon = \"type\"\n    name = \"TextInput\"\n\n    inputs = [\n        MultilineInput(\n            name=\"input_value\",\n            display_name=\"Text\",\n            info=\"Text to be passed as input.\",\n        ),\n    ]\n    outputs = [\n        Output(display_name=\"Text\", name=\"text\", method=\"text_response\"),\n    ]\n\n    def text_response(self) -> Message:\n        return Message(\n            text=self.input_value,\n        )\n","fileTypes":[],"file_path":"","password":false,"name":"code","advanced":true,"dynamic":true,"info":"","load_from_db":false,"title_case":false},"input_value":{"trace_as_input":true,"multiline":true,"trace_as_metadata":true,"load_from_db":false,"list":false,"required":false,"placeholder":"","show":true,"name":"input_value","value":"TSLA","display_name":"Text","advanced":false,"input_types":["Message"],"dynamic":false,"info":"Text to be passed as input.","title_case":false,"type":"str","_input_type":"MultilineInput"}},"description":"Get text inputs from the Playground.","icon":"type","base_classes":["Message"],"display_name":"Text Input","documentation":"","custom_fields":{},"output_types":[],"pinned":false,"conditional_paths":[],"frozen":false,"outputs":[{"types":["Message"],"selected":"Message","name":"text","display_name":"Text","method":"text_response","value":"__UNDEFINED__","cache":true}],"field_order":["input_value"],"beta":false,"edited":false,"metadata":{},"lf_version":"1.0.19"},"id":"TextInput-qSOPl"},"selected":false,"width":384,"height":291,"positionAbsolute":{"x":132.56823048561944,"y":256.4479638712986},"dragging":false},{"id":"ToolCallingAgent-xI4TM","type":"genericNode","position":{"x":1207.3000575278754,"y":330.64810201397466},"data":{"type":"ToolCallingAgent","node":{"template":{"_type":"Component","chat_history":{"trace_as_metadata":true,"list":true,"trace_as_input":true,"required":false,"placeholder":"","show":true,"name":"chat_history","value":"","display_name":"Chat History","advanced":true,"input_types":["Data"],"dynamic":false,"info":"","title_case":false,"type":"other","_input_type":"DataInput"},"llm":{"trace_as_metadata":true,"list":false,"required":true,"placeholder":"","show":true,"name":"llm","value":"","display_name":"Language Model","advanced":false,"input_types":["LanguageModel"],"dynamic":false,"info":"","title_case":false,"type":"other","_input_type":"HandleInput"},"tools":{"trace_as_metadata":true,"list":true,"required":false,"placeholder":"","show":true,"name":"tools","value":"","display_name":"Tools","advanced":false,"input_types":["Tool","BaseTool","StructuredTool"],"dynamic":false,"info":"","title_case":false,"type":"other","_input_type":"HandleInput"},"code":{"type":"code","required":true,"placeholder":"","list":false,"show":true,"multiline":true,"value":"from langchain.agents import create_tool_calling_agent\nfrom langchain_core.prompts import ChatPromptTemplate, HumanMessagePromptTemplate, PromptTemplate\n\nfrom langflow.base.agents.agent import LCToolsAgentComponent\nfrom langflow.inputs import MultilineInput\nfrom langflow.inputs.inputs import DataInput, HandleInput\nfrom langflow.schema import Data\n\n\nclass ToolCallingAgentComponent(LCToolsAgentComponent):\n    display_name: str = \"Tool Calling Agent\"\n    description: str = \"Agent that uses tools\"\n    icon = \"LangChain\"\n    beta = True\n    name = \"ToolCallingAgent\"\n\n    inputs = [\n        *LCToolsAgentComponent._base_inputs,\n        HandleInput(name=\"llm\", display_name=\"Language Model\", input_types=[\"LanguageModel\"], required=True),\n        MultilineInput(\n            name=\"system_prompt\",\n            display_name=\"System Prompt\",\n            info=\"System prompt for the agent.\",\n            value=\"You are a helpful assistant\",\n        ),\n        MultilineInput(\n            name=\"user_prompt\", display_name=\"Prompt\", info=\"This prompt must contain 'input' key.\", value=\"{input}\"\n        ),\n        DataInput(name=\"chat_history\", display_name=\"Chat History\", is_list=True, advanced=True),\n    ]\n\n    def get_chat_history_data(self) -> list[Data] | None:\n        return self.chat_history\n\n    def create_agent_runnable(self):\n        if \"input\" not in self.user_prompt:\n            msg = \"Prompt must contain 'input' key.\"\n            raise ValueError(msg)\n        messages = [\n            (\"system\", self.system_prompt),\n            (\"placeholder\", \"{chat_history}\"),\n            HumanMessagePromptTemplate(prompt=PromptTemplate(input_variables=[\"input\"], template=self.user_prompt)),\n            (\"placeholder\", \"{agent_scratchpad}\"),\n        ]\n        prompt = ChatPromptTemplate.from_messages(messages)\n        return create_tool_calling_agent(self.llm, self.tools, prompt)\n","fileTypes":[],"file_path":"","password":false,"name":"code","advanced":true,"dynamic":true,"info":"","load_from_db":false,"title_case":false},"handle_parsing_errors":{"trace_as_metadata":true,"list":false,"required":false,"placeholder":"","show":true,"name":"handle_parsing_errors","value":true,"display_name":"Handle Parse Errors","advanced":true,"dynamic":false,"info":"","title_case":false,"type":"bool","_input_type":"BoolInput"},"input_value":{"trace_as_input":true,"trace_as_metadata":true,"load_from_db":false,"list":false,"required":false,"placeholder":"","show":true,"name":"input_value","value":"","display_name":"Input","advanced":false,"input_types":["Message"],"dynamic":false,"info":"","title_case":false,"type":"str","_input_type":"MessageTextInput"},"max_iterations":{"trace_as_metadata":true,"list":false,"required":false,"placeholder":"","show":true,"name":"max_iterations","value":15,"display_name":"Max Iterations","advanced":true,"dynamic":false,"info":"","title_case":false,"type":"int","_input_type":"IntInput"},"system_prompt":{"trace_as_input":true,"multiline":true,"trace_as_metadata":true,"load_from_db":false,"list":false,"required":false,"placeholder":"","show":true,"name":"system_prompt","value":"You are a helpful assistant","display_name":"System Prompt","advanced":false,"input_types":["Message"],"dynamic":false,"info":"System prompt for the agent.","title_case":false,"type":"str","_input_type":"MultilineInput"},"user_prompt":{"trace_as_input":true,"multiline":true,"trace_as_metadata":true,"load_from_db":false,"list":false,"required":false,"placeholder":"","show":true,"name":"user_prompt","value":"{input}","display_name":"Prompt","advanced":false,"input_types":["Message"],"dynamic":false,"info":"This prompt must contain 'input' key.","title_case":false,"type":"str","_input_type":"MultilineInput"},"verbose":{"trace_as_metadata":true,"list":false,"required":false,"placeholder":"","show":true,"name":"verbose","value":true,"display_name":"Verbose","advanced":true,"dynamic":false,"info":"","title_case":false,"type":"bool","_input_type":"BoolInput"}},"description":"Agent that uses tools","icon":"LangChain","base_classes":["AgentExecutor","Message"],"display_name":"Tool Calling Agent","documentation":"","custom_fields":{},"output_types":[],"pinned":false,"conditional_paths":[],"frozen":false,"outputs":[{"types":["AgentExecutor"],"selected":"AgentExecutor","name":"agent","display_name":"Agent","method":"build_agent","value":"__UNDEFINED__","cache":true,"required_inputs":["tools"]},{"types":["Message"],"selected":"Message","name":"response","display_name":"Response","method":"message_response","value":"__UNDEFINED__","cache":true,"required_inputs":[]}],"field_order":["input_value","handle_parsing_errors","verbose","max_iterations","tools","llm","system_prompt","user_prompt","chat_history"],"beta":true,"edited":false,"metadata":{},"lf_version":"1.0.19"},"id":"ToolCallingAgent-xI4TM"},"selected":false,"width":384,"height":597,"positionAbsolute":{"x":1207.3000575278754,"y":330.64810201397466},"dragging":false},{"id":"YahooFinanceTool-gs7jr","type":"genericNode","position":{"x":-471.3465452093012,"y":795.4302558961466},"data":{"type":"YahooFinanceTool","node":{"template":{"_type":"Component","code":{"type":"code","required":true,"placeholder":"","list":false,"show":true,"multiline":true,"value":"import ast\nimport pprint\n\nimport yfinance as yf\nfrom langchain.tools import StructuredTool\nfrom loguru import logger\nfrom pydantic import BaseModel, Field\n\nfrom langflow.base.langchain_utilities.model import LCToolComponent\nfrom langflow.field_typing import Tool\nfrom langflow.inputs import DropdownInput, IntInput, MessageTextInput\nfrom langflow.schema import Data\n\n\nclass YfinanceToolComponent(LCToolComponent):\n    display_name = \"Yahoo Finance Tool\"\n    description = \"Access financial data and market information using Yahoo Finance.\"\n    icon = \"trending-up\"\n    name = \"YahooFinanceTool\"\n\n    # Define the inputs required for the component\n    inputs = [\n        MessageTextInput(\n            name=\"symbol\",\n            display_name=\"Stock Symbol\",\n            info=\"The stock symbol to retrieve data for (e.g., AAPL, GOOG).\",\n            required=True,\n        ),\n        DropdownInput(\n            name=\"method\",\n            display_name=\"Data Method\",\n            info=\"The type of data to retrieve.\",\n            options=[\n                \"get_actions\",\n                \"get_analysis\",\n                \"get_balance_sheet\",\n                \"get_calendar\",\n                \"get_cashflow\",\n                \"get_info\",\n                \"get_institutional_holders\",\n                \"get_news\",\n                \"get_recommendations\",\n                \"get_sustainability\",\n            ],\n            value=\"get_news\",\n        ),\n        IntInput(\n            name=\"num_news\",\n            display_name=\"Number of News\",\n            info=\"The number of news articles to retrieve (only applicable for get_news).\",\n            value=5,\n        ),\n    ]\n\n    # Define the schema for the API tool arguments\n    class YahooFinanceSchema(BaseModel):\n        symbol: str = Field(..., description=\"The stock symbol to retrieve data for.\")\n        method: str = Field(\"get_info\", description=\"The type of data to retrieve.\")\n        num_news: int | None = Field(5, description=\"The number of news articles to retrieve.\")\n\n    # Correct run_model to properly retrieve and pass arguments to _yahoo_finance_tool\n    def run_model(self, inputs: Dict[str, Any]) -> list[Data]:\n        # Retrieve inputs from the schema inputs argument\n        symbol = inputs.get(\"symbol\")\n        method = inputs.get(\"method\", \"get_info\")  # Default to get_info if method not provided\n        num_news = inputs.get(\"num_news\", 5)\n\n        # Pass the retrieved values into _yahoo_finance_tool\n        return self._yahoo_finance_tool(\n            symbol=symbol,\n            method=method,\n            num_news=num_news,\n        )\n\n    def build_tool(self) -> Tool:\n        return StructuredTool.from_function(\n            name=\"yahoo_finance\",\n            description=\"Access financial data and market information from Yahoo Finance.\",\n            func=self._yahoo_finance_tool,\n            args_schema=self.YahooFinanceSchema,\n        )\n\n    def _yahoo_finance_tool(\n        self,\n        symbol: str,\n        method: str,\n        num_news: int | None = 5,\n    ) -> list[Data]:\n        # Initialize the Yahoo Finance Ticker object\n        ticker = yf.Ticker(symbol)\n\n        try:\n            # Select the correct method from the ticker based on the user's input\n            if method == \"get_info\":\n                result = ticker.info\n            elif method == \"get_news\":\n                result = ticker.news[:num_news]\n            else:\n                result = getattr(ticker, method)()\n\n            # Format the result for output\n            result = pprint.pformat(result)\n\n            if method == \"get_news\":\n                data_list = [Data(data=article) for article in ast.literal_eval(result)]\n            else:\n                data_list = [Data(data={\"result\": result})]\n\n        except Exception as e:\n            error_message = f\"Error retrieving data: {e}\"\n            logger.opt(exception=True).debug(error_message)\n            self.status = error_message\n            return [Data(data={\"error\": error_message})]\n\n        return data_list\n","fileTypes":[],"file_path":"","password":false,"name":"code","advanced":true,"dynamic":true,"info":"","load_from_db":false,"title_case":false},"method":{"trace_as_metadata":true,"options":["get_actions","get_analysis","get_balance_sheet","get_calendar","get_cashflow","get_info","get_institutional_holders","get_news","get_recommendations","get_sustainability"],"combobox":false,"required":false,"placeholder":"","show":true,"name":"method","value":"get_news","display_name":"Data Method","advanced":false,"dynamic":false,"info":"The type of data to retrieve.","title_case":false,"type":"str","_input_type":"DropdownInput"},"num_news":{"trace_as_metadata":true,"list":false,"required":false,"placeholder":"","show":true,"name":"num_news","value":5,"display_name":"Number of News","advanced":false,"dynamic":false,"info":"The number of news articles to retrieve (only applicable for get_news).","title_case":false,"type":"int","_input_type":"IntInput"},"symbol":{"trace_as_input":true,"trace_as_metadata":true,"load_from_db":false,"list":false,"required":true,"placeholder":"","show":true,"name":"symbol","value":"TSLA","display_name":"Stock Symbol","advanced":false,"input_types":["Message"],"dynamic":false,"info":"The stock symbol to retrieve data for (e.g., AAPL, GOOG).","title_case":false,"type":"str","_input_type":"MessageTextInput"}},"description":"Access financial data and market information using Yahoo Finance.","icon":"trending-up","base_classes":["Data","Tool"],"display_name":"Yahoo Finance Stock Market Tool","documentation":"","custom_fields":{},"output_types":[],"pinned":false,"conditional_paths":[],"frozen":false,"outputs":[{"types":["Data"],"selected":"Data","name":"api_run_model","display_name":"Data","method":"run_model","value":"__UNDEFINED__","cache":true,"required_inputs":[]},{"types":["Tool"],"selected":"Tool","name":"api_build_tool","display_name":"Tool","method":"build_tool","value":"__UNDEFINED__","cache":true,"required_inputs":[]}],"field_order":["symbol","method","num_news"],"beta":false,"edited":true,"metadata":{},"lf_version":"1.0.19"},"id":"YahooFinanceTool-gs7jr"},"selected":false,"width":384,"height":520,"positionAbsolute":{"x":-471.3465452093012,"y":795.4302558961466},"dragging":false},{"id":"WikipediaAPI-tbLCA","type":"genericNode","position":{"x":-448.7149770834909,"y":1386.4388192845643},"data":{"type":"WikipediaAPI","node":{"template":{"_type":"Component","code":{"type":"code","required":true,"placeholder":"","list":false,"show":true,"multiline":true,"value":"from typing import cast\n\nfrom langchain_community.tools import WikipediaQueryRun\nfrom langchain_community.utilities.wikipedia import WikipediaAPIWrapper\n\nfrom langflow.base.langchain_utilities.model import LCToolComponent\nfrom langflow.field_typing import Tool\nfrom langflow.inputs import BoolInput, IntInput, MessageTextInput, MultilineInput\nfrom langflow.schema import Data\n\n\nclass WikipediaAPIComponent(LCToolComponent):\n    display_name = \"Wikipedia API\"\n    description = \"Call Wikipedia API.\"\n    name = \"WikipediaAPI\"\n\n    inputs = [\n        MultilineInput(\n            name=\"input_value\",\n            display_name=\"Input\",\n        ),\n        MessageTextInput(name=\"lang\", display_name=\"Language\", value=\"en\"),\n        IntInput(name=\"k\", display_name=\"Number of results\", value=4, required=True),\n        BoolInput(name=\"load_all_available_meta\", display_name=\"Load all available meta\", value=False, advanced=True),\n        IntInput(\n            name=\"doc_content_chars_max\", display_name=\"Document content characters max\", value=4000, advanced=True\n        ),\n    ]\n\n    def run_model(self) -> list[Data]:\n        wrapper = self._build_wrapper()\n        docs = wrapper.load(self.input_value)\n        data = [Data.from_document(doc) for doc in docs]\n        self.status = data\n        return data\n\n    def build_tool(self) -> Tool:\n        wrapper = self._build_wrapper()\n        return cast(Tool, WikipediaQueryRun(api_wrapper=wrapper))\n\n    def _build_wrapper(self) -> WikipediaAPIWrapper:\n        return WikipediaAPIWrapper(\n            top_k_results=self.k,\n            lang=self.lang,\n            load_all_available_meta=self.load_all_available_meta,\n            doc_content_chars_max=self.doc_content_chars_max,\n        )\n","fileTypes":[],"file_path":"","password":false,"name":"code","advanced":true,"dynamic":true,"info":"","load_from_db":false,"title_case":false},"doc_content_chars_max":{"trace_as_metadata":true,"list":false,"required":false,"placeholder":"","show":true,"name":"doc_content_chars_max","value":4000,"display_name":"Document content characters max","advanced":true,"dynamic":false,"info":"","title_case":false,"type":"int","_input_type":"IntInput"},"input_value":{"trace_as_input":true,"multiline":true,"trace_as_metadata":true,"load_from_db":false,"list":false,"required":false,"placeholder":"","show":true,"name":"input_value","value":"","display_name":"Input","advanced":false,"input_types":["Message"],"dynamic":false,"info":"","title_case":false,"type":"str","_input_type":"MultilineInput"},"k":{"trace_as_metadata":true,"list":false,"required":true,"placeholder":"","show":true,"name":"k","value":4,"display_name":"Number of results","advanced":false,"dynamic":false,"info":"","title_case":false,"type":"int","_input_type":"IntInput"},"lang":{"trace_as_input":true,"trace_as_metadata":true,"load_from_db":false,"list":false,"required":false,"placeholder":"","show":true,"name":"lang","value":"en","display_name":"Language","advanced":false,"input_types":["Message"],"dynamic":false,"info":"","title_case":false,"type":"str","_input_type":"MessageTextInput"},"load_all_available_meta":{"trace_as_metadata":true,"list":false,"required":false,"placeholder":"","show":true,"name":"load_all_available_meta","value":false,"display_name":"Load all available meta","advanced":true,"dynamic":false,"info":"","title_case":false,"type":"bool","_input_type":"BoolInput"}},"description":"Call Wikipedia API.","base_classes":["Data","Tool"],"display_name":"Wikipedia API","documentation":"","custom_fields":{},"output_types":[],"pinned":false,"conditional_paths":[],"frozen":false,"outputs":[{"types":["Data"],"selected":"Data","name":"api_run_model","display_name":"Data","method":"run_model","value":"__UNDEFINED__","cache":true,"required_inputs":["doc_content_chars_max","input_value","k","lang","load_all_available_meta"]},{"types":["Tool"],"selected":"Tool","name":"api_build_tool","display_name":"Tool","method":"build_tool","value":"__UNDEFINED__","cache":true,"required_inputs":["doc_content_chars_max","input_value","k","lang","load_all_available_meta"]}],"field_order":["input_value","lang","k","load_all_available_meta","doc_content_chars_max"],"beta":false,"edited":false,"metadata":{},"lf_version":"1.0.19"},"id":"WikipediaAPI-tbLCA"},"selected":false,"width":384,"height":504,"positionAbsolute":{"x":-448.7149770834909,"y":1386.4388192845643},"dragging":false},{"id":"CustomComponent-AfNYP","type":"genericNode","position":{"x":-844.4336286193072,"y":1951.5235760624646},"data":{"type":"YahooFinanceCrypto","node":{"template":{"_type":"Component","code":{"type":"code","required":true,"placeholder":"","list":false,"show":true,"multiline":true,"value":"from typing import Any\r\n\r\nfrom langchain.tools import StructuredTool\r\nfrom pydantic import BaseModel, Field\r\nfrom langflow.base.langchain_utilities.model import LCToolComponent\r\nfrom langflow.field_typing import Tool\r\nfrom langflow.inputs import MessageTextInput, SecretStrInput\r\nfrom langflow.schema import Data\r\nimport yfinance as yf\r\n\r\n\r\n# Define the component class for Yahoo Finance Crypto API\r\nclass YahooFinanceCryptoComponent(LCToolComponent):\r\n    display_name: str = \"Yahoo Finance Crypto\"\r\n    description: str = \"Retrieve cryptocurrency and blockchain-related data using Yahoo Finance.\"\r\n    name = \"YahooFinanceCrypto\"\r\n    documentation: str = \"https://www.yahoofinanceapi.com/\"\r\n\r\n    # Define the inputs needed for this component\r\n    inputs = [\r\n        MessageTextInput(name=\"crypto_symbol\", display_name=\"Cryptocurrency Symbol\", required=True),\r\n        MessageTextInput(name=\"metric\", display_name=\"Financial Metric\", required=False, value=\"summary\"),\r\n    ]\r\n\r\n    # Define the schema for the API tool arguments\r\n    class YahooFinanceCryptoSchema(BaseModel):\r\n        crypto_symbol: str = Field(..., description=\"The cryptocurrency symbol (e.g., BTC-USD for Bitcoin).\")\r\n        metric: str = Field(\"summary\", description=\"The financial metric to retrieve (e.g., 'summary', 'price').\")\r\n\r\n    # Define the API Wrapper for Yahoo Finance\r\n    class YahooFinanceCryptoWrapper:\r\n        def __init__(self, crypto_symbol: str, metric: str = \"summary\"):\r\n            self.crypto_symbol = crypto_symbol\r\n            self.metric = metric\r\n            self.ticker = yf.Ticker(crypto_symbol)  # Initialize with the cryptocurrency symbol\r\n\r\n        def get_crypto_data(self) -> dict[str, Any]:\r\n            # Based on the metric, retrieve the corresponding financial data\r\n            if self.metric == \"summary\":\r\n                return self.ticker.info  # Fetch general summary info\r\n            elif self.metric == \"price\":\r\n                return {\"price\": self.ticker.history(period=\"1d\")[\"Close\"].iloc[-1]}\r\n            elif self.metric == \"history\":\r\n                return self.ticker.history(period=\"1mo\")  # Fetch price history\r\n            else:\r\n                raise ValueError(\"Invalid metric. Please choose 'summary', 'price', or 'history'.\")\r\n\r\n    # Build the API wrapper\r\n    def _build_wrapper(self, crypto_symbol: str, metric: str):\r\n        return self.YahooFinanceCryptoWrapper(crypto_symbol=crypto_symbol, metric=metric)\r\n\r\n    # Tool builder function\r\n    def build_tool(self) -> Tool:\r\n        def get_crypto_data(crypto_symbol: str, metric: str = \"summary\") -> dict[str, Any]:\r\n            wrapper = self._build_wrapper(crypto_symbol=crypto_symbol, metric=metric)\r\n            return wrapper.get_crypto_data()\r\n\r\n        tool = StructuredTool.from_function(\r\n            name=\"yahoo_finance_crypto\",\r\n            description=\"Fetch cryptocurrency data using Yahoo Finance.\",\r\n            func=get_crypto_data,\r\n            args_schema=self.YahooFinanceCryptoSchema,\r\n        )\r\n\r\n        self.status = \"Yahoo Finance Crypto Tool created successfully.\"\r\n        return tool\r\n\r\n    # Run model function to trigger the API call\r\n    def run_model(self) -> list[Data]:\r\n        tool = self.build_tool()\r\n        # Retrieve and pass all necessary inputs\r\n        results = tool.run(\r\n            {\r\n                \"crypto_symbol\": self.crypto_symbol,\r\n                \"metric\": self.metric,\r\n            }\r\n        )\r\n\r\n        # Format the results for output\r\n        if self.metric == \"summary\":\r\n            formatted_results = [Data(data=results, text=f\"Summary: {results}\")]\r\n        elif self.metric == \"price\":\r\n            formatted_results = [Data(data=results, text=f\"Latest Price: {results['price']}\")]\r\n        elif self.metric == \"history\":\r\n            formatted_results = [\r\n                Data(data=results, text=f\"Price History: {results[['Close']].to_dict(orient='list')}\")\r\n            ]\r\n        else:\r\n            formatted_results = [Data(data=results, text=\"No valid data found.\")]\r\n\r\n        self.status = formatted_results\r\n        return formatted_results\r\n","fileTypes":[],"file_path":"","password":false,"name":"code","advanced":true,"dynamic":true,"info":"","load_from_db":false,"title_case":false},"crypto_symbol":{"trace_as_input":true,"trace_as_metadata":true,"load_from_db":false,"list":false,"required":true,"placeholder":"","show":true,"name":"crypto_symbol","value":"BTC","display_name":"Cryptocurrency Symbol","advanced":false,"input_types":["Message"],"dynamic":false,"info":"","title_case":false,"type":"str","_input_type":"MessageTextInput"},"metric":{"trace_as_input":true,"trace_as_metadata":true,"load_from_db":false,"list":false,"required":false,"placeholder":"","show":true,"name":"metric","value":"summary","display_name":"Financial Metric","advanced":false,"input_types":["Message"],"dynamic":false,"info":"","title_case":false,"type":"str","_input_type":"MessageTextInput"}},"description":"Retrieve cryptocurrency and blockchain-related data using Yahoo Finance.","base_classes":["Data","Tool"],"display_name":"Yahoo Finance Crypto Market Tool","documentation":"https://www.yahoofinanceapi.com/","custom_fields":{},"output_types":[],"pinned":false,"conditional_paths":[],"frozen":false,"outputs":[{"types":["Data"],"selected":"Data","name":"api_run_model","display_name":"Data","method":"run_model","value":"__UNDEFINED__","cache":true,"required_inputs":["crypto_symbol","metric"]},{"types":["Tool"],"selected":"Tool","name":"api_build_tool","display_name":"Tool","method":"build_tool","value":"__UNDEFINED__","cache":true,"required_inputs":["crypto_symbol","metric"]}],"field_order":["crypto_symbol","metric"],"beta":false,"edited":true,"metadata":{},"lf_version":"1.0.19"},"id":"CustomComponent-AfNYP"},"selected":false,"width":384,"height":433,"dragging":false,"positionAbsolute":{"x":-844.4336286193072,"y":1951.5235760624646}},{"id":"CustomComponent-csNG0","type":"genericNode","position":{"x":-927.2565156495385,"y":1394.527967927231},"data":{"type":"CoinGeckoAPI","node":{"template":{"_type":"Component","code":{"type":"code","required":true,"placeholder":"","list":false,"show":true,"multiline":true,"value":"from typing import Any, Dict\r\nfrom pydantic import BaseModel, Field\r\nfrom langflow.base.langchain_utilities.model import LCToolComponent\r\nfrom langflow.inputs import MessageTextInput\r\nfrom langflow.schema import Data\r\nimport requests\r\n\r\nclass CoinGeckoComponent(LCToolComponent):\r\n    display_name: str = \"CoinGecko API\"\r\n    description: str = \"Retrieve cryptocurrency data using the CoinGecko API.\"\r\n    name = \"CoinGeckoAPI\"\r\n    documentation: str = \"https://www.coingecko.com/en/api\"\r\n\r\n    # Define the inputs needed for this component\r\n    inputs = [\r\n        MessageTextInput(name=\"crypto_id\", display_name=\"Cryptocurrency ID\", required=True),\r\n        MessageTextInput(name=\"currency\", display_name=\"Fiat Currency\", required=False, value=\"usd\"),\r\n        MessageTextInput(name=\"metric\", display_name=\"Metric Type\", required=False, value=\"price\"),\r\n    ]\r\n\r\n    # Define the schema for the API tool arguments\r\n    class CoinGeckoSchema(BaseModel):\r\n        crypto_id: str = Field(..., description=\"The ID of the cryptocurrency (e.g., 'bitcoin', 'ethereum').\")\r\n        currency: str = Field(\"usd\", description=\"The fiat currency to convert the price into (default is 'usd').\")\r\n        metric: str = Field(\"price\", description=\"The type of metric to retrieve (e.g., 'price', 'market_cap').\")\r\n\r\n    # Define the API Wrapper for CoinGecko\r\n    class CoinGeckoAPIWrapper:\r\n        BASE_URL = \"https://api.coingecko.com/api/v3\"\r\n\r\n        def __init__(self, crypto_id: str, currency: str = \"usd\", metric: str = \"price\"):\r\n            self.crypto_id = crypto_id\r\n            self.currency = currency\r\n            self.metric = metric\r\n\r\n        def get_crypto_data(self) -> Dict[str, Any]:\r\n            url = f\"{self.BASE_URL}/simple/price\"\r\n            params = {\r\n                \"ids\": self.crypto_id,\r\n                \"vs_currencies\": self.currency,\r\n                \"include_market_cap\": \"true\" if self.metric == \"market_cap\" else \"false\",\r\n                \"include_24hr_vol\": \"true\" if self.metric == \"volume\" else \"false\",\r\n                \"include_24hr_change\": \"true\" if self.metric == \"price_change\" else \"false\",\r\n            }\r\n\r\n            try:\r\n                response = requests.get(url, params=params)\r\n\r\n                if response.status_code == 429:\r\n                    # Rate limiting occurred, return a safe message without throwing an exception\r\n                    print(\"Rate limit exceeded. Please try again later.\")\r\n                    return {\"error\": \"Rate limit exceeded\"}\r\n\r\n                if response.status_code != 200:\r\n                    raise Exception(f\"Error {response.status_code}: {response.text}\")\r\n\r\n                data = response.json()\r\n\r\n                if self.crypto_id not in data:\r\n                    raise ValueError(f\"Cryptocurrency '{self.crypto_id}' not found.\")\r\n\r\n                return data[self.crypto_id]\r\n\r\n            except Exception as e:\r\n                # Catch any other exceptions and handle them gracefully\r\n                print(f\"An error occurred: {e}\")\r\n                return {\"error\": str(e)}\r\n\r\n    # Build the API wrapper\r\n    def _build_wrapper(self, crypto_id: str, currency: str, metric: str):\r\n        return self.CoinGeckoAPIWrapper(crypto_id=crypto_id, currency=currency, metric=metric)\r\n\r\n    # Tool builder function\r\n    def build_tool(self) -> Tool:\r\n        def get_crypto_data(crypto_id: str, currency: str = \"usd\", metric: str = \"price\") -> Dict[str, Any]:\r\n            wrapper = self._build_wrapper(crypto_id=crypto_id, currency=currency, metric=metric)\r\n            return wrapper.get_crypto_data()\r\n\r\n        tool = StructuredTool.from_function(\r\n            name=\"coingecko_api\",\r\n            description=\"Fetch cryptocurrency data using the CoinGecko API.\",\r\n            func=get_crypto_data,\r\n            args_schema=self.CoinGeckoSchema,\r\n        )\r\n\r\n        self.status = \"CoinGecko API Tool created successfully.\"\r\n        return tool\r\n\r\n    # Run model function to trigger the API call\r\n    def run_model(self) -> list[Data]:\r\n        tool = self.build_tool()\r\n\r\n        # Fetch the CoinGecko cryptocurrency data based on user inputs\r\n        results = tool.run(\r\n            {\r\n                \"crypto_id\": self.crypto_id,\r\n                \"currency\": self.currency,\r\n                \"metric\": self.metric,\r\n            }\r\n        )\r\n\r\n        # Handle rate limit or errors gracefully\r\n        if \"error\" in results:\r\n            return [Data(data=results, text=results[\"error\"])]\r\n\r\n        # Format the results for output\r\n        if self.metric == \"price\":\r\n            formatted_result = Data(data=results, text=f\"Price: {results[self.currency]}\")\r\n        elif self.metric == \"market_cap\":\r\n            formatted_result = Data(data=results, text=f\"Market Cap: {results[f'{self.currency}_market_cap']}\")\r\n        elif self.metric == \"volume\":\r\n            formatted_result = Data(data=results, text=f\"24h Volume: {results[f'{self.currency}_24h_vol']}\")\r\n        elif self.metric == \"price_change\":\r\n            formatted_result = Data(data=results, text=f\"24h Price Change: {results[f'{self.currency}_24h_change']}\")\r\n        else:\r\n            formatted_result = Data(data=results, text=\"No valid data found.\")\r\n\r\n        self.status = [formatted_result]\r\n        return [formatted_result]\r\n","fileTypes":[],"file_path":"","password":false,"name":"code","advanced":true,"dynamic":true,"info":"","load_from_db":false,"title_case":false},"crypto_id":{"trace_as_input":true,"trace_as_metadata":true,"load_from_db":false,"list":false,"required":true,"placeholder":"","show":true,"name":"crypto_id","value":"BTC","display_name":"Cryptocurrency ID","advanced":false,"input_types":["Message"],"dynamic":false,"info":"","title_case":false,"type":"str","_input_type":"MessageTextInput"},"currency":{"trace_as_input":true,"trace_as_metadata":true,"load_from_db":false,"list":false,"required":false,"placeholder":"","show":true,"name":"currency","value":"usd","display_name":"Fiat Currency","advanced":false,"input_types":["Message"],"dynamic":false,"info":"","title_case":false,"type":"str","_input_type":"MessageTextInput"},"metric":{"trace_as_input":true,"trace_as_metadata":true,"load_from_db":false,"list":false,"required":false,"placeholder":"","show":true,"name":"metric","value":"price","display_name":"Metric Type","advanced":false,"input_types":["Message"],"dynamic":false,"info":"","title_case":false,"type":"str","_input_type":"MessageTextInput"}},"description":"Retrieve cryptocurrency data using the CoinGecko API.","base_classes":["Data","Tool"],"display_name":"CoinGecko API","documentation":"https://www.coingecko.com/en/api","custom_fields":{},"output_types":[],"pinned":false,"conditional_paths":[],"frozen":false,"outputs":[{"types":["Data"],"selected":"Data","name":"api_run_model","display_name":"Data","method":"run_model","value":"__UNDEFINED__","cache":true,"required_inputs":["crypto_id","currency","metric"]},{"types":["Tool"],"selected":"Tool","name":"api_build_tool","display_name":"Tool","method":"build_tool","value":"__UNDEFINED__","cache":true,"required_inputs":["crypto_id","currency","metric"]}],"field_order":["crypto_id","currency","metric"],"beta":false,"edited":true,"metadata":{},"lf_version":"1.0.19"},"id":"CustomComponent-csNG0"},"selected":false,"width":384,"height":520,"positionAbsolute":{"x":-927.2565156495385,"y":1394.527967927231},"dragging":false},{"id":"CustomComponent-Zofge","type":"genericNode","position":{"x":27.52726949015846,"y":1961.227945959946},"data":{"type":"GoogleSerpAPI","node":{"template":{"_type":"Component","api_key":{"load_from_db":false,"required":true,"placeholder":"","show":true,"name":"api_key","value":"","display_name":"SerpApi API Key","advanced":false,"input_types":["Message"],"dynamic":false,"info":"","title_case":false,"password":true,"type":"str","_input_type":"SecretStrInput"},"code":{"type":"code","required":true,"placeholder":"","list":false,"show":true,"multiline":true,"value":"from typing import Any\r\nfrom langchain.tools import StructuredTool\r\nfrom pydantic import BaseModel, Field\r\nfrom langflow.base.langchain_utilities.model import LCToolComponent\r\nfrom langflow.field_typing import Tool\r\nfrom langflow.inputs import IntInput, MessageTextInput, SecretStrInput\r\nfrom langflow.schema import Data\r\nimport requests\r\nimport logging\r\n\r\n# Configure logging\r\nlogging.basicConfig(level=logging.DEBUG)\r\n\r\n# Define the component class for SerpApi\r\nclass GoogleSerpAPIComponent(LCToolComponent):\r\n    display_name: str = \"Google Serp API\"\r\n    description: str = \"Retrieve search results using the Google Serp API.\"\r\n    name = \"GoogleSerpAPI\"\r\n    documentation: str = \"https://serpapi.com/docs/\"\r\n\r\n    # Define the inputs needed for this component\r\n    inputs = [\r\n        SecretStrInput(name=\"api_key\", display_name=\"SerpApi API Key\", required=True),\r\n        MessageTextInput(name=\"query\", display_name=\"Search Query\", required=True),\r\n        IntInput(name=\"num_results\", display_name=\"Number of Results\", value=10, required=True),\r\n        MessageTextInput(name=\"gl\", display_name=\"Geographical Location (gl)\", value=\"us\"),\r\n        MessageTextInput(name=\"hl\", display_name=\"Language (hl)\", value=\"en\"),\r\n    ]\r\n\r\n    # Define the schema for the API tool arguments\r\n    class GoogleSerpAPISchema(BaseModel):\r\n        api_key: str = Field(..., description=\"SerpApi API Key\")\r\n        query: str = Field(..., description=\"The search query string\")\r\n        num_results: int = Field(10, description=\"Number of search results to retrieve\")\r\n        gl: str = Field(\"us\", description=\"Geographical location (e.g., 'us' for United States)\")\r\n        hl: str = Field(\"en\", description=\"Language for the search (e.g., 'en' for English)\")\r\n\r\n    # Define the API Wrapper for SerpApi\r\n    class GoogleSerpAPIWrapper:\r\n        def __init__(self, api_key: str):\r\n            self.api_key = api_key\r\n            self.url = \"https://serpapi.com/search\"\r\n    \r\n        def get_search_results(self, query: str, num_results: int = 10, gl: str = \"us\", hl: str = \"en\") -> list[dict[str, Any]]:\r\n            params = {\r\n                \"q\": query,\r\n                \"num\": num_results,\r\n                \"gl\": gl,\r\n                \"hl\": hl,\r\n                \"engine\": \"google\",\r\n                \"api_key\": \"b9db80f260bf0ad145468f5445375fb55797ef18dac6d1a3c8a68ab917e1123b\" #self.api_key\"\"\r\n            }\r\n\r\n            # Print the API key being used\r\n            logging.debug(f\"API Key: {self.api_key}\")\r\n\r\n            # Log the URL and parameters being sent to SerpApi\r\n            logging.debug(f\"Request URL: {self.url}\")\r\n            logging.debug(f\"Request Params: {params}\")\r\n\r\n            response = requests.get(self.url, params=params)\r\n\r\n            # Log the response status and content\r\n            logging.debug(f\"Response Status Code: {response.status_code}\")\r\n            logging.debug(f\"Response Content: {response.text}\")\r\n\r\n            # Check for errors\r\n            if response.status_code == 403:\r\n                raise Exception(\"Error 403: Forbidden. Please check your API key or request quota.\")\r\n            elif response.status_code == 401:\r\n                raise Exception(\"Error 401: Invalid API key. Please verify your API key.\")\r\n            elif response.status_code != 200:\r\n                raise Exception(f\"Error {response.status_code}: {response.json().get('error', 'Unknown error')}\")\r\n\r\n            # Return the organic results from the response\r\n            return response.json().get('organic_results', [])\r\n\r\n    # Build the API wrapper\r\n    def _build_wrapper(self, api_key: str):\r\n        return self.GoogleSerpAPIWrapper(api_key=api_key)\r\n\r\n    # Tool builder function\r\n    def build_tool(self) -> Tool:\r\n        def get_search_results(api_key: str, query: str, num_results: int = 10, gl: str = \"us\", hl: str = \"en\") -> list[dict[str, Any]]:\r\n            wrapper = self._build_wrapper(api_key=api_key)\r\n            return wrapper.get_search_results(query=query, num_results=num_results, gl=gl, hl=hl)\r\n\r\n        tool = StructuredTool.from_function(\r\n            name=\"google_serp_api\",\r\n            description=\"Fetch search results using Google Serp API\",\r\n            func=get_search_results,\r\n            args_schema=self.GoogleSerpAPISchema,\r\n        )\r\n\r\n        self.status = \"Google Serp API Tool created successfully.\"\r\n        return tool\r\n\r\n    # Run model function to trigger the API call\r\n    def run_model(self) -> list[Data]:\r\n        tool = self.build_tool()\r\n        results = tool.run(\r\n            {\r\n                \"api_key\": self.api_key,\r\n                \"query\": self.query,\r\n                \"num_results\": self.num_results,\r\n                \"gl\": self.gl,\r\n                \"hl\": self.hl,\r\n            }\r\n        )\r\n\r\n        # Format the results for output\r\n        data_list = [Data(data=result, text=f\"Title: {result['title']}, Snippet: {result['snippet']}\") for result in results]\r\n\r\n        self.status = data_list\r\n        return data_list\r\n","fileTypes":[],"file_path":"","password":false,"name":"code","advanced":true,"dynamic":true,"info":"","load_from_db":false,"title_case":false},"gl":{"trace_as_input":true,"trace_as_metadata":true,"load_from_db":false,"list":false,"required":false,"placeholder":"","show":true,"name":"gl","value":"us","display_name":"Geographical Location (gl)","advanced":false,"input_types":["Message"],"dynamic":false,"info":"","title_case":false,"type":"str","_input_type":"MessageTextInput"},"hl":{"trace_as_input":true,"trace_as_metadata":true,"load_from_db":false,"list":false,"required":false,"placeholder":"","show":true,"name":"hl","value":"en","display_name":"Language (hl)","advanced":false,"input_types":["Message"],"dynamic":false,"info":"","title_case":false,"type":"str","_input_type":"MessageTextInput"},"num_results":{"trace_as_metadata":true,"list":false,"required":true,"placeholder":"","show":true,"name":"num_results","value":10,"display_name":"Number of Results","advanced":false,"dynamic":false,"info":"","title_case":false,"type":"int","_input_type":"IntInput"},"query":{"trace_as_input":true,"trace_as_metadata":true,"load_from_db":false,"list":false,"required":true,"placeholder":"","show":true,"name":"query","value":"cryptocurrency","display_name":"Search Query","advanced":false,"input_types":["Message"],"dynamic":false,"info":"","title_case":false,"type":"str","_input_type":"MessageTextInput"}},"description":"Retrieve search results using the Google Serp API.","base_classes":["Data","Tool"],"display_name":"Google Serp API","documentation":"https://serpapi.com/docs/","custom_fields":{},"output_types":[],"pinned":false,"conditional_paths":[],"frozen":false,"outputs":[{"types":["Data"],"selected":"Data","name":"api_run_model","display_name":"Data","method":"run_model","value":"__UNDEFINED__","cache":true,"required_inputs":["api_key","gl","hl","num_results","query"]},{"types":["Tool"],"selected":"Tool","name":"api_build_tool","display_name":"Tool","method":"build_tool","value":"__UNDEFINED__","cache":true,"required_inputs":["api_key","gl","hl","num_results","query"]}],"field_order":["api_key","query","num_results","gl","hl"],"beta":false,"edited":true,"metadata":{},"lf_version":"1.0.19"},"id":"CustomComponent-Zofge"},"selected":false,"width":384,"height":693,"positionAbsolute":{"x":27.52726949015846,"y":1961.227945959946},"dragging":false},{"id":"CustomComponent-ueL2z","type":"genericNode","position":{"x":-432.0697604470698,"y":1959.4768464823205},"data":{"type":"NewsAPI","node":{"template":{"_type":"Component","api_key":{"load_from_db":false,"required":true,"placeholder":"","show":true,"name":"api_key","value":"","display_name":"News API Key","advanced":false,"input_types":["Message"],"dynamic":false,"info":"","title_case":false,"password":true,"type":"str","_input_type":"SecretStrInput"},"code":{"type":"code","required":true,"placeholder":"","list":false,"show":true,"multiline":true,"value":"from typing import Any, List, Dict\nfrom pydantic import BaseModel, Field\nfrom langflow.base.langchain_utilities.model import LCToolComponent\nfrom langflow.inputs import IntInput, MessageTextInput, SecretStrInput\nfrom langflow.schema import Data\nimport requests\n\n\n# Define the component class for News API\nclass NewsAPIComponent(LCToolComponent):\n    display_name: str = \"News API\"\n    description: str = \"Retrieve the latest news articles using the News API.\"\n    name = \"NewsAPI\"\n    documentation: str = \"https://newsapi.org/docs/endpoints/everything\"\n\n    # Define the inputs needed for this component\n    inputs = [\n        SecretStrInput(name=\"api_key\", display_name=\"News API Key\", required=True),\n        MessageTextInput(name=\"query\", display_name=\"Search Query\", required=True),\n        IntInput(name=\"page_size\", display_name=\"Number of Results\", value=10, required=False),\n        MessageTextInput(name=\"language\", display_name=\"Language\", value=\"en\", required=False),\n        MessageTextInput(name=\"sort_by\", display_name=\"Sort By\", value=\"publishedAt\", required=False),\n        MessageTextInput(name=\"from_date\", display_name=\"From Date (YYYY-MM-DD)\", required=False),\n        MessageTextInput(name=\"to_date\", display_name=\"To Date (YYYY-MM-DD)\", required=False),\n        MessageTextInput(name=\"sources\", display_name=\"News Sources\", required=False),\n        MessageTextInput(name=\"domains\", display_name=\"Domains\", required=False),\n    ]\n\n    # Define the schema for the API tool arguments\n    class NewsAPISchema(BaseModel):\n        api_key: str = Field(..., description=\"Your News API Key\")\n        query: str = Field(..., description=\"The search query to look for in articles\")\n        page_size: int = Field(10, description=\"Number of articles to return\")\n        language: str = Field(\"en\", description=\"The language of the articles (default is 'en')\")\n        sort_by: str = Field(\"publishedAt\", description=\"Sort by relevancy, popularity, or published date (default is 'publishedAt')\")\n        from_date: str = Field(None, description=\"Start date for the news articles (YYYY-MM-DD)\")\n        to_date: str = Field(None, description=\"End date for the news articles (YYYY-MM-DD)\")\n        sources: str = Field(None, description=\"Comma-separated list of news sources (e.g., 'bbc-news, techcrunch')\")\n        domains: str = Field(None, description=\"Comma-separated list of domains (e.g., 'wsj.com, bbc.co.uk')\")\n\n    # Define the API Wrapper for News API\n    class NewsAPIWrapper:\n        BASE_URL = \"https://newsapi.org/v2/everything\"\n\n        def __init__(self, api_key: str):\n            self.api_key = api_key\n\n        def get_news(self, query: str, page_size: int = 10, language: str = \"en\", sort_by: str = \"publishedAt\", from_date: str = None, to_date: str = None, sources: str = None, domains: str = None) -> List[Dict[str, Any]]:\n            # Prepare request parameters based on inputs\n            params = {\n                \"q\": query,\n                \"pageSize\": page_size,\n                \"language\": language,\n                \"sortBy\": sort_by,\n                \"from\": from_date,\n                \"to\": to_date,\n                \"sources\": sources,\n                \"domains\": domains,\n                \"apiKey\": \"32e88604cf474c199dea193cccd63e96\"  # self.api_key,  # Use the provided API key dynamically\n            }\n\n            # Remove None values from params\n            params = {k: v for k, v in params.items() if v is not None}\n\n            # Print out the details of the API request\n            print(\"\\n[INFO] - Sending request to News API...\")\n            print(f\"[INFO] - API Endpoint: {self.BASE_URL}\")\n            print(f\"[INFO] - Request Parameters: {params}\")\n\n            response = requests.get(self.BASE_URL, params=params)\n\n            # Handle common errors gracefully\n            if response.status_code == 401:\n                print(\"[ERROR] - Unauthorized request. Check your API key.\")\n                raise Exception(\"Error 401: Unauthorized. Please check your API key.\")\n            elif response.status_code == 429:\n                print(\"[ERROR] - Rate limit exceeded.\")\n                raise Exception(\"Error 429: Too many requests. Rate limit exceeded.\")\n            elif response.status_code != 200:\n                error_message = response.json().get('message', 'Unknown error')\n                print(f\"[ERROR] - Error {response.status_code}: {error_message}\")\n                raise Exception(f\"Error {response.status_code}: {error_message}\")\n\n            print(\"[INFO] - Request successful. Processing response data...\")\n            return response.json().get('articles', [])\n\n    # Build the API wrapper\n    def _build_wrapper(self, api_key: str):\n        print(f\"[INFO] - Building API wrapper with API Key: {api_key[:5]}***\")\n        return self.NewsAPIWrapper(api_key=api_key)\n\n    # Tool builder function\n    def build_tool(self) -> Tool:\n        def get_news(api_key: str, query: str, page_size: int = 10, language: str = \"en\", sort_by: str = \"publishedAt\", from_date: str = None, to_date: str = None, sources: str = None, domains: str = None) -> List[Dict[str, Any]]:\n            wrapper = self._build_wrapper(api_key=api_key)\n            return wrapper.get_news(query=query, page_size=page_size, language=language, sort_by=sort_by, from_date=from_date, to_date=to_date, sources=sources, domains=domains)\n\n        tool = StructuredTool.from_function(\n            name=\"news_api\",\n            description=\"Fetch the latest news articles using the News API\",\n            func=get_news,\n            args_schema=self.NewsAPISchema,\n        )\n\n        print(\"[INFO] - News API Tool created successfully.\")\n        return tool\n\n    # Run model function to trigger the API call\n    def run_model(self, inputs: Dict[str, Any]) -> List[Data]:\n        tool = self.build_tool()\n\n        # Print the inputs received\n        print(\"[INFO] - Running model with the following inputs:\")\n        for key, value in inputs.items():\n            print(f\"  {key}: {value}\")\n\n        # The API key and other inputs are passed dynamically\n        results = tool.run(\n            {\n                \"api_key\": inputs[\"api_key\"],\n                \"query\": inputs[\"query\"],\n                \"page_size\": inputs.get(\"page_size\", 10),\n                \"language\": inputs.get(\"language\", \"en\"),\n                \"sort_by\": inputs.get(\"sort_by\", \"publishedAt\"),\n                \"from_date\": inputs.get(\"from_date\", None),\n                \"to_date\": inputs.get(\"to_date\", None),\n                \"sources\": inputs.get(\"sources\", None),\n                \"domains\": inputs.get(\"domains\", None),\n            }\n        )\n\n        # Format the results for output\n        data_list = [\n            Data(\n                data=result,\n                text=f\"Title: {result.get('title', 'N/A')}, Description: {result.get('description', 'N/A')}, URL: {result.get('url', 'N/A')}\"\n            )\n            for result in results\n        ]\n\n        print(\"[INFO] - Finished processing the News API response.\")\n        \n        # Print out a cURL command for manual testing\n        print(\"\\n[INFO] - cURL Command for manual test:\")\n        curl_command = (\n            f\"curl -X GET 'https://newsapi.org/v2/everything?\"\n            f\"q={inputs['query']}&\"\n            f\"pageSize={inputs.get('page_size', 10)}&\"\n            f\"language={inputs.get('language', 'en')}&\"\n            f\"sortBy={inputs.get('sort_by', 'publishedAt')}&\"\n            f\"from={inputs.get('from_date', '')}&\"\n            f\"to={inputs.get('to_date', '')}&\"\n            f\"apiKey={inputs['api_key']}'\"\n        )\n        print(curl_command)\n\n        self.status = data_list\n        return data_list\n","fileTypes":[],"file_path":"","password":false,"name":"code","advanced":true,"dynamic":true,"info":"","load_from_db":false,"title_case":false},"domains":{"trace_as_input":true,"trace_as_metadata":true,"load_from_db":false,"list":false,"required":false,"placeholder":"","show":true,"name":"domains","value":"","display_name":"Domains","advanced":false,"input_types":["Message"],"dynamic":false,"info":"","title_case":false,"type":"str","_input_type":"MessageTextInput"},"from_date":{"trace_as_input":true,"trace_as_metadata":true,"load_from_db":false,"list":false,"required":false,"placeholder":"","show":true,"name":"from_date","value":"","display_name":"From Date (YYYY-MM-DD)","advanced":false,"input_types":["Message"],"dynamic":false,"info":"","title_case":false,"type":"str","_input_type":"MessageTextInput"},"language":{"trace_as_input":true,"trace_as_metadata":true,"load_from_db":false,"list":false,"required":false,"placeholder":"","show":true,"name":"language","value":"en","display_name":"Language","advanced":false,"input_types":["Message"],"dynamic":false,"info":"","title_case":false,"type":"str","_input_type":"MessageTextInput"},"page_size":{"trace_as_metadata":true,"list":false,"required":false,"placeholder":"","show":true,"name":"page_size","value":10,"display_name":"Number of Results","advanced":false,"dynamic":false,"info":"","title_case":false,"type":"int","_input_type":"IntInput"},"query":{"trace_as_input":true,"trace_as_metadata":true,"load_from_db":false,"list":false,"required":true,"placeholder":"","show":true,"name":"query","value":"cryptocurrency","display_name":"Search Query","advanced":false,"input_types":["Message"],"dynamic":false,"info":"","title_case":false,"type":"str","_input_type":"MessageTextInput"},"sort_by":{"trace_as_input":true,"trace_as_metadata":true,"load_from_db":false,"list":false,"required":false,"placeholder":"","show":true,"name":"sort_by","value":"publishedAt","display_name":"Sort By","advanced":false,"input_types":["Message"],"dynamic":false,"info":"","title_case":false,"type":"str","_input_type":"MessageTextInput"},"sources":{"trace_as_input":true,"trace_as_metadata":true,"load_from_db":false,"list":false,"required":false,"placeholder":"","show":true,"name":"sources","value":"","display_name":"News Sources","advanced":false,"input_types":["Message"],"dynamic":false,"info":"","title_case":false,"type":"str","_input_type":"MessageTextInput"},"to_date":{"trace_as_input":true,"trace_as_metadata":true,"load_from_db":false,"list":false,"required":false,"placeholder":"","show":true,"name":"to_date","value":"","display_name":"To Date (YYYY-MM-DD)","advanced":false,"input_types":["Message"],"dynamic":false,"info":"","title_case":false,"type":"str","_input_type":"MessageTextInput"}},"description":"Retrieve the latest news articles using the News API.","base_classes":["Data","Tool"],"display_name":"News API","documentation":"https://newsapi.org/docs/endpoints/everything","custom_fields":{},"output_types":[],"pinned":false,"conditional_paths":[],"frozen":false,"outputs":[{"types":["Data"],"selected":"Data","name":"api_run_model","display_name":"Data","method":"run_model","value":"__UNDEFINED__","cache":true,"required_inputs":["api_key"]},{"types":["Tool"],"selected":"Tool","name":"api_build_tool","display_name":"Tool","method":"build_tool","value":"__UNDEFINED__","cache":true,"required_inputs":["api_key"]}],"field_order":["api_key","query","page_size","language","sort_by","from_date","to_date","sources","domains"],"beta":false,"edited":true,"metadata":{},"lf_version":"1.0.19"},"id":"CustomComponent-ueL2z"},"selected":false,"width":384,"height":1040,"positionAbsolute":{"x":-432.0697604470698,"y":1959.4768464823205},"dragging":false},{"id":"CustomComponent-zFBsV","type":"genericNode","position":{"x":439.2969863183848,"y":1358.7375565158172},"data":{"type":"CoinMarketCapAPI","node":{"template":{"_type":"Component","api_key":{"load_from_db":false,"required":true,"placeholder":"","show":true,"name":"api_key","value":"","display_name":"CoinMarketCap API Key","advanced":false,"input_types":["Message"],"dynamic":false,"info":"","title_case":false,"password":true,"type":"str","_input_type":"SecretStrInput"},"code":{"type":"code","required":true,"placeholder":"","list":false,"show":true,"multiline":true,"value":"from typing import Any\r\nfrom langchain.tools import StructuredTool\r\nfrom pydantic import BaseModel, Field\r\nfrom langflow.base.langchain_utilities.model import LCToolComponent\r\nfrom langflow.field_typing import Tool\r\nfrom langflow.inputs import DictInput, IntInput, MultilineInput, SecretStrInput\r\nfrom langflow.schema import Data\r\nimport requests\r\n\r\nclass CoinMarketCapAPIComponent(LCToolComponent):\r\n    display_name: str = \"CoinMarketCap API\"\r\n    description: str = \"Retrieve latest cryptocurrency data from CoinMarketCap.\"\r\n    name = \"CoinMarketCapAPI\"\r\n    documentation: str = \"https://coinmarketcap.com/api/documentation/v1/\"\r\n\r\n    class CoinMarketCapAPIWrapper:\r\n        \"\"\"Wrapper class to call CoinMarketCap API and retrieve cryptocurrency data.\"\"\"\r\n        def __init__(self, api_key: str):\r\n            self.api_key = api_key\r\n            self.url = \"https://pro-api.coinmarketcap.com/v1/cryptocurrency/listings/latest\"\r\n            self.headers = {\r\n                \"Accepts\": \"application/json\",\r\n                \"X-CMC_PRO_API_KEY\": self.api_key,\r\n            }\r\n    \r\n        def get_cryptocurrency_data(self, start: int = 1, limit: int = 10) -> list[dict[str, Any]]:\r\n            parameters = {\"start\": start, \"limit\": limit, \"convert\": \"USD\"}\r\n            response = requests.get(self.url, headers=self.headers, params=parameters)\r\n            data = response.json()\r\n    \r\n            if response.status_code != 200:\r\n                raise Exception(f\"Error {response.status_code}: {data.get('status', {}).get('error_message', 'Unknown error')}\")\r\n    \r\n            return data[\"data\"]\r\n    \r\n    # Define the inputs needed for this component\r\n    inputs = [\r\n        SecretStrInput(name=\"api_key\", display_name=\"CoinMarketCap API Key\", required=True),\r\n        IntInput(name=\"start\", display_name=\"Start\", value=1 , required=True),\r\n        IntInput(name=\"limit\", display_name=\"Limit\", value=10, required=True),\r\n    ]\r\n    \r\n        # Define the schema for the API tool arguments\r\n    class CoinMarketCapSchema(BaseModel):\r\n        start: int = Field(1, description=\"The rank from which to start the listing\")\r\n        limit: int = Field(10, description=\"The number of cryptocurrencies to retrieve\")\r\n    \r\n    \r\n    # Helper function to build the API wrapper\r\n    def _build_wrapper(self):\r\n        return self.CoinMarketCapAPIWrapper(api_key=self.api_key)\r\n\r\n    # Tool builder function\r\n    def build_tool(self) -> Tool:\r\n        wrapper = self._build_wrapper()\r\n\r\n        def get_crypto_data(\r\n            start: int = 1, limit: int = 10\r\n        ) -> list[dict[str, Any]]:\r\n            # Call the wrapper function to get cryptocurrency data\r\n            return wrapper.get_cryptocurrency_data(start=start, limit=limit)\r\n\r\n        # Return the StructuredTool\r\n        tool = StructuredTool.from_function(\r\n            name=\"coinmarketcap_api\",\r\n            description=\"Fetch latest cryptocurrency data from CoinMarketCap API\",\r\n            func=get_crypto_data,\r\n            args_schema=self.CoinMarketCapSchema,\r\n        )\r\n\r\n        self.status = f\"CoinMarketCap API Tool created with API Key.\"\r\n        return tool\r\n\r\n    # Run model function to trigger the API call\r\n    def run_model(self) -> list[Data]:\r\n        tool = self.build_tool()\r\n        results = tool.run(\r\n            {\r\n                \"start\": self.start,\r\n                \"limit\": self.limit,\r\n            }\r\n        )\r\n\r\n        data_list = [Data(data=result, text=f\"Name: {result['name']}, Price: {result['quote']['USD']['price']}\") for result in results]\r\n\r\n        self.status = data_list\r\n        return data_list    \r\n","fileTypes":[],"file_path":"","password":false,"name":"code","advanced":true,"dynamic":true,"info":"","load_from_db":false,"title_case":false},"limit":{"trace_as_metadata":true,"list":false,"required":true,"placeholder":"","show":true,"name":"limit","value":10,"display_name":"Limit","advanced":false,"dynamic":false,"info":"","title_case":false,"type":"int","_input_type":"IntInput"},"start":{"trace_as_metadata":true,"list":false,"required":true,"placeholder":"","show":true,"name":"start","value":1,"display_name":"Start","advanced":false,"dynamic":false,"info":"","title_case":false,"type":"int","_input_type":"IntInput"}},"description":"Retrieve latest cryptocurrency data from CoinMarketCap.","base_classes":["Data","Tool"],"display_name":"CoinMarketCap API","documentation":"https://coinmarketcap.com/api/documentation/v1/","custom_fields":{},"output_types":[],"pinned":false,"conditional_paths":[],"frozen":false,"outputs":[{"types":["Data"],"selected":"Data","name":"api_run_model","display_name":"Data","method":"run_model","value":"__UNDEFINED__","cache":true,"required_inputs":["api_key","limit","start"]},{"types":["Tool"],"selected":"Tool","name":"api_build_tool","display_name":"Tool","method":"build_tool","value":"__UNDEFINED__","cache":true,"required_inputs":["api_key","limit","start"]}],"field_order":["api_key","start","limit"],"beta":false,"edited":true,"metadata":{},"lf_version":"1.0.19"},"id":"CustomComponent-zFBsV"},"selected":false,"width":384,"height":520,"positionAbsolute":{"x":439.2969863183848,"y":1358.7375565158172},"dragging":false},{"id":"DuckDuckGoSearch-mlFQ7","type":"genericNode","position":{"x":452.9583659542377,"y":1964.1362449528967},"data":{"type":"DuckDuckGoSearch","node":{"template":{"_type":"Component","code":{"type":"code","required":true,"placeholder":"","list":false,"show":true,"multiline":true,"value":"from typing import Any\n\nfrom langchain.tools import StructuredTool\nfrom langchain_community.tools import DuckDuckGoSearchRun\nfrom pydantic import BaseModel, Field\n\nfrom langflow.base.langchain_utilities.model import LCToolComponent\nfrom langflow.field_typing import Tool\nfrom langflow.inputs import IntInput, MessageTextInput\nfrom langflow.schema import Data\n\n\nclass DuckDuckGoSearchComponent(LCToolComponent):\n    display_name: str = \"DuckDuckGo Search\"\n    description: str = \"Perform web searches using the DuckDuckGo search engine with result limiting\"\n    name = \"DuckDuckGoSearch\"\n    documentation: str = \"https://python.langchain.com/docs/integrations/tools/ddg\"\n    icon: str = \"DuckDuckGo\"\n    inputs = [\n        MessageTextInput(\n            name=\"input_value\",\n            display_name=\"Search Query\",\n            required=True,\n        ),\n        IntInput(name=\"max_results\", display_name=\"Max Results\", value=5, advanced=True),\n        IntInput(name=\"max_snippet_length\", display_name=\"Max Snippet Length\", value=100, advanced=True),\n    ]\n\n    class DuckDuckGoSearchSchema(BaseModel):\n        query: str = Field(..., description=\"The search query\")\n        max_results: int = Field(5, description=\"Maximum number of results to return\")\n        max_snippet_length: int = Field(100, description=\"Maximum length of each result snippet\")\n\n    def _build_wrapper(self):\n        return DuckDuckGoSearchRun()\n\n    def build_tool(self) -> Tool:\n        wrapper = self._build_wrapper()\n\n        def search_func(query: str, max_results: int = 5, max_snippet_length: int = 100) -> list[dict[str, Any]]:\n            full_results = wrapper.run(f\"{query} (site:*)\")\n            result_list = full_results.split(\"\\n\")[:max_results]\n            limited_results = []\n            for result in result_list:\n                limited_result = {\n                    \"snippet\": result[:max_snippet_length],\n                }\n                limited_results.append(limited_result)\n            return limited_results\n\n        tool = StructuredTool.from_function(\n            name=\"duckduckgo_search\",\n            description=\"Search for recent results using DuckDuckGo with result limiting\",\n            func=search_func,\n            args_schema=self.DuckDuckGoSearchSchema,\n        )\n        self.status = \"DuckDuckGo Search Tool created\"\n        return tool\n\n    def run_model(self) -> list[Data]:\n        tool = self.build_tool()\n        results = tool.run(\n            {\n                \"query\": self.input_value,\n                \"max_results\": self.max_results,\n                \"max_snippet_length\": self.max_snippet_length,\n            }\n        )\n        data_list = [Data(data=result, text=result.get(\"snippet\", \"\")) for result in results]\n        self.status = data_list\n        return data_list\n","fileTypes":[],"file_path":"","password":false,"name":"code","advanced":true,"dynamic":true,"info":"","load_from_db":false,"title_case":false},"input_value":{"trace_as_input":true,"trace_as_metadata":true,"load_from_db":false,"list":false,"required":true,"placeholder":"","show":true,"name":"input_value","value":"cryptocurrency","display_name":"Search Query","advanced":false,"input_types":["Message"],"dynamic":false,"info":"","title_case":false,"type":"str","_input_type":"MessageTextInput"},"max_results":{"trace_as_metadata":true,"list":false,"required":false,"placeholder":"","show":true,"name":"max_results","value":5,"display_name":"Max Results","advanced":true,"dynamic":false,"info":"","title_case":false,"type":"int","_input_type":"IntInput"},"max_snippet_length":{"trace_as_metadata":true,"list":false,"required":false,"placeholder":"","show":true,"name":"max_snippet_length","value":100,"display_name":"Max Snippet Length","advanced":true,"dynamic":false,"info":"","title_case":false,"type":"int","_input_type":"IntInput"}},"description":"Perform web searches using the DuckDuckGo search engine with result limiting","icon":"DuckDuckGo","base_classes":["Data","Tool"],"display_name":"DuckDuckGo Search","documentation":"https://python.langchain.com/docs/integrations/tools/ddg","custom_fields":{},"output_types":[],"pinned":false,"conditional_paths":[],"frozen":false,"outputs":[{"types":["Data"],"selected":"Data","name":"api_run_model","display_name":"Data","method":"run_model","value":"__UNDEFINED__","cache":true,"required_inputs":["input_value","max_results","max_snippet_length"]},{"types":["Tool"],"selected":"Tool","name":"api_build_tool","display_name":"Tool","method":"build_tool","value":"__UNDEFINED__","cache":true,"required_inputs":["input_value","max_results","max_snippet_length"]}],"field_order":["input_value","max_results","max_snippet_length"],"beta":false,"edited":false,"metadata":{},"lf_version":"1.0.19"},"id":"DuckDuckGoSearch-mlFQ7"},"selected":false,"width":384,"height":347,"dragging":false,"positionAbsolute":{"x":452.9583659542377,"y":1964.1362449528967}},{"id":"ChatOutput-cpqrB","type":"genericNode","position":{"x":2205.8211055484867,"y":650.4520718133501},"data":{"type":"ChatOutput","node":{"template":{"_type":"Component","code":{"type":"code","required":true,"placeholder":"","list":false,"show":true,"multiline":true,"value":"from langflow.base.io.chat import ChatComponent\nfrom langflow.inputs import BoolInput\nfrom langflow.io import DropdownInput, MessageTextInput, Output\nfrom langflow.schema.message import Message\nfrom langflow.utils.constants import MESSAGE_SENDER_AI, MESSAGE_SENDER_NAME_AI, MESSAGE_SENDER_USER\n\n\nclass ChatOutput(ChatComponent):\n    display_name = \"Chat Output\"\n    description = \"Display a chat message in the Playground.\"\n    icon = \"ChatOutput\"\n    name = \"ChatOutput\"\n\n    inputs = [\n        MessageTextInput(\n            name=\"input_value\",\n            display_name=\"Text\",\n            info=\"Message to be passed as output.\",\n        ),\n        BoolInput(\n            name=\"should_store_message\",\n            display_name=\"Store Messages\",\n            info=\"Store the message in the history.\",\n            value=True,\n            advanced=True,\n        ),\n        DropdownInput(\n            name=\"sender\",\n            display_name=\"Sender Type\",\n            options=[MESSAGE_SENDER_AI, MESSAGE_SENDER_USER],\n            value=MESSAGE_SENDER_AI,\n            advanced=True,\n            info=\"Type of sender.\",\n        ),\n        MessageTextInput(\n            name=\"sender_name\",\n            display_name=\"Sender Name\",\n            info=\"Name of the sender.\",\n            value=MESSAGE_SENDER_NAME_AI,\n            advanced=True,\n        ),\n        MessageTextInput(\n            name=\"session_id\",\n            display_name=\"Session ID\",\n            info=\"The session ID of the chat. If empty, the current session ID parameter will be used.\",\n            advanced=True,\n        ),\n        MessageTextInput(\n            name=\"data_template\",\n            display_name=\"Data Template\",\n            value=\"{text}\",\n            advanced=True,\n            info=\"Template to convert Data to Text. If left empty, it will be dynamically set to the Data's text key.\",\n        ),\n    ]\n    outputs = [\n        Output(display_name=\"Message\", name=\"message\", method=\"message_response\"),\n    ]\n\n    def message_response(self) -> Message:\n        message = Message(\n            text=self.input_value,\n            sender=self.sender,\n            sender_name=self.sender_name,\n            session_id=self.session_id,\n        )\n        if self.session_id and isinstance(message, Message) and self.should_store_message:\n            stored_message = self.store_message(\n                message,\n            )\n            self.message.value = stored_message\n            message = stored_message\n\n        self.status = message\n        return message\n","fileTypes":[],"file_path":"","password":false,"name":"code","advanced":true,"dynamic":true,"info":"","load_from_db":false,"title_case":false},"data_template":{"trace_as_input":true,"trace_as_metadata":true,"load_from_db":false,"list":false,"required":false,"placeholder":"","show":true,"name":"data_template","value":"{text}","display_name":"Data Template","advanced":true,"input_types":["Message"],"dynamic":false,"info":"Template to convert Data to Text. If left empty, it will be dynamically set to the Data's text key.","title_case":false,"type":"str","_input_type":"MessageTextInput"},"input_value":{"trace_as_input":true,"trace_as_metadata":true,"load_from_db":false,"list":false,"required":false,"placeholder":"","show":true,"name":"input_value","value":"","display_name":"Text","advanced":false,"input_types":["Message"],"dynamic":false,"info":"Message to be passed as output.","title_case":false,"type":"str","_input_type":"MessageTextInput"},"sender":{"trace_as_metadata":true,"options":["Machine","User"],"combobox":false,"required":false,"placeholder":"","show":true,"name":"sender","value":"Machine","display_name":"Sender Type","advanced":true,"dynamic":false,"info":"Type of sender.","title_case":false,"type":"str","_input_type":"DropdownInput"},"sender_name":{"trace_as_input":true,"trace_as_metadata":true,"load_from_db":false,"list":false,"required":false,"placeholder":"","show":true,"name":"sender_name","value":"AI","display_name":"Sender Name","advanced":true,"input_types":["Message"],"dynamic":false,"info":"Name of the sender.","title_case":false,"type":"str","_input_type":"MessageTextInput"},"session_id":{"trace_as_input":true,"trace_as_metadata":true,"load_from_db":false,"list":false,"required":false,"placeholder":"","show":true,"name":"session_id","value":"","display_name":"Session ID","advanced":true,"input_types":["Message"],"dynamic":false,"info":"The session ID of the chat. If empty, the current session ID parameter will be used.","title_case":false,"type":"str","_input_type":"MessageTextInput"},"should_store_message":{"trace_as_metadata":true,"list":false,"required":false,"placeholder":"","show":true,"name":"should_store_message","value":true,"display_name":"Store Messages","advanced":true,"dynamic":false,"info":"Store the message in the history.","title_case":false,"type":"bool","_input_type":"BoolInput"}},"description":"Display a chat message in the Playground.","icon":"ChatOutput","base_classes":["Message"],"display_name":"Chat Output","documentation":"","custom_fields":{},"output_types":[],"pinned":false,"conditional_paths":[],"frozen":false,"outputs":[{"types":["Message"],"selected":"Message","name":"message","display_name":"Message","method":"message_response","value":"__UNDEFINED__","cache":true}],"field_order":["input_value","should_store_message","sender","sender_name","session_id","data_template"],"beta":false,"edited":false,"metadata":{},"lf_version":"1.0.19"},"id":"ChatOutput-cpqrB"},"selected":false,"width":384,"height":291},{"id":"AmazonBedrockModel-BHkWn","type":"genericNode","position":{"x":1306.7928768880204,"y":1165.589665044562},"data":{"type":"AmazonBedrockModel","node":{"template":{"_type":"Component","output_parser":{"trace_as_metadata":true,"list":false,"required":false,"placeholder":"","show":true,"name":"output_parser","value":"","display_name":"Output Parser","advanced":true,"input_types":["OutputParser"],"dynamic":false,"info":"The parser to use to parse the output of the model","title_case":false,"type":"other","_input_type":"HandleInput"},"aws_access_key":{"load_from_db":false,"required":false,"placeholder":"","show":true,"name":"aws_access_key","value":"","display_name":"Access Key","advanced":false,"input_types":["Message"],"dynamic":false,"info":"","title_case":false,"password":true,"type":"str","_input_type":"SecretStrInput"},"aws_secret_key":{"load_from_db":false,"required":false,"placeholder":"","show":true,"name":"aws_secret_key","value":"","display_name":"Secret Key","advanced":false,"input_types":["Message"],"dynamic":false,"info":"","title_case":false,"password":true,"type":"str","_input_type":"SecretStrInput"},"code":{"type":"code","required":true,"placeholder":"","list":false,"show":true,"multiline":true,"value":"from langflow.base.models.model import LCModelComponent\nfrom langflow.field_typing import LanguageModel\nfrom langflow.inputs import MessageTextInput, SecretStrInput\nfrom langflow.inputs.inputs import HandleInput\nfrom langflow.io import DictInput, DropdownInput\nimport langwatch\n\n@langwatch.trace()\nclass AmazonBedrockComponent(LCModelComponent):\n    display_name: str = \"Amazon Bedrock\"\n    description: str = \"Generate text using Amazon Bedrock LLMs.\"\n    icon = \"Amazon\"\n    name = \"AmazonBedrockModel\"\n    \n    inputs = LCModelComponent._base_inputs + [\n        DropdownInput(\n            name=\"model_id\",\n            display_name=\"Model ID\",\n            options=[\n                \"amazon.titan-text-express-v1\",\n                \"amazon.titan-text-lite-v1\",\n                \"amazon.titan-text-premier-v1:0\",\n                \"amazon.titan-embed-text-v1\",\n                \"amazon.titan-embed-text-v2:0\",\n                \"amazon.titan-embed-image-v1\",\n                \"amazon.titan-image-generator-v1\",\n                \"anthropic.claude-v2\",\n                \"anthropic.claude-v2:1\",\n                \"anthropic.claude-3-sonnet-20240229-v1:0\",\n                \"anthropic.claude-3-haiku-20240307-v1:0\",\n                \"anthropic.claude-3-opus-20240229-v1:0\",\n                \"anthropic.claude-3-5-sonnet-20240620-v1:0\",\n                \"anthropic.claude-instant-v1\",\n                \"ai21.j2-mid-v1\",\n                \"ai21.j2-ultra-v1\",\n                \"cohere.command-text-v14\",\n                \"cohere.command-light-text-v14\",\n                \"cohere.command-r-v1:0\",\n                \"cohere.command-r-plus-v1:0\",\n                \"cohere.embed-english-v3\",\n                \"cohere.embed-multilingual-v3\",\n                \"meta.llama2-13b-chat-v1\",\n                \"meta.llama2-70b-chat-v1\",\n                \"meta.llama3-8b-instruct-v1:0\",\n                \"meta.llama3-70b-instruct-v1:0\",\n                \"mistral.mistral-7b-instruct-v0:2\",\n                \"mistral.mixtral-8x7b-instruct-v0:1\",\n                \"mistral.mistral-large-2402-v1:0\",\n                \"mistral.mistral-small-2402-v1:0\",\n                \"stability.stable-diffusion-xl-v0\",\n                \"stability.stable-diffusion-xl-v1\",\n            ],\n            value=\"anthropic.claude-3-5-sonnet-20240620-v1:0\",\n        ),\n        SecretStrInput(name=\"aws_access_key\", display_name=\"Access Key\"),\n        SecretStrInput(name=\"aws_secret_key\", display_name=\"Secret Key\"),\n        MessageTextInput(name=\"credentials_profile_name\", display_name=\"Credentials Profile Name\", advanced=True),\n        MessageTextInput(name=\"region_name\", display_name=\"Region Name\", value=\"us-east-1\"),\n        DictInput(name=\"model_kwargs\", display_name=\"Model Kwargs\", advanced=True, is_list=True),\n        MessageTextInput(name=\"endpoint_url\", display_name=\"Endpoint URL\", advanced=True),\n        HandleInput(\n            name=\"output_parser\",\n            display_name=\"Output Parser\",\n            info=\"The parser to use to parse the output of the model\",\n            advanced=True,\n            input_types=[\"OutputParser\"],\n        ),\n    ]\n\n    @langwatch.trace()\n    def build_model(self) -> LanguageModel:  # type: ignore[type-var]\n        try:\n            from langchain_aws import ChatBedrock\n        except ImportError as e:\n            msg = \"langchain_aws is not installed. Please install it with `pip install langchain_aws`.\"\n            raise ImportError(msg) from e\n        if self.aws_access_key:\n            import boto3  # type: ignore\n\n            session = boto3.Session(\n                aws_access_key_id=self.aws_access_key,\n                aws_secret_access_key=self.aws_secret_key,\n            )\n        elif self.credentials_profile_name:\n            import boto3\n\n            session = boto3.Session(profile_name=self.credentials_profile_name)\n        else:\n            import boto3\n\n            session = boto3.Session()\n\n        client_params = {}\n        if self.endpoint_url:\n            client_params[\"endpoint_url\"] = self.endpoint_url\n        if self.region_name:\n            client_params[\"region_name\"] = self.region_name\n\n        boto3_client = session.client(\"bedrock-runtime\", **client_params)\n        try:\n            langwatch.get_current_trace().update(metadata={\"user_id\": \"Keith M\", \"thread_id\": \"hkjhfi7854***\"})\n            \n            output = ChatBedrock(  # type: ignore\n                client=boto3_client,\n                model_id=self.model_id,\n                region_name=self.region_name,\n                model_kwargs=self.model_kwargs,\n                endpoint_url=self.endpoint_url,\n                streaming=self.stream,\n            )\n        except Exception as e:\n            msg = \"Could not connect to AmazonBedrock API.\"\n            raise ValueError(msg) from e\n        return output  # type: ignore\n","fileTypes":[],"file_path":"","password":false,"name":"code","advanced":true,"dynamic":true,"info":"","load_from_db":false,"title_case":false},"credentials_profile_name":{"trace_as_input":true,"trace_as_metadata":true,"load_from_db":false,"list":false,"required":false,"placeholder":"","show":true,"name":"credentials_profile_name","value":"","display_name":"Credentials Profile Name","advanced":true,"input_types":["Message"],"dynamic":false,"info":"","title_case":false,"type":"str","_input_type":"MessageTextInput"},"endpoint_url":{"trace_as_input":true,"trace_as_metadata":true,"load_from_db":false,"list":false,"required":false,"placeholder":"","show":true,"name":"endpoint_url","value":"","display_name":"Endpoint URL","advanced":true,"input_types":["Message"],"dynamic":false,"info":"","title_case":false,"type":"str","_input_type":"MessageTextInput"},"input_value":{"trace_as_input":true,"trace_as_metadata":true,"load_from_db":false,"list":false,"required":false,"placeholder":"","show":true,"name":"input_value","value":"","display_name":"Input","advanced":false,"input_types":["Message"],"dynamic":false,"info":"","title_case":false,"type":"str","_input_type":"MessageInput"},"model_id":{"trace_as_metadata":true,"options":["amazon.titan-text-express-v1","amazon.titan-text-lite-v1","amazon.titan-text-premier-v1:0","amazon.titan-embed-text-v1","amazon.titan-embed-text-v2:0","amazon.titan-embed-image-v1","amazon.titan-image-generator-v1","anthropic.claude-v2","anthropic.claude-v2:1","anthropic.claude-3-sonnet-20240229-v1:0","anthropic.claude-3-haiku-20240307-v1:0","anthropic.claude-3-opus-20240229-v1:0","anthropic.claude-3-5-sonnet-20240620-v1:0","anthropic.claude-instant-v1","ai21.j2-mid-v1","ai21.j2-ultra-v1","cohere.command-text-v14","cohere.command-light-text-v14","cohere.command-r-v1:0","cohere.command-r-plus-v1:0","cohere.embed-english-v3","cohere.embed-multilingual-v3","meta.llama2-13b-chat-v1","meta.llama2-70b-chat-v1","meta.llama3-8b-instruct-v1:0","meta.llama3-70b-instruct-v1:0","mistral.mistral-7b-instruct-v0:2","mistral.mixtral-8x7b-instruct-v0:1","mistral.mistral-large-2402-v1:0","mistral.mistral-small-2402-v1:0","stability.stable-diffusion-xl-v0","stability.stable-diffusion-xl-v1"],"combobox":false,"required":false,"placeholder":"","show":true,"name":"model_id","value":"anthropic.claude-3-5-sonnet-20240620-v1:0","display_name":"Model ID","advanced":false,"dynamic":false,"info":"","title_case":false,"type":"str","_input_type":"DropdownInput"},"model_kwargs":{"trace_as_input":true,"list":true,"required":false,"placeholder":"","show":true,"name":"model_kwargs","value":{},"display_name":"Model Kwargs","advanced":true,"dynamic":false,"info":"","title_case":false,"type":"dict","_input_type":"DictInput"},"region_name":{"trace_as_input":true,"trace_as_metadata":true,"load_from_db":false,"list":false,"required":false,"placeholder":"","show":true,"name":"region_name","value":"us-east-1","display_name":"Region Name","advanced":false,"input_types":["Message"],"dynamic":false,"info":"","title_case":false,"type":"str","_input_type":"MessageTextInput"},"stream":{"trace_as_metadata":true,"list":false,"required":false,"placeholder":"","show":true,"name":"stream","value":false,"display_name":"Stream","advanced":true,"dynamic":false,"info":"Stream the response from the model. Streaming works only in Chat.","title_case":false,"type":"bool","_input_type":"BoolInput"},"system_message":{"trace_as_input":true,"trace_as_metadata":true,"load_from_db":false,"list":false,"required":false,"placeholder":"","show":true,"name":"system_message","value":"","display_name":"System Message","advanced":true,"input_types":["Message"],"dynamic":false,"info":"System message to pass to the model.","title_case":false,"type":"str","_input_type":"MessageTextInput"}},"description":"Generate text using Amazon Bedrock LLMs.","icon":"Amazon","base_classes":["LanguageModel","Message"],"display_name":"Amazon Bedrock","documentation":"","custom_fields":{},"output_types":[],"pinned":false,"conditional_paths":[],"frozen":false,"outputs":[{"types":["Message"],"selected":"Message","name":"text_output","display_name":"Text","method":"text_response","value":"__UNDEFINED__","cache":true,"required_inputs":["input_value","stream","system_message"]},{"types":["LanguageModel"],"selected":"LanguageModel","name":"model_output","display_name":"Language Model","method":"build_model","value":"__UNDEFINED__","cache":true,"required_inputs":["aws_access_key","aws_secret_key","credentials_profile_name","endpoint_url","model_id","model_kwargs","region_name","stream"]}],"field_order":["input_value","system_message","stream","model_id","aws_access_key","aws_secret_key","credentials_profile_name","region_name","model_kwargs","endpoint_url","output_parser"],"beta":false,"edited":true,"metadata":{},"lf_version":"1.0.19","official":false},"id":"AmazonBedrockModel-BHkWn"},"selected":false,"width":384,"height":677,"positionAbsolute":{"x":1306.7928768880204,"y":1165.589665044562},"dragging":false}],"edges":[{"source":"TextInput-tfkok","sourceHandle":"{œdataTypeœ:œTextInputœ,œidœ:œTextInput-tfkokœ,œnameœ:œtextœ,œoutput_typesœ:[œMessageœ]}","target":"Prompt-rQG8O","targetHandle":"{œfieldNameœ:œmarket_typeœ,œidœ:œPrompt-rQG8Oœ,œinputTypesœ:[œMessageœ,œTextœ],œtypeœ:œstrœ}","data":{"targetHandle":{"fieldName":"market_type","id":"Prompt-rQG8O","inputTypes":["Message","Text"],"type":"str"},"sourceHandle":{"dataType":"TextInput","id":"TextInput-tfkok","name":"text","output_types":["Message"]}},"id":"reactflow__edge-TextInput-tfkok{œdataTypeœ:œTextInputœ,œidœ:œTextInput-tfkokœ,œnameœ:œtextœ,œoutput_typesœ:[œMessageœ]}-Prompt-rQG8O{œfieldNameœ:œmarket_typeœ,œidœ:œPrompt-rQG8Oœ,œinputTypesœ:[œMessageœ,œTextœ],œtypeœ:œstrœ}","className":"","animated":false},{"source":"TextInput-qSOPl","sourceHandle":"{œdataTypeœ:œTextInputœ,œidœ:œTextInput-qSOPlœ,œnameœ:œtextœ,œoutput_typesœ:[œMessageœ]}","target":"Prompt-rQG8O","targetHandle":"{œfieldNameœ:œticker_symbolœ,œidœ:œPrompt-rQG8Oœ,œinputTypesœ:[œMessageœ,œTextœ],œtypeœ:œstrœ}","data":{"targetHandle":{"fieldName":"ticker_symbol","id":"Prompt-rQG8O","inputTypes":["Message","Text"],"type":"str"},"sourceHandle":{"dataType":"TextInput","id":"TextInput-qSOPl","name":"text","output_types":["Message"]}},"id":"reactflow__edge-TextInput-qSOPl{œdataTypeœ:œTextInputœ,œidœ:œTextInput-qSOPlœ,œnameœ:œtextœ,œoutput_typesœ:[œMessageœ]}-Prompt-rQG8O{œfieldNameœ:œticker_symbolœ,œidœ:œPrompt-rQG8Oœ,œinputTypesœ:[œMessageœ,œTextœ],œtypeœ:œstrœ}","className":"","animated":false},{"source":"Prompt-rQG8O","sourceHandle":"{œdataTypeœ:œPromptœ,œidœ:œPrompt-rQG8Oœ,œnameœ:œpromptœ,œoutput_typesœ:[œMessageœ]}","target":"ToolCallingAgent-xI4TM","targetHandle":"{œfieldNameœ:œinput_valueœ,œidœ:œToolCallingAgent-xI4TMœ,œinputTypesœ:[œMessageœ],œtypeœ:œstrœ}","data":{"targetHandle":{"fieldName":"input_value","id":"ToolCallingAgent-xI4TM","inputTypes":["Message"],"type":"str"},"sourceHandle":{"dataType":"Prompt","id":"Prompt-rQG8O","name":"prompt","output_types":["Message"]}},"id":"reactflow__edge-Prompt-rQG8O{œdataTypeœ:œPromptœ,œidœ:œPrompt-rQG8Oœ,œnameœ:œpromptœ,œoutput_typesœ:[œMessageœ]}-ToolCallingAgent-xI4TM{œfieldNameœ:œinput_valueœ,œidœ:œToolCallingAgent-xI4TMœ,œinputTypesœ:[œMessageœ],œtypeœ:œstrœ}","className":"","animated":false},{"source":"WikipediaAPI-tbLCA","sourceHandle":"{œdataTypeœ:œWikipediaAPIœ,œidœ:œWikipediaAPI-tbLCAœ,œnameœ:œapi_build_toolœ,œoutput_typesœ:[œToolœ]}","target":"ToolCallingAgent-xI4TM","targetHandle":"{œfieldNameœ:œtoolsœ,œidœ:œToolCallingAgent-xI4TMœ,œinputTypesœ:[œToolœ,œBaseToolœ,œStructuredToolœ],œtypeœ:œotherœ}","data":{"targetHandle":{"fieldName":"tools","id":"ToolCallingAgent-xI4TM","inputTypes":["Tool","BaseTool","StructuredTool"],"type":"other"},"sourceHandle":{"dataType":"WikipediaAPI","id":"WikipediaAPI-tbLCA","name":"api_build_tool","output_types":["Tool"]}},"id":"reactflow__edge-WikipediaAPI-tbLCA{œdataTypeœ:œWikipediaAPIœ,œidœ:œWikipediaAPI-tbLCAœ,œnameœ:œapi_build_toolœ,œoutput_typesœ:[œToolœ]}-ToolCallingAgent-xI4TM{œfieldNameœ:œtoolsœ,œidœ:œToolCallingAgent-xI4TMœ,œinputTypesœ:[œToolœ,œBaseToolœ,œStructuredToolœ],œtypeœ:œotherœ}","className":"","animated":false},{"source":"DuckDuckGoSearch-mlFQ7","sourceHandle":"{œdataTypeœ:œDuckDuckGoSearchœ,œidœ:œDuckDuckGoSearch-mlFQ7œ,œnameœ:œapi_build_toolœ,œoutput_typesœ:[œToolœ]}","target":"ToolCallingAgent-xI4TM","targetHandle":"{œfieldNameœ:œtoolsœ,œidœ:œToolCallingAgent-xI4TMœ,œinputTypesœ:[œToolœ,œBaseToolœ,œStructuredToolœ],œtypeœ:œotherœ}","data":{"targetHandle":{"fieldName":"tools","id":"ToolCallingAgent-xI4TM","inputTypes":["Tool","BaseTool","StructuredTool"],"type":"other"},"sourceHandle":{"dataType":"DuckDuckGoSearch","id":"DuckDuckGoSearch-mlFQ7","name":"api_build_tool","output_types":["Tool"]}},"id":"reactflow__edge-DuckDuckGoSearch-mlFQ7{œdataTypeœ:œDuckDuckGoSearchœ,œidœ:œDuckDuckGoSearch-mlFQ7œ,œnameœ:œapi_build_toolœ,œoutput_typesœ:[œToolœ]}-ToolCallingAgent-xI4TM{œfieldNameœ:œtoolsœ,œidœ:œToolCallingAgent-xI4TMœ,œinputTypesœ:[œToolœ,œBaseToolœ,œStructuredToolœ],œtypeœ:œotherœ}","className":"","animated":false},{"source":"CustomComponent-zFBsV","sourceHandle":"{œdataTypeœ:œCoinMarketCapAPIœ,œidœ:œCustomComponent-zFBsVœ,œnameœ:œapi_build_toolœ,œoutput_typesœ:[œToolœ]}","target":"ToolCallingAgent-xI4TM","targetHandle":"{œfieldNameœ:œtoolsœ,œidœ:œToolCallingAgent-xI4TMœ,œinputTypesœ:[œToolœ,œBaseToolœ,œStructuredToolœ],œtypeœ:œotherœ}","data":{"targetHandle":{"fieldName":"tools","id":"ToolCallingAgent-xI4TM","inputTypes":["Tool","BaseTool","StructuredTool"],"type":"other"},"sourceHandle":{"dataType":"CoinMarketCapAPI","id":"CustomComponent-zFBsV","name":"api_build_tool","output_types":["Tool"]}},"id":"reactflow__edge-CustomComponent-zFBsV{œdataTypeœ:œCoinMarketCapAPIœ,œidœ:œCustomComponent-zFBsVœ,œnameœ:œapi_build_toolœ,œoutput_typesœ:[œToolœ]}-ToolCallingAgent-xI4TM{œfieldNameœ:œtoolsœ,œidœ:œToolCallingAgent-xI4TMœ,œinputTypesœ:[œToolœ,œBaseToolœ,œStructuredToolœ],œtypeœ:œotherœ}","className":"","animated":false},{"source":"CustomComponent-csNG0","sourceHandle":"{œdataTypeœ:œCoinGeckoAPIœ,œidœ:œCustomComponent-csNG0œ,œnameœ:œapi_build_toolœ,œoutput_typesœ:[œToolœ]}","target":"ToolCallingAgent-xI4TM","targetHandle":"{œfieldNameœ:œtoolsœ,œidœ:œToolCallingAgent-xI4TMœ,œinputTypesœ:[œToolœ,œBaseToolœ,œStructuredToolœ],œtypeœ:œotherœ}","data":{"targetHandle":{"fieldName":"tools","id":"ToolCallingAgent-xI4TM","inputTypes":["Tool","BaseTool","StructuredTool"],"type":"other"},"sourceHandle":{"dataType":"CoinGeckoAPI","id":"CustomComponent-csNG0","name":"api_build_tool","output_types":["Tool"]}},"id":"reactflow__edge-CustomComponent-csNG0{œdataTypeœ:œCoinGeckoAPIœ,œidœ:œCustomComponent-csNG0œ,œnameœ:œapi_build_toolœ,œoutput_typesœ:[œToolœ]}-ToolCallingAgent-xI4TM{œfieldNameœ:œtoolsœ,œidœ:œToolCallingAgent-xI4TMœ,œinputTypesœ:[œToolœ,œBaseToolœ,œStructuredToolœ],œtypeœ:œotherœ}","className":"","animated":false},{"source":"CustomComponent-AfNYP","sourceHandle":"{œdataTypeœ:œYahooFinanceCryptoœ,œidœ:œCustomComponent-AfNYPœ,œnameœ:œapi_build_toolœ,œoutput_typesœ:[œToolœ]}","target":"ToolCallingAgent-xI4TM","targetHandle":"{œfieldNameœ:œtoolsœ,œidœ:œToolCallingAgent-xI4TMœ,œinputTypesœ:[œToolœ,œBaseToolœ,œStructuredToolœ],œtypeœ:œotherœ}","data":{"targetHandle":{"fieldName":"tools","id":"ToolCallingAgent-xI4TM","inputTypes":["Tool","BaseTool","StructuredTool"],"type":"other"},"sourceHandle":{"dataType":"YahooFinanceCrypto","id":"CustomComponent-AfNYP","name":"api_build_tool","output_types":["Tool"]}},"id":"reactflow__edge-CustomComponent-AfNYP{œdataTypeœ:œYahooFinanceCryptoœ,œidœ:œCustomComponent-AfNYPœ,œnameœ:œapi_build_toolœ,œoutput_typesœ:[œToolœ]}-ToolCallingAgent-xI4TM{œfieldNameœ:œtoolsœ,œidœ:œToolCallingAgent-xI4TMœ,œinputTypesœ:[œToolœ,œBaseToolœ,œStructuredToolœ],œtypeœ:œotherœ}","className":"","animated":false},{"source":"CustomComponent-ueL2z","sourceHandle":"{œdataTypeœ:œNewsAPIœ,œidœ:œCustomComponent-ueL2zœ,œnameœ:œapi_build_toolœ,œoutput_typesœ:[œToolœ]}","target":"ToolCallingAgent-xI4TM","targetHandle":"{œfieldNameœ:œtoolsœ,œidœ:œToolCallingAgent-xI4TMœ,œinputTypesœ:[œToolœ,œBaseToolœ,œStructuredToolœ],œtypeœ:œotherœ}","data":{"targetHandle":{"fieldName":"tools","id":"ToolCallingAgent-xI4TM","inputTypes":["Tool","BaseTool","StructuredTool"],"type":"other"},"sourceHandle":{"dataType":"NewsAPI","id":"CustomComponent-ueL2z","name":"api_build_tool","output_types":["Tool"]}},"id":"reactflow__edge-CustomComponent-ueL2z{œdataTypeœ:œNewsAPIœ,œidœ:œCustomComponent-ueL2zœ,œnameœ:œapi_build_toolœ,œoutput_typesœ:[œToolœ]}-ToolCallingAgent-xI4TM{œfieldNameœ:œtoolsœ,œidœ:œToolCallingAgent-xI4TMœ,œinputTypesœ:[œToolœ,œBaseToolœ,œStructuredToolœ],œtypeœ:œotherœ}","className":"","animated":false},{"source":"CustomComponent-Zofge","sourceHandle":"{œdataTypeœ:œGoogleSerpAPIœ,œidœ:œCustomComponent-Zofgeœ,œnameœ:œapi_build_toolœ,œoutput_typesœ:[œToolœ]}","target":"ToolCallingAgent-xI4TM","targetHandle":"{œfieldNameœ:œtoolsœ,œidœ:œToolCallingAgent-xI4TMœ,œinputTypesœ:[œToolœ,œBaseToolœ,œStructuredToolœ],œtypeœ:œotherœ}","data":{"targetHandle":{"fieldName":"tools","id":"ToolCallingAgent-xI4TM","inputTypes":["Tool","BaseTool","StructuredTool"],"type":"other"},"sourceHandle":{"dataType":"GoogleSerpAPI","id":"CustomComponent-Zofge","name":"api_build_tool","output_types":["Tool"]}},"id":"reactflow__edge-CustomComponent-Zofge{œdataTypeœ:œGoogleSerpAPIœ,œidœ:œCustomComponent-Zofgeœ,œnameœ:œapi_build_toolœ,œoutput_typesœ:[œToolœ]}-ToolCallingAgent-xI4TM{œfieldNameœ:œtoolsœ,œidœ:œToolCallingAgent-xI4TMœ,œinputTypesœ:[œToolœ,œBaseToolœ,œStructuredToolœ],œtypeœ:œotherœ}","className":"","animated":false},{"source":"ToolCallingAgent-xI4TM","sourceHandle":"{œdataTypeœ:œToolCallingAgentœ,œidœ:œToolCallingAgent-xI4TMœ,œnameœ:œresponseœ,œoutput_typesœ:[œMessageœ]}","target":"ChatOutput-cpqrB","targetHandle":"{œfieldNameœ:œinput_valueœ,œidœ:œChatOutput-cpqrBœ,œinputTypesœ:[œMessageœ],œtypeœ:œstrœ}","data":{"targetHandle":{"fieldName":"input_value","id":"ChatOutput-cpqrB","inputTypes":["Message"],"type":"str"},"sourceHandle":{"dataType":"ToolCallingAgent","id":"ToolCallingAgent-xI4TM","name":"response","output_types":["Message"]}},"id":"reactflow__edge-ToolCallingAgent-xI4TM{œdataTypeœ:œToolCallingAgentœ,œidœ:œToolCallingAgent-xI4TMœ,œnameœ:œresponseœ,œoutput_typesœ:[œMessageœ]}-ChatOutput-cpqrB{œfieldNameœ:œinput_valueœ,œidœ:œChatOutput-cpqrBœ,œinputTypesœ:[œMessageœ],œtypeœ:œstrœ}","animated":false,"className":""},{"source":"AmazonBedrockModel-BHkWn","sourceHandle":"{œdataTypeœ:œAmazonBedrockModelœ,œidœ:œAmazonBedrockModel-BHkWnœ,œnameœ:œmodel_outputœ,œoutput_typesœ:[œLanguageModelœ]}","target":"ToolCallingAgent-xI4TM","targetHandle":"{œfieldNameœ:œllmœ,œidœ:œToolCallingAgent-xI4TMœ,œinputTypesœ:[œLanguageModelœ],œtypeœ:œotherœ}","data":{"targetHandle":{"fieldName":"llm","id":"ToolCallingAgent-xI4TM","inputTypes":["LanguageModel"],"type":"other"},"sourceHandle":{"dataType":"AmazonBedrockModel","id":"AmazonBedrockModel-BHkWn","name":"model_output","output_types":["LanguageModel"]}},"id":"reactflow__edge-AmazonBedrockModel-BHkWn{œdataTypeœ:œAmazonBedrockModelœ,œidœ:œAmazonBedrockModel-BHkWnœ,œnameœ:œmodel_outputœ,œoutput_typesœ:[œLanguageModelœ]}-ToolCallingAgent-xI4TM{œfieldNameœ:œllmœ,œidœ:œToolCallingAgent-xI4TMœ,œinputTypesœ:[œLanguageModelœ],œtypeœ:œotherœ}","animated":false,"className":""},{"source":"YahooFinanceTool-gs7jr","sourceHandle":"{œdataTypeœ:œYahooFinanceToolœ,œidœ:œYahooFinanceTool-gs7jrœ,œnameœ:œapi_build_toolœ,œoutput_typesœ:[œToolœ]}","target":"ToolCallingAgent-xI4TM","targetHandle":"{œfieldNameœ:œtoolsœ,œidœ:œToolCallingAgent-xI4TMœ,œinputTypesœ:[œToolœ,œBaseToolœ,œStructuredToolœ],œtypeœ:œotherœ}","data":{"targetHandle":{"fieldName":"tools","id":"ToolCallingAgent-xI4TM","inputTypes":["Tool","BaseTool","StructuredTool"],"type":"other"},"sourceHandle":{"dataType":"YahooFinanceTool","id":"YahooFinanceTool-gs7jr","name":"api_build_tool","output_types":["Tool"]}},"id":"reactflow__edge-YahooFinanceTool-gs7jr{œdataTypeœ:œYahooFinanceToolœ,œidœ:œYahooFinanceTool-gs7jrœ,œnameœ:œapi_build_toolœ,œoutput_typesœ:[œToolœ]}-ToolCallingAgent-xI4TM{œfieldNameœ:œtoolsœ,œidœ:œToolCallingAgent-xI4TMœ,œinputTypesœ:[œToolœ,œBaseToolœ,œStructuredToolœ],œtypeœ:œotherœ}","animated":false,"className":""}],"viewport":{"x":623.9187181396103,"y":290.3755878159411,"zoom":0.6880450060462288}},"description":"Engineered for Excellence, Built for Business.","name":"market_lag_indicator_expert","last_tested_version":"1.0.19","endpoint_name":null,"is_component":false}