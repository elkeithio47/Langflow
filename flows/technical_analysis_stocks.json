{"id":"f91d9a8d-bd77-46ee-bcdc-9281f1587035","data":{"nodes":[{"id":"ChatOutput-ciDCw","type":"genericNode","position":{"x":1886,"y":247.77083206176758},"data":{"type":"ChatOutput","node":{"template":{"_type":"Component","code":{"type":"code","required":true,"placeholder":"","list":false,"show":true,"multiline":true,"value":"from langflow.base.io.chat import ChatComponent\nfrom langflow.inputs import BoolInput\nfrom langflow.io import DropdownInput, MessageTextInput, Output\nfrom langflow.memory import store_message\nfrom langflow.schema.message import Message\nfrom langflow.utils.constants import MESSAGE_SENDER_AI, MESSAGE_SENDER_NAME_AI, MESSAGE_SENDER_USER\n\n\nclass ChatOutput(ChatComponent):\n    display_name = \"Chat Output\"\n    description = \"Display a chat message in the Playground.\"\n    icon = \"ChatOutput\"\n    name = \"ChatOutput\"\n\n    inputs = [\n        MessageTextInput(\n            name=\"input_value\",\n            display_name=\"Text\",\n            info=\"Message to be passed as output.\",\n        ),\n        BoolInput(\n            name=\"should_store_message\",\n            display_name=\"Store Messages\",\n            info=\"Store the message in the history.\",\n            value=True,\n            advanced=True,\n        ),\n        DropdownInput(\n            name=\"sender\",\n            display_name=\"Sender Type\",\n            options=[MESSAGE_SENDER_AI, MESSAGE_SENDER_USER],\n            value=MESSAGE_SENDER_AI,\n            advanced=True,\n            info=\"Type of sender.\",\n        ),\n        MessageTextInput(\n            name=\"sender_name\",\n            display_name=\"Sender Name\",\n            info=\"Name of the sender.\",\n            value=MESSAGE_SENDER_NAME_AI,\n            advanced=True,\n        ),\n        MessageTextInput(\n            name=\"session_id\",\n            display_name=\"Session ID\",\n            info=\"The session ID of the chat. If empty, the current session ID parameter will be used.\",\n            advanced=True,\n        ),\n        MessageTextInput(\n            name=\"data_template\",\n            display_name=\"Data Template\",\n            value=\"{text}\",\n            advanced=True,\n            info=\"Template to convert Data to Text. If left empty, it will be dynamically set to the Data's text key.\",\n        ),\n    ]\n    outputs = [\n        Output(display_name=\"Message\", name=\"message\", method=\"message_response\"),\n    ]\n\n    def message_response(self) -> Message:\n        message = Message(\n            text=self.input_value,\n            sender=self.sender,\n            sender_name=self.sender_name,\n            session_id=self.session_id,\n        )\n        if (\n            self.session_id\n            and isinstance(message, Message)\n            and isinstance(message.text, str)\n            and self.should_store_message\n        ):\n            store_message(\n                message,\n                flow_id=self.graph.flow_id,\n            )\n            self.message.value = message\n\n        self.status = message\n        return message\n","fileTypes":[],"file_path":"","password":false,"name":"code","advanced":true,"dynamic":true,"info":"","load_from_db":false,"title_case":false},"data_template":{"trace_as_input":true,"trace_as_metadata":true,"load_from_db":false,"list":false,"required":false,"placeholder":"","show":true,"name":"data_template","value":"{text}","display_name":"Data Template","advanced":true,"input_types":["Message"],"dynamic":false,"info":"Template to convert Data to Text. If left empty, it will be dynamically set to the Data's text key.","title_case":false,"type":"str","_input_type":"MessageTextInput"},"input_value":{"trace_as_input":true,"trace_as_metadata":true,"load_from_db":false,"list":false,"required":false,"placeholder":"","show":true,"name":"input_value","value":"","display_name":"Text","advanced":false,"input_types":["Message"],"dynamic":false,"info":"Message to be passed as output.","title_case":false,"type":"str","_input_type":"MessageTextInput"},"sender":{"trace_as_metadata":true,"options":["Machine","User"],"combobox":false,"required":false,"placeholder":"","show":true,"name":"sender","value":"Machine","display_name":"Sender Type","advanced":true,"dynamic":false,"info":"Type of sender.","title_case":false,"type":"str","_input_type":"DropdownInput"},"sender_name":{"trace_as_input":true,"trace_as_metadata":true,"load_from_db":false,"list":false,"required":false,"placeholder":"","show":true,"name":"sender_name","value":"AI","display_name":"Sender Name","advanced":true,"input_types":["Message"],"dynamic":false,"info":"Name of the sender.","title_case":false,"type":"str","_input_type":"MessageTextInput"},"session_id":{"trace_as_input":true,"trace_as_metadata":true,"load_from_db":false,"list":false,"required":false,"placeholder":"","show":true,"name":"session_id","value":"","display_name":"Session ID","advanced":true,"input_types":["Message"],"dynamic":false,"info":"The session ID of the chat. If empty, the current session ID parameter will be used.","title_case":false,"type":"str","_input_type":"MessageTextInput"},"should_store_message":{"trace_as_metadata":true,"list":false,"required":false,"placeholder":"","show":true,"name":"should_store_message","value":true,"display_name":"Store Messages","advanced":true,"dynamic":false,"info":"Store the message in the history.","title_case":false,"type":"bool","_input_type":"BoolInput"}},"description":"Display a chat message in the Playground.","icon":"ChatOutput","base_classes":["Message"],"display_name":"Chat Output","documentation":"","custom_fields":{},"output_types":[],"pinned":false,"conditional_paths":[],"frozen":false,"outputs":[{"types":["Message"],"selected":"Message","name":"message","display_name":"Message","method":"message_response","value":"__UNDEFINED__","cache":true}],"field_order":["input_value","should_store_message","sender","sender_name","session_id","data_template"],"beta":false,"edited":false,"metadata":{},"lf_version":"1.0.19"},"id":"ChatOutput-ciDCw"},"selected":false,"width":384,"height":291},{"id":"CustomComponent-XmV6b","type":"genericNode","position":{"x":602.3413929745664,"y":979.0868264557643},"data":{"type":"TechnicalAnalysis_stocks","node":{"template":{"_type":"Component","code":{"type":"code","required":true,"placeholder":"","list":false,"show":true,"multiline":true,"value":"from typing import Any, Dict, List\r\nfrom pydantic import BaseModel, Field\r\nfrom langflow.base.langchain_utilities.model import LCToolComponent\r\nfrom langflow.inputs import MessageTextInput\r\nfrom langflow.schema import Data\r\nimport yfinance as yf\r\nimport numpy as np\r\nimport json\r\nfrom datetime import datetime\r\n\r\nclass TechnicalAnalysisComponent(LCToolComponent):\r\n    display_name: str = \"Technical Analysis\"\r\n    description: str = \"Perform technical Stock market analysis using Yahoo Finance data.\"\r\n    name = \"TechnicalAnalysis_stocks\"\r\n    documentation: str = \"https://www.yfinance.com\"\r\n\r\n    # Define the inputs needed for this component\r\n    inputs = [\r\n        MessageTextInput(name=\"ticker_symbol\", display_name=\"Stock Ticker Symbol\", required=True),\r\n        MessageTextInput(name=\"market_name\", display_name=\"Market Name\", required=True)\r\n    ]\r\n\r\n    # Define the schema for the input arguments\r\n    class TechnicalAnalysisSchema(BaseModel):\r\n        ticker_symbol: str = Field(..., description=\"The stock ticker symbol (e.g., 'AAPL', 'TSLA').\")\r\n        market_name: str = Field(..., description=\"The market name (e.g., 'S&P 500').\")\r\n\r\n    # Function to perform technical analysis\r\n    def perform_technical_analysis(self, ticker_symbol: str, market_name: str) -> Dict[str, Any]:\r\n        # Fetch financial data from Yahoo Finance\r\n        ticker = yf.Ticker(ticker_symbol)\r\n        data = ticker.history(period=\"5d\", interval=\"1m\", prepost=True)\r\n\r\n        # Check if data is available\r\n        if data.empty:\r\n            return {\r\n                \"error\": f\"No data available for {ticker_symbol} in the last 5 days. Please check the symbol and try again.\"\r\n            }\r\n\r\n        try:\r\n            # Moving Averages\r\n            ma_5 = data[\"Close\"].rolling(window=5).mean().iloc[-1]\r\n            ma_20 = data[\"Close\"].rolling(window=20).mean().iloc[-1]\r\n\r\n            # RSI\r\n            rsi_value = self._calculate_rsi(data)\r\n\r\n            # Bollinger Bands\r\n            upper_band, lower_band, is_overbought = self._calculate_bollinger_bands(data)\r\n\r\n            # EMA, MACD, OBV, CMF\r\n            ema_10, ema_20, macd_signal, obv_trend, cmf_signal = self._calculate_additional_indicators(data)\r\n\r\n            # Stochastic Oscillator\r\n            stochastic_k, stochastic_d, is_bullish, is_bearish = self._calculate_stochastic_oscillator(data)\r\n\r\n            # Price and Volume\r\n            current_price = data[\"Close\"].iloc[-1]\r\n            pre_market_price = data[\"Close\"][data.index.time < datetime.now().time()].iloc[-1]\r\n            volume = data[\"Volume\"].iloc[-1]\r\n\r\n            # Generate report with dynamic recommendation scoring\r\n            report = self._generate_report(\r\n                ticker_symbol, current_price, pre_market_price, volume,\r\n                ma_5, ma_20, rsi_value, upper_band, lower_band, is_overbought, ema_10, ema_20, \r\n                macd_signal, obv_trend, cmf_signal, stochastic_k, stochastic_d, is_bullish, is_bearish\r\n            )\r\n\r\n        except IndexError:\r\n            return {\r\n                \"error\": f\"Not enough data for {ticker_symbol} to calculate all technical indicators. Please try a different period.\"\r\n            }\r\n\r\n        return report\r\n\r\n    # Calculation methods for technical indicators\r\n    def _calculate_rsi(self, data):\r\n        delta = data['Close'].diff(1)\r\n        gain = delta.where(delta > 0, 0)\r\n        loss = -delta.where(delta < 0, 0)\r\n        avg_gain = gain.rolling(window=14).mean()\r\n        avg_loss = loss.rolling(window=14).mean()\r\n        rs = avg_gain / avg_loss\r\n        rsi = 100 - (100 / (1 + rs))\r\n        return rsi.iloc[-1] if not rsi.empty else 0\r\n\r\n    def _calculate_bollinger_bands(self, data):\r\n        ma_20 = data[\"Close\"].rolling(window=20).mean()\r\n        stddev = data[\"Close\"].rolling(window=20).std()\r\n        upper_band = ma_20 + (2 * stddev)\r\n        lower_band = ma_20 - (2 * stddev)\r\n        current_price = data[\"Close\"].iloc[-1]\r\n        is_overbought = current_price > upper_band.iloc[-1]\r\n        return upper_band.iloc[-1], lower_band.iloc[-1], is_overbought\r\n\r\n    def _calculate_additional_indicators(self, data):\r\n        ema_10 = data['Close'].ewm(span=10, adjust=False).mean()\r\n        ema_20 = data['Close'].ewm(span=20, adjust=False).mean()\r\n        macd_line = ema_10 - ema_20\r\n        signal_line = macd_line.ewm(span=9, adjust=False).mean()\r\n        macd_signal = (macd_line.iloc[-1] > signal_line.iloc[-1])  # Fix ambiguous Series comparison\r\n        obv = (np.sign(data['Close'].diff()) * data['Volume']).fillna(0).cumsum()\r\n        obv_trend = (obv.iloc[-1] > obv.iloc[-2])  # Fix ambiguous Series comparison\r\n        cmf = (2 * data['Close'] - data['Low'] - data['High']) / (data['High'] - data['Low']) * data['Volume']\r\n        cmf_signal = cmf.rolling(window=20).sum().iloc[-1] / data['Volume'].rolling(window=20).sum().iloc[-1] > 0\r\n        return ema_10.iloc[-1], ema_20.iloc[-1], macd_signal, obv_trend, cmf_signal\r\n\r\n    def _calculate_stochastic_oscillator(self, data):\r\n        lookback_period = 14\r\n        lowest_low = data['Low'].rolling(window=lookback_period).min()\r\n        highest_high = data['High'].rolling(window=lookback_period).max()\r\n        stochastic_k = 100 * ((data['Close'] - lowest_low) / (highest_high - lowest_low))\r\n        stochastic_d = stochastic_k.rolling(window=3).mean()\r\n        current_k = stochastic_k.iloc[-1]\r\n        current_d = stochastic_d.iloc[-1]\r\n        is_bullish = current_k < 20 and current_k > current_d\r\n        is_bearish = current_k > 80 and current_k < current_d\r\n        return current_k, current_d, is_bullish, is_bearish\r\n\r\n    # Report generation\r\n    def _generate_report(self, ticker_symbol, last_price, pre_market_price, volume, \r\n                         ma_5, ma_20, rsi_value, upper_band, lower_band, is_overbought, ema_10, ema_20, \r\n                         macd_signal, obv_trend, cmf_signal, stochastic_k, stochastic_d, is_bullish, is_bearish):\r\n\r\n        # Calculate scores based on technical indicators\r\n        score_24h, score_48h = 0, 0\r\n        if rsi_value < 30:\r\n            score_24h += 2\r\n            score_48h += 1\r\n        elif rsi_value > 70:\r\n            score_24h -= 2\r\n            score_48h -= 1\r\n\r\n        if pre_market_price > last_price:\r\n            score_24h += 2\r\n        else:\r\n            score_24h -= 2\r\n\r\n        if ema_10 > ema_20 and macd_signal:  # Fix ambiguous Series comparison\r\n            score_24h += 2\r\n            score_48h += 1\r\n\r\n        if obv_trend and cmf_signal:  # Fix ambiguous Series comparison\r\n            score_24h += 1\r\n            score_48h += 1\r\n\r\n        if is_bullish:\r\n            score_24h += 1\r\n        elif is_bearish:\r\n            score_24h -= 1\r\n\r\n        final_score_24h = score_24h\r\n        final_score_48h = score_48h\r\n\r\n        report = {\r\n            \"Current Price\": f\"${round(last_price, 2)}\",\r\n            \"Pre-Market Price\": f\"${round(pre_market_price, 2)}\",\r\n            \"Volume\": f\"{volume} shares\",\r\n            \"5-Day Moving Average\": f\"${round(ma_5, 2)}\",\r\n            \"20-Day Moving Average\": f\"${round(ma_20, 2)}\",\r\n            \"RSI\": f\"{round(rsi_value, 2)}\",\r\n            \"Bollinger Bands\": {\r\n                \"Upper Band\": f\"${round(upper_band, 2)}\",\r\n                \"Lower Band\": f\"${round(lower_band, 2)}\",\r\n                \"Summary\": \"Overbought\" if is_overbought else \"Normal\"\r\n            },\r\n            \"Stochastic Oscillator\": {\r\n                \"%K\": f\"{round(stochastic_k, 2)}\",\r\n                \"%D\": f\"{round(stochastic_d, 2)}\",\r\n                \"Signal\": \"Bullish\" if is_bullish else \"Bearish\" if is_bearish else \"Neutral\"\r\n            },\r\n            \"Combined Indicators\": {\r\n                \"EMA 10\": f\"${round(ema_10, 2)}\",\r\n                \"EMA 20\": f\"${round(ema_20, 2)}\",\r\n                \"MACD Signal\": \"Bullish\" if macd_signal else \"Neutral\",\r\n                \"OBV Trend\": \"Positive\" if obv_trend else \"Negative\",\r\n                \"CMF Signal\": \"Buying Pressure\" if cmf_signal else \"Selling Pressure\"\r\n            }\r\n        }\r\n\r\n        return report\r\n\r\n    # Tool builder function\r\n    def build_tool(self) -> Tool:\r\n        def get_technical_analysis(ticker_symbol: str, market_name: str) -> Dict[str, Any]:\r\n            return self.perform_technical_analysis(ticker_symbol=ticker_symbol, market_name=market_name)\r\n\r\n        tool = StructuredTool.from_function(\r\n            name=\"technical_analysis_tool\",\r\n            description=\"Perform technical analysis on a stock ticker symbol\",\r\n            func=get_technical_analysis,\r\n            args_schema=self.TechnicalAnalysisSchema,\r\n        )\r\n\r\n        self.status = \"Technical Analysis Tool created successfully.\"\r\n        return tool\r\n\r\n    # Run model function with an explicit return type\r\n    def run_model(self) -> List[Data]:\r\n        tool = self.build_tool()\r\n\r\n        # Fetch the technical analysis report based on user inputs\r\n        results = tool.run(\r\n            {\r\n                \"ticker_symbol\": self.ticker_symbol,\r\n                \"market_name\": self.market_name\r\n            }\r\n        )\r\n\r\n        # Format the results for output\r\n        if \"error\" in results:\r\n            formatted_result = Data(data=results, text=results[\"error\"])\r\n        else:\r\n            formatted_result = Data(data=results, text=f\"Technical Analysis Report: {results}\")\r\n\r\n        self.status = [formatted_result]\r\n        return [formatted_result]  # Explicitly return a list of Data objects\r\n","fileTypes":[],"file_path":"","password":false,"name":"code","advanced":true,"dynamic":true,"info":"","load_from_db":false,"title_case":false},"market_name":{"trace_as_input":true,"trace_as_metadata":true,"load_from_db":false,"list":false,"required":true,"placeholder":"","show":true,"name":"market_name","value":"S&P 500","display_name":"Market Name","advanced":false,"input_types":["Message"],"dynamic":false,"info":"","title_case":false,"type":"str","_input_type":"MessageTextInput"},"ticker_symbol":{"trace_as_input":true,"trace_as_metadata":true,"load_from_db":false,"list":false,"required":true,"placeholder":"","show":true,"name":"ticker_symbol","value":"TELSA","display_name":"Stock Ticker Symbol","advanced":false,"input_types":["Message"],"dynamic":false,"info":"","title_case":false,"type":"str","_input_type":"MessageTextInput"}},"description":"Perform technical Stock market analysis using Yahoo Finance data.","base_classes":["Data","Tool"],"display_name":"Technical Analysis Stock Market Tool","documentation":"https://www.yfinance.com","custom_fields":{},"output_types":[],"pinned":false,"conditional_paths":[],"frozen":false,"outputs":[{"types":["Data"],"selected":"Data","name":"api_run_model","display_name":"Data","method":"run_model","value":"__UNDEFINED__","cache":true,"required_inputs":["market_name","ticker_symbol"]},{"types":["Tool"],"selected":"Tool","name":"api_build_tool","display_name":"Tool","method":"build_tool","value":"__UNDEFINED__","cache":true,"required_inputs":["market_name","ticker_symbol"]}],"field_order":["ticker_symbol","market_name"],"beta":false,"edited":true,"metadata":{},"lf_version":"1.0.19"},"id":"CustomComponent-XmV6b"},"selected":true,"width":384,"height":433,"dragging":false,"positionAbsolute":{"x":602.3413929745664,"y":979.0868264557643}},{"id":"ToolCallingAgent-4YjHu","type":"genericNode","position":{"x":1264.3672308492846,"y":245.5599090115291},"data":{"type":"ToolCallingAgent","node":{"template":{"_type":"Component","chat_history":{"trace_as_metadata":true,"list":true,"trace_as_input":true,"required":false,"placeholder":"","show":true,"name":"chat_history","value":"","display_name":"Chat History","advanced":true,"input_types":["Data"],"dynamic":false,"info":"","title_case":false,"type":"other","_input_type":"DataInput"},"llm":{"trace_as_metadata":true,"list":false,"required":true,"placeholder":"","show":true,"name":"llm","value":"","display_name":"Language Model","advanced":false,"input_types":["LanguageModel"],"dynamic":false,"info":"","title_case":false,"type":"other","_input_type":"HandleInput"},"tools":{"trace_as_metadata":true,"list":true,"required":false,"placeholder":"","show":true,"name":"tools","value":"","display_name":"Tools","advanced":false,"input_types":["Tool","BaseTool"],"dynamic":false,"info":"","title_case":false,"type":"other","_input_type":"HandleInput"},"code":{"type":"code","required":true,"placeholder":"","list":false,"show":true,"multiline":true,"value":"from langchain.agents import create_tool_calling_agent\nfrom langchain_core.prompts import ChatPromptTemplate, HumanMessagePromptTemplate, PromptTemplate\n\nfrom langflow.base.agents.agent import LCToolsAgentComponent\nfrom langflow.inputs import MultilineInput\nfrom langflow.inputs.inputs import DataInput, HandleInput\nfrom langflow.schema import Data\n\n\nclass ToolCallingAgentComponent(LCToolsAgentComponent):\n    display_name: str = \"Tool Calling Agent\"\n    description: str = \"Agent that uses tools\"\n    icon = \"LangChain\"\n    beta = True\n    name = \"ToolCallingAgent\"\n\n    inputs = [\n        *LCToolsAgentComponent._base_inputs,\n        HandleInput(name=\"llm\", display_name=\"Language Model\", input_types=[\"LanguageModel\"], required=True),\n        MultilineInput(\n            name=\"system_prompt\",\n            display_name=\"System Prompt\",\n            info=\"System prompt for the agent.\",\n            value=\"You are a helpful assistant\",\n        ),\n        MultilineInput(\n            name=\"user_prompt\", display_name=\"Prompt\", info=\"This prompt must contain 'input' key.\", value=\"{input}\"\n        ),\n        DataInput(name=\"chat_history\", display_name=\"Chat History\", is_list=True, advanced=True),\n    ]\n\n    def get_chat_history_data(self) -> list[Data] | None:\n        return self.chat_history\n\n    def create_agent_runnable(self):\n        if \"input\" not in self.user_prompt:\n            msg = \"Prompt must contain 'input' key.\"\n            raise ValueError(msg)\n        messages = [\n            (\"system\", self.system_prompt),\n            (\"placeholder\", \"{chat_history}\"),\n            HumanMessagePromptTemplate(prompt=PromptTemplate(input_variables=[\"input\"], template=self.user_prompt)),\n            (\"placeholder\", \"{agent_scratchpad}\"),\n        ]\n        prompt = ChatPromptTemplate.from_messages(messages)\n        return create_tool_calling_agent(self.llm, self.tools, prompt)\n","fileTypes":[],"file_path":"","password":false,"name":"code","advanced":true,"dynamic":true,"info":"","load_from_db":false,"title_case":false},"handle_parsing_errors":{"trace_as_metadata":true,"list":false,"required":false,"placeholder":"","show":true,"name":"handle_parsing_errors","value":true,"display_name":"Handle Parse Errors","advanced":true,"dynamic":false,"info":"","title_case":false,"type":"bool","_input_type":"BoolInput"},"input_value":{"trace_as_input":true,"trace_as_metadata":true,"load_from_db":false,"list":false,"required":false,"placeholder":"","show":true,"name":"input_value","value":"","display_name":"Input","advanced":false,"input_types":["Message"],"dynamic":false,"info":"","title_case":false,"type":"str","_input_type":"MessageTextInput"},"max_iterations":{"trace_as_metadata":true,"list":false,"required":false,"placeholder":"","show":true,"name":"max_iterations","value":15,"display_name":"Max Iterations","advanced":true,"dynamic":false,"info":"","title_case":false,"type":"int","_input_type":"IntInput"},"system_prompt":{"trace_as_input":true,"multiline":true,"trace_as_metadata":true,"load_from_db":false,"list":false,"required":false,"placeholder":"","show":true,"name":"system_prompt","value":"You are a helpful assistant","display_name":"System Prompt","advanced":false,"input_types":["Message"],"dynamic":false,"info":"System prompt for the agent.","title_case":false,"type":"str","_input_type":"MultilineInput"},"user_prompt":{"trace_as_input":true,"multiline":true,"trace_as_metadata":true,"load_from_db":false,"list":false,"required":false,"placeholder":"","show":true,"name":"user_prompt","value":"{input}","display_name":"Prompt","advanced":false,"input_types":["Message"],"dynamic":false,"info":"This prompt must contain 'input' key.","title_case":false,"type":"str","_input_type":"MultilineInput"},"verbose":{"trace_as_metadata":true,"list":false,"required":false,"placeholder":"","show":true,"name":"verbose","value":true,"display_name":"Verbose","advanced":true,"dynamic":false,"info":"","title_case":false,"type":"bool","_input_type":"BoolInput"}},"description":"Agent that uses tools","icon":"LangChain","base_classes":["AgentExecutor","Message"],"display_name":"Tool Calling Agent","documentation":"","custom_fields":{},"output_types":[],"pinned":false,"conditional_paths":[],"frozen":false,"outputs":[{"types":["AgentExecutor"],"selected":"AgentExecutor","name":"agent","display_name":"Agent","method":"build_agent","value":"__UNDEFINED__","cache":true,"required_inputs":["tools"]},{"types":["Message"],"selected":"Message","name":"response","display_name":"Response","method":"message_response","value":"__UNDEFINED__","cache":true,"required_inputs":[]}],"field_order":["input_value","handle_parsing_errors","verbose","max_iterations","tools","llm","system_prompt","user_prompt","chat_history"],"beta":true,"edited":false,"metadata":{},"lf_version":"1.0.19"},"id":"ToolCallingAgent-4YjHu"},"selected":false,"width":384,"height":600,"positionAbsolute":{"x":1264.3672308492846,"y":245.5599090115291},"dragging":false},{"id":"Prompt-ByZ5b","type":"genericNode","position":{"x":616.6740822272691,"y":239.93781223811436},"data":{"type":"Prompt","node":{"template":{"_type":"Component","code":{"type":"code","required":true,"placeholder":"","list":false,"show":true,"multiline":true,"value":"from langflow.base.prompts.api_utils import process_prompt_template\nfrom langflow.custom import Component\nfrom langflow.inputs.inputs import DefaultPromptField\nfrom langflow.io import Output, PromptInput\nfrom langflow.schema.message import Message\nfrom langflow.template.utils import update_template_values\n\n\nclass PromptComponent(Component):\n    display_name: str = \"Prompt\"\n    description: str = \"Create a prompt template with dynamic variables.\"\n    icon = \"prompts\"\n    trace_type = \"prompt\"\n    name = \"Prompt\"\n\n    inputs = [\n        PromptInput(name=\"template\", display_name=\"Template\"),\n    ]\n\n    outputs = [\n        Output(display_name=\"Prompt Message\", name=\"prompt\", method=\"build_prompt\"),\n    ]\n\n    async def build_prompt(\n        self,\n    ) -> Message:\n        prompt = await Message.from_template_and_variables(**self._attributes)\n        self.status = prompt.text\n        return prompt\n\n    def _update_template(self, frontend_node: dict):\n        prompt_template = frontend_node[\"template\"][\"template\"][\"value\"]\n        custom_fields = frontend_node[\"custom_fields\"]\n        frontend_node_template = frontend_node[\"template\"]\n        _ = process_prompt_template(\n            template=prompt_template,\n            name=\"template\",\n            custom_fields=custom_fields,\n            frontend_node_template=frontend_node_template,\n        )\n        return frontend_node\n\n    def post_code_processing(self, new_frontend_node: dict, current_frontend_node: dict):\n        \"\"\"This function is called after the code validation is done.\"\"\"\n        frontend_node = super().post_code_processing(new_frontend_node, current_frontend_node)\n        template = frontend_node[\"template\"][\"template\"][\"value\"]\n        # Kept it duplicated for backwards compatibility\n        _ = process_prompt_template(\n            template=template,\n            name=\"template\",\n            custom_fields=frontend_node[\"custom_fields\"],\n            frontend_node_template=frontend_node[\"template\"],\n        )\n        # Now that template is updated, we need to grab any values that were set in the current_frontend_node\n        # and update the frontend_node with those values\n        update_template_values(new_template=frontend_node, previous_template=current_frontend_node[\"template\"])\n        return frontend_node\n\n    def _get_fallback_input(self, **kwargs):\n        return DefaultPromptField(**kwargs)\n","fileTypes":[],"file_path":"","password":false,"name":"code","advanced":true,"dynamic":true,"info":"","load_from_db":false,"title_case":false},"template":{"trace_as_input":true,"list":false,"required":false,"placeholder":"","show":true,"name":"template","value":"You are tasked with generating a stock market technical analysis report in JSON format for a given company. Follow these instructions carefully to produce an accurate and comprehensive report:\n\n1. You will be provided with the following input variables:\n   <company_name>{input}</company_name>\n   <ticker_symbol>{ticker_symbol}</ticker_symbol>\n   <market_name>{market_name}</market_name>\n\n2. Generate a JSON report with the following structure and content:\n\n<json_report>\n\\x7B\n  \"Summary\": \\x7B\n    \"Company Name\": \"\\x7Bcompany_name\\x7D\",\n    \"Ticker Symbol\": \"\\x7Bticker_symbol\\x7D\",\n    \"Market Name\": \"\\x7Bmarket_name\\x7D\",\n    \"Timestamp\": \"\",\n    \"Action Recommendation (Next 24 Hours)\": \"\",\n    \"Action Recommendation (Next 48 Hours)\": \"\",\n    \"Overall Trend\": \"\"\n  \\x7D,\n  \"Price and Volume\": \\x7B\n    \"Current Price\": \"\",\n    \"Pre-Market Price\": \"\",\n    \"Volume\": \"\"\n  \\x7D,\n  \"Technical Indicators\": \\x7B\n    \"5-Day Moving Average\": \"\",\n    \"20-Day Moving Average\": \"\",\n    \"Moving Average Signal\": \"\",\n    \"RSI\": \"\",\n    \"Bollinger Bands Summary\": \"\"\n  \\x7D,\n  \"Stochastic Oscillator\": \\x7B\n    \"%K\": 0,\n    \"%D\": 0,\n    \"Signal\": \"\"\n  \\x7D,\n  \"Combined Indicators\": \\x7B\n    \"EMA 10\": \"\",\n    \"EMA 20\": \"\",\n    \"EMA Crossover Signal\": \"\",\n    \"MACD Signal\": \"\",\n    \"OBV Trend\": \"\",\n    \"Chaikin Money Flow\": \"\"\n  \\x7D\n   \"Sentiment Analysis\":  \\x7B\n        \"Overall Sentiment Score\":,\n        \"Sentiment Classification\": \"\"\n   \\x7D\n\\x7D\n</json_report>\n\n4. Available Tools:\n   - Technical Analysis Stock Market Tool\n   - Google Serper Tool\n   - News Tool\n   - DuckDuckGo Internet Search Tool\n  -  Sentiment Analysis Tool\n  - Wikipedia Tool\n\n3. For each field in the JSON structure, provide realistic and properly formatted values based on your analysis. Ensure that:\n   - All price values are formatted with dollar signs (e.g., $123.45)\n   - Percentages are formatted with one decimal place (e.g., 54.2%)\n   - The timestamp is in UTC format ('YYYY-MM-DD HH:MM:SS') and labeled as \"UTC\"\n\n4. When making recommendations or determining signals:\n   - Use the provided technical indicators and their interpretations\n   - Consider the relationships between different indicators\n   - Provide clear \"Hold\", \"Buy\", or \"Sell\" recommendations for the next 24 and 48 hours\n   - Describe the overall trend as \"Uptrend\", \"Downtrend\", or \"Sideways\"\n\n5. Use the following guidelines for technical indicators:\n   - Moving Averages: Compare 5-day and 20-day MAs for bullish or bearish signals\n   - RSI: Interpret values above 70 as overbought and below 30 as oversold\n   - Stochastic Oscillator: Use %K and %D values to determine bullish, bearish, or neutral signals\n   - MACD: Analyze the relationship between MACD line and signal line for bullish or bearish signals\n   - Bollinger Bands: Summarize as \"Overbought\" or \"Oversold\" based on current price position\n   - On-Balance Volume (OBV): Determine positive or negative trends\n   - Chaikin Money Flow: Indicate buying or selling pressure\n   - RSI: Use RSI as the primary lag indicator for overbought/oversold conditions\n\n6. When making recommendations Sentiment Analysis recommendations or determining signals:\n   - Convert sentiment classification to a score (positive=1, negative=-1, neutral=0)\n   - Use Weighting factors for technical indicators and sentiment(Technical Indicator\tweight=80%, sentiment Indicator weight=20%)\n   - Calculate sentiment strength as a weighted score\n\n7. Ensure that your final output is valid JSON format. Double-check that all required fields are filled with realistic values and that the structure matches the provided template.\n\nBegin your analysis now and provide the completed JSON report as your final output.","display_name":"Template","advanced":false,"dynamic":false,"info":"","title_case":false,"type":"prompt","_input_type":"PromptInput"},"ticker_symbol":{"field_type":"str","required":false,"placeholder":"","list":false,"show":true,"multiline":true,"value":"","fileTypes":[],"file_path":"","name":"ticker_symbol","display_name":"ticker_symbol","advanced":false,"input_types":["Message","Text"],"dynamic":false,"info":"","load_from_db":false,"title_case":false,"type":"str"},"market_name":{"field_type":"str","required":false,"placeholder":"","list":false,"show":true,"multiline":true,"value":"","fileTypes":[],"file_path":"","name":"market_name","display_name":"market_name","advanced":false,"input_types":["Message","Text"],"dynamic":false,"info":"","load_from_db":false,"title_case":false,"type":"str"},"input":{"field_type":"str","required":false,"placeholder":"","list":false,"show":true,"multiline":true,"value":"","fileTypes":[],"file_path":"","name":"input","display_name":"input","advanced":false,"input_types":["Message","Text"],"dynamic":false,"info":"","load_from_db":false,"title_case":false,"type":"str"}},"description":"Create a prompt template with dynamic variables.","icon":"prompts","is_input":null,"is_output":null,"is_composition":null,"base_classes":["Message"],"name":"","display_name":"Prompt","documentation":"","custom_fields":{"template":["input","ticker_symbol","market_name"]},"output_types":[],"full_path":null,"pinned":false,"conditional_paths":[],"frozen":false,"outputs":[{"types":["Message"],"selected":"Message","name":"prompt","hidden":null,"display_name":"Prompt Message","method":"build_prompt","value":"__UNDEFINED__","cache":true,"required_inputs":null}],"field_order":["template"],"beta":false,"error":null,"edited":false,"metadata":{},"lf_version":"1.0.19"},"id":"Prompt-ByZ5b"},"selected":false,"width":384,"height":567,"positionAbsolute":{"x":616.6740822272691,"y":239.93781223811436},"dragging":false},{"id":"TextInput-truHA","type":"genericNode","position":{"x":45.758284030544246,"y":193.35288757760497},"data":{"type":"TextInput","node":{"template":{"_type":"Component","code":{"type":"code","required":true,"placeholder":"","list":false,"show":true,"multiline":true,"value":"from langflow.base.io.text import TextComponent\nfrom langflow.io import MultilineInput, Output\nfrom langflow.schema.message import Message\n\n\nclass TextInputComponent(TextComponent):\n    display_name = \"Text Input\"\n    description = \"Get text inputs from the Playground.\"\n    icon = \"type\"\n    name = \"TextInput\"\n\n    inputs = [\n        MultilineInput(\n            name=\"input_value\",\n            display_name=\"Text\",\n            info=\"Text to be passed as input.\",\n        ),\n    ]\n    outputs = [\n        Output(display_name=\"Text\", name=\"text\", method=\"text_response\"),\n    ]\n\n    def text_response(self) -> Message:\n        return Message(\n            text=self.input_value,\n        )\n","fileTypes":[],"file_path":"","password":false,"name":"code","advanced":true,"dynamic":true,"info":"","load_from_db":false,"title_case":false},"input_value":{"trace_as_input":true,"multiline":true,"trace_as_metadata":true,"load_from_db":false,"list":false,"required":false,"placeholder":"","show":true,"name":"input_value","value":"TESLA","display_name":"Text","advanced":false,"input_types":["Message"],"dynamic":false,"info":"Text to be passed as input.","title_case":false,"type":"str","_input_type":"MultilineInput"}},"description":"Get text inputs from the Playground.","icon":"type","base_classes":["Message"],"display_name":"Text Input","documentation":"","custom_fields":{},"output_types":[],"pinned":false,"conditional_paths":[],"frozen":false,"outputs":[{"types":["Message"],"selected":"Message","name":"text","display_name":"Text","method":"text_response","value":"__UNDEFINED__","cache":true}],"field_order":["input_value"],"beta":false,"edited":false,"metadata":{},"lf_version":"1.0.19"},"id":"TextInput-truHA"},"selected":false,"width":384,"height":291,"positionAbsolute":{"x":45.758284030544246,"y":193.35288757760497},"dragging":false},{"id":"TextInput-ZZBQ3","type":"genericNode","position":{"x":53.59817181584788,"y":488.2873247706027},"data":{"type":"TextInput","node":{"template":{"_type":"Component","code":{"type":"code","required":true,"placeholder":"","list":false,"show":true,"multiline":true,"value":"from langflow.base.io.text import TextComponent\nfrom langflow.io import MultilineInput, Output\nfrom langflow.schema.message import Message\n\n\nclass TextInputComponent(TextComponent):\n    display_name = \"Text Input\"\n    description = \"Get text inputs from the Playground.\"\n    icon = \"type\"\n    name = \"TextInput\"\n\n    inputs = [\n        MultilineInput(\n            name=\"input_value\",\n            display_name=\"Text\",\n            info=\"Text to be passed as input.\",\n        ),\n    ]\n    outputs = [\n        Output(display_name=\"Text\", name=\"text\", method=\"text_response\"),\n    ]\n\n    def text_response(self) -> Message:\n        return Message(\n            text=self.input_value,\n        )\n","fileTypes":[],"file_path":"","password":false,"name":"code","advanced":true,"dynamic":true,"info":"","load_from_db":false,"title_case":false},"input_value":{"trace_as_input":true,"multiline":true,"trace_as_metadata":true,"load_from_db":false,"list":false,"required":false,"placeholder":"","show":true,"name":"input_value","value":"S&P 500","display_name":"Text","advanced":false,"input_types":["Message"],"dynamic":false,"info":"Text to be passed as input.","title_case":false,"type":"str","_input_type":"MultilineInput"}},"description":"Get text inputs from the Playground.","icon":"type","base_classes":["Message"],"display_name":"Text Input","documentation":"","custom_fields":{},"output_types":[],"pinned":false,"conditional_paths":[],"frozen":false,"outputs":[{"types":["Message"],"selected":"Message","name":"text","display_name":"Text","method":"text_response","value":"__UNDEFINED__","cache":true}],"field_order":["input_value"],"beta":false,"edited":false,"metadata":{},"lf_version":"1.0.19"},"id":"TextInput-ZZBQ3"},"selected":false,"width":384,"height":291,"positionAbsolute":{"x":53.59817181584788,"y":488.2873247706027},"dragging":false},{"id":"TextInput-3BKfI","type":"genericNode","position":{"x":30.4418640168019,"y":861.6827880302202},"data":{"type":"TextInput","node":{"template":{"_type":"Component","code":{"type":"code","required":true,"placeholder":"","list":false,"show":true,"multiline":true,"value":"from langflow.base.io.text import TextComponent\nfrom langflow.io import MultilineInput, Output\nfrom langflow.schema.message import Message\n\n\nclass TextInputComponent(TextComponent):\n    display_name = \"Text Input\"\n    description = \"Get text inputs from the Playground.\"\n    icon = \"type\"\n    name = \"TextInput\"\n\n    inputs = [\n        MultilineInput(\n            name=\"input_value\",\n            display_name=\"Text\",\n            info=\"Text to be passed as input.\",\n        ),\n    ]\n    outputs = [\n        Output(display_name=\"Text\", name=\"text\", method=\"text_response\"),\n    ]\n\n    def text_response(self) -> Message:\n        return Message(\n            text=self.input_value,\n        )\n","fileTypes":[],"file_path":"","password":false,"name":"code","advanced":true,"dynamic":true,"info":"","load_from_db":false,"title_case":false},"input_value":{"trace_as_input":true,"multiline":true,"trace_as_metadata":true,"load_from_db":false,"list":false,"required":false,"placeholder":"","show":true,"name":"input_value","value":"TSLA","display_name":"Text","advanced":false,"input_types":["Message"],"dynamic":false,"info":"Text to be passed as input.","title_case":false,"type":"str","_input_type":"MultilineInput"}},"description":"Get text inputs from the Playground.","icon":"type","base_classes":["Message"],"display_name":"Text Input","documentation":"","custom_fields":{},"output_types":[],"pinned":false,"conditional_paths":[],"frozen":false,"outputs":[{"types":["Message"],"selected":"Message","name":"text","display_name":"Text","method":"text_response","value":"__UNDEFINED__","cache":true}],"field_order":["input_value"],"beta":false,"edited":false,"metadata":{},"lf_version":"1.0.19"},"id":"TextInput-3BKfI"},"selected":false,"width":384,"height":291,"positionAbsolute":{"x":30.4418640168019,"y":861.6827880302202},"dragging":false},{"id":"DuckDuckGoSearch-4IgeD","type":"genericNode","position":{"x":-1246.2164982915199,"y":1377.747134627721},"data":{"type":"DuckDuckGoSearch","node":{"template":{"_type":"Component","code":{"type":"code","required":true,"placeholder":"","list":false,"show":true,"multiline":true,"value":"from typing import Any, List\r\nfrom langchain.tools import StructuredTool\r\nfrom langchain_community.tools import DuckDuckGoSearchRun\r\nfrom pydantic import BaseModel, Field\r\nfrom langflow.base.langchain_utilities.model import LCToolComponent\r\nfrom langflow.field_typing import Tool\r\nfrom langflow.inputs import IntInput, MessageTextInput\r\nfrom langflow.schema import Data\r\nimport requests\r\n\r\n\r\nclass DuckDuckGoSearchComponent(LCToolComponent):\r\n    display_name: str = \"DuckDuckGo Search\"\r\n    description: str = \"Perform web searches using the DuckDuckGo search engine with result limiting\"\r\n    name = \"DuckDuckGoSearch\"\r\n    documentation: str = \"https://python.langchain.com/docs/integrations/tools/ddg\"\r\n    icon: str = \"DuckDuckGo\"\r\n    inputs = [\r\n        MessageTextInput(\r\n            name=\"input_value\",\r\n            display_name=\"Search Query\",\r\n            required=True,\r\n        ),\r\n        IntInput(name=\"max_results\", display_name=\"Max Results\", value=5, advanced=True),\r\n        IntInput(name=\"max_snippet_length\", display_name=\"Max Snippet Length\", value=100, advanced=True),\r\n    ]\r\n\r\n    class DuckDuckGoSearchSchema(BaseModel):\r\n        query: str = Field(..., description=\"The search query\")\r\n        max_results: int = Field(5, description=\"Maximum number of results to return\")\r\n        max_snippet_length: int = Field(100, description=\"Maximum length of each result snippet\")\r\n\r\n    def _build_wrapper(self):\r\n        return DuckDuckGoSearchRun()\r\n\r\n    def build_tool(self) -> Tool:\r\n        wrapper = self._build_wrapper()\r\n\r\n        def search_func(query: str, max_results: int = 5, max_snippet_length: int = 100) -> List[dict[str, Any]]:\r\n            try:\r\n                full_results = wrapper.run(f\"{query} (site:*)\")\r\n            except requests.exceptions.HTTPError as e:\r\n                if e.response.status_code == 429:\r\n                    # Handle rate limit issue\r\n                    print(f\"Rate limit reached: {e}\")\r\n                    return [{\"snippet\": \"Rate limit exceeded. Please try again later.\"}]\r\n                else:\r\n                    # Handle other possible HTTP errors\r\n                    print(f\"HTTP Error: {e}\")\r\n                    return [{\"snippet\": \"An error occurred while performing the search.\"}]\r\n            except Exception as e:\r\n                # Handle any other exception\r\n                print(f\"Unexpected error: {e}\")\r\n                return [{\"snippet\": \"An unexpected error occurred.\"}]\r\n\r\n            # Process results\r\n            result_list = full_results.split(\"\\n\")[:max_results]\r\n            limited_results = []\r\n            for result in result_list:\r\n                limited_result = {\r\n                    \"snippet\": result[:max_snippet_length],\r\n                }\r\n                limited_results.append(limited_result)\r\n            return limited_results\r\n\r\n        tool = StructuredTool.from_function(\r\n            name=\"duckduckgo_search\",\r\n            description=\"Search for recent results using DuckDuckGo with result limiting\",\r\n            func=search_func,\r\n            args_schema=self.DuckDuckGoSearchSchema,\r\n        )\r\n        self.status = \"DuckDuckGo Search Tool created\"\r\n        return tool\r\n\r\n    def run_model(self) -> list[Data]:\r\n        tool = self.build_tool()\r\n        results = tool.run(\r\n            {\r\n                \"query\": self.input_value,\r\n                \"max_results\": self.max_results,\r\n                \"max_snippet_length\": self.max_snippet_length,\r\n            }\r\n        )\r\n        data_list = [Data(data=result, text=result.get(\"snippet\", \"\")) for result in results]\r\n        self.status = data_list\r\n        return data_list\r\n","fileTypes":[],"file_path":"","password":false,"name":"code","advanced":true,"dynamic":true,"info":"","load_from_db":false,"title_case":false},"input_value":{"trace_as_input":true,"trace_as_metadata":true,"load_from_db":false,"list":false,"required":true,"placeholder":"","show":true,"name":"input_value","value":"cryptocurrency","display_name":"Search Query","advanced":false,"input_types":["Message"],"dynamic":false,"info":"","title_case":false,"type":"str","_input_type":"MessageTextInput"},"max_results":{"trace_as_metadata":true,"list":false,"required":false,"placeholder":"","show":true,"name":"max_results","value":5,"display_name":"Max Results","advanced":true,"dynamic":false,"info":"","title_case":false,"type":"int","_input_type":"IntInput"},"max_snippet_length":{"trace_as_metadata":true,"list":false,"required":false,"placeholder":"","show":true,"name":"max_snippet_length","value":100,"display_name":"Max Snippet Length","advanced":true,"dynamic":false,"info":"","title_case":false,"type":"int","_input_type":"IntInput"}},"description":"Perform web searches using the DuckDuckGo search engine with result limiting","icon":"DuckDuckGo","base_classes":["Data","Tool"],"display_name":"DuckDuckGo Search","documentation":"https://python.langchain.com/docs/integrations/tools/ddg","custom_fields":{},"output_types":[],"pinned":false,"conditional_paths":[],"frozen":false,"outputs":[{"types":["Data"],"selected":"Data","name":"api_run_model","display_name":"Data","method":"run_model","value":"__UNDEFINED__","cache":true,"required_inputs":["input_value","max_results","max_snippet_length"]},{"types":["Tool"],"selected":"Tool","name":"api_build_tool","display_name":"Tool","method":"build_tool","value":"__UNDEFINED__","cache":true,"required_inputs":["input_value","max_results","max_snippet_length"]}],"field_order":["input_value","max_results","max_snippet_length"],"beta":false,"edited":true,"metadata":{},"lf_version":"1.0.19","official":false},"id":"DuckDuckGoSearch-4IgeD"},"selected":false,"width":384,"height":347,"dragging":false,"positionAbsolute":{"x":-1246.2164982915199,"y":1377.747134627721}},{"id":"GoogleSerpAPI-52qf3","type":"genericNode","position":{"x":-838.6938017816315,"y":943.3120692450178},"data":{"type":"GoogleSerpAPI","node":{"template":{"_type":"Component","api_key":{"load_from_db":false,"required":true,"placeholder":"","show":true,"name":"api_key","value":"","display_name":"SerpApi API Key","advanced":false,"input_types":["Message"],"dynamic":false,"info":"","title_case":false,"password":true,"type":"str","_input_type":"SecretStrInput"},"code":{"type":"code","required":true,"placeholder":"","list":false,"show":true,"multiline":true,"value":"from typing import Any\r\nfrom langchain.tools import StructuredTool\r\nfrom pydantic import BaseModel, Field\r\nfrom langflow.base.langchain_utilities.model import LCToolComponent\r\nfrom langflow.field_typing import Tool\r\nfrom langflow.inputs import IntInput, MessageTextInput, SecretStrInput\r\nfrom langflow.schema import Data\r\nimport requests\r\nimport logging\r\n\r\n# Configure logging\r\nlogging.basicConfig(level=logging.DEBUG)\r\n\r\n# Define the component class for SerpApi\r\nclass GoogleSerpAPIComponent(LCToolComponent):\r\n    display_name: str = \"Google Serp API\"\r\n    description: str = \"Retrieve search results using the Google Serp API.\"\r\n    name = \"GoogleSerpAPI\"\r\n    documentation: str = \"https://serpapi.com/docs/\"\r\n\r\n    # Define the inputs needed for this component\r\n    inputs = [\r\n        SecretStrInput(name=\"api_key\", display_name=\"SerpApi API Key\", required=True),\r\n        MessageTextInput(name=\"query\", display_name=\"Search Query\", required=True),\r\n        IntInput(name=\"num_results\", display_name=\"Number of Results\", value=10, required=True),\r\n        MessageTextInput(name=\"gl\", display_name=\"Geographical Location (gl)\", value=\"us\"),\r\n        MessageTextInput(name=\"hl\", display_name=\"Language (hl)\", value=\"en\"),\r\n    ]\r\n\r\n    # Define the schema for the API tool arguments\r\n    class GoogleSerpAPISchema(BaseModel):\r\n        api_key: str = Field(..., description=\"SerpApi API Key\")\r\n        query: str = Field(..., description=\"The search query string\")\r\n        num_results: int = Field(10, description=\"Number of search results to retrieve\")\r\n        gl: str = Field(\"us\", description=\"Geographical location (e.g., 'us' for United States)\")\r\n        hl: str = Field(\"en\", description=\"Language for the search (e.g., 'en' for English)\")\r\n\r\n    # Define the API Wrapper for SerpApi\r\n    class GoogleSerpAPIWrapper:\r\n        def __init__(self, api_key: str):\r\n            self.api_key = api_key\r\n            self.url = \"https://serpapi.com/search\"\r\n    \r\n        def get_search_results(self, query: str, num_results: int = 10, gl: str = \"us\", hl: str = \"en\") -> list[dict[str, Any]]:\r\n            params = {\r\n                \"q\": query,\r\n                \"num\": num_results,\r\n                \"gl\": gl,\r\n                \"hl\": hl,\r\n                \"engine\": \"google\",\r\n                \"api_key\": \"db442e2544a3c3c892ba712d1f05f538a2936a72056089e9655d6a142bccb46a\" #self.api_key\"\"\r\n            }\r\n\r\n            # Print the API key being used\r\n            logging.debug(f\"API Key: {self.api_key}\")\r\n\r\n            # Log the URL and parameters being sent to SerpApi\r\n            logging.debug(f\"Request URL: {self.url}\")\r\n            logging.debug(f\"Request Params: {params}\")\r\n\r\n            response = requests.get(self.url, params=params)\r\n\r\n            # Log the response status and content\r\n            logging.debug(f\"Response Status Code: {response.status_code}\")\r\n            logging.debug(f\"Response Content: {response.text}\")\r\n\r\n            # Check for errors\r\n            if response.status_code == 403:\r\n                raise Exception(\"Error 403: Forbidden. Please check your API key or request quota.\")\r\n            elif response.status_code == 401:\r\n                raise Exception(\"Error 401: Invalid API key. Please verify your API key.\")\r\n            elif response.status_code != 200:\r\n                raise Exception(f\"Error {response.status_code}: {response.json().get('error', 'Unknown error')}\")\r\n\r\n            # Return the organic results from the response\r\n            return response.json().get('organic_results', [])\r\n\r\n    # Build the API wrapper\r\n    def _build_wrapper(self, api_key: str):\r\n        return self.GoogleSerpAPIWrapper(api_key=api_key)\r\n\r\n    # Tool builder function\r\n    def build_tool(self) -> Tool:\r\n        def get_search_results(api_key: str, query: str, num_results: int = 10, gl: str = \"us\", hl: str = \"en\") -> list[dict[str, Any]]:\r\n            wrapper = self._build_wrapper(api_key=api_key)\r\n            return wrapper.get_search_results(query=query, num_results=num_results, gl=gl, hl=hl)\r\n\r\n        tool = StructuredTool.from_function(\r\n            name=\"google_serp_api\",\r\n            description=\"Fetch search results using Google Serp API\",\r\n            func=get_search_results,\r\n            args_schema=self.GoogleSerpAPISchema,\r\n        )\r\n\r\n        self.status = \"Google Serp API Tool created successfully.\"\r\n        return tool\r\n\r\n    # Run model function to trigger the API call\r\n    def run_model(self) -> list[Data]:\r\n        tool = self.build_tool()\r\n        results = tool.run(\r\n            {\r\n                \"api_key\": self.api_key,\r\n                \"query\": self.query,\r\n                \"num_results\": self.num_results,\r\n                \"gl\": self.gl,\r\n                \"hl\": self.hl,\r\n            }\r\n        )\r\n\r\n        # Format the results for output\r\n        data_list = [Data(data=result, text=f\"Title: {result['title']}, Snippet: {result['snippet']}\") for result in results]\r\n\r\n        self.status = data_list\r\n        return data_list\r\n","fileTypes":[],"file_path":"","password":false,"name":"code","advanced":true,"dynamic":true,"info":"","load_from_db":false,"title_case":false},"gl":{"trace_as_input":true,"trace_as_metadata":true,"load_from_db":false,"list":false,"required":false,"placeholder":"","show":true,"name":"gl","value":"us","display_name":"Geographical Location (gl)","advanced":false,"input_types":["Message"],"dynamic":false,"info":"","title_case":false,"type":"str","_input_type":"MessageTextInput"},"hl":{"trace_as_input":true,"trace_as_metadata":true,"load_from_db":false,"list":false,"required":false,"placeholder":"","show":true,"name":"hl","value":"en","display_name":"Language (hl)","advanced":false,"input_types":["Message"],"dynamic":false,"info":"","title_case":false,"type":"str","_input_type":"MessageTextInput"},"num_results":{"trace_as_metadata":true,"list":false,"required":true,"placeholder":"","show":true,"name":"num_results","value":4,"display_name":"Number of Results","advanced":false,"dynamic":false,"info":"","title_case":false,"type":"int","_input_type":"IntInput","load_from_db":false},"query":{"trace_as_input":true,"trace_as_metadata":true,"load_from_db":false,"list":false,"required":true,"placeholder":"","show":true,"name":"query","value":"cryptocurrency","display_name":"Search Query","advanced":false,"input_types":["Message"],"dynamic":false,"info":"","title_case":false,"type":"str","_input_type":"MessageTextInput"}},"description":"Retrieve search results using the Google Serp API.","base_classes":["Data","Tool"],"display_name":"Google Serper API","documentation":"https://serpapi.com/docs/","custom_fields":{},"output_types":[],"pinned":false,"conditional_paths":[],"frozen":false,"outputs":[{"types":["Data"],"selected":"Data","name":"api_run_model","display_name":"Data","method":"run_model","value":"__UNDEFINED__","cache":true,"required_inputs":["api_key","gl","hl","num_results","query"]},{"types":["Tool"],"selected":"Tool","name":"api_build_tool","display_name":"Tool","method":"build_tool","value":"__UNDEFINED__","cache":true,"required_inputs":["api_key","gl","hl","num_results","query"]}],"field_order":["api_key","query","num_results","gl","hl"],"beta":false,"edited":true,"metadata":{},"lf_version":"1.0.19","official":false},"id":"GoogleSerpAPI-52qf3"},"selected":false,"width":384,"height":693,"positionAbsolute":{"x":-838.6938017816315,"y":943.3120692450178},"dragging":false},{"id":"NewsAPI-yDDMS","type":"genericNode","position":{"x":-392.46040357553187,"y":617.266968611706},"data":{"type":"NewsAPI","node":{"template":{"_type":"Component","api_key":{"load_from_db":false,"required":true,"placeholder":"","show":true,"name":"api_key","value":"","display_name":"News API Key","advanced":false,"input_types":["Message"],"dynamic":false,"info":"","title_case":false,"password":true,"type":"str","_input_type":"SecretStrInput"},"code":{"type":"code","required":true,"placeholder":"","list":false,"show":true,"multiline":true,"value":"from typing import Any, List, Dict\nfrom pydantic import BaseModel, Field\nfrom langflow.base.langchain_utilities.model import LCToolComponent\nfrom langflow.inputs import IntInput, MessageTextInput, SecretStrInput\nfrom langflow.schema import Data\nimport requests\n\n\n# Define the component class for News API\nclass NewsAPIComponent(LCToolComponent):\n    display_name: str = \"News API\"\n    description: str = \"Retrieve the latest news articles using the News API.\"\n    name = \"NewsAPI\"\n    documentation: str = \"https://newsapi.org/docs/endpoints/everything\"\n\n    # Define the inputs needed for this component\n    inputs = [\n        SecretStrInput(name=\"api_key\", display_name=\"News API Key\", required=True),\n        MessageTextInput(name=\"query\", display_name=\"Search Query\", required=True),\n        IntInput(name=\"page_size\", display_name=\"Number of Results\", value=10, required=False),\n        MessageTextInput(name=\"language\", display_name=\"Language\", value=\"en\", required=False),\n        MessageTextInput(name=\"sort_by\", display_name=\"Sort By\", value=\"publishedAt\", required=False),\n        MessageTextInput(name=\"from_date\", display_name=\"From Date (YYYY-MM-DD)\", required=False),\n        MessageTextInput(name=\"to_date\", display_name=\"To Date (YYYY-MM-DD)\", required=False),\n        MessageTextInput(name=\"sources\", display_name=\"News Sources\", required=False),\n        MessageTextInput(name=\"domains\", display_name=\"Domains\", required=False),\n    ]\n\n    # Define the schema for the API tool arguments\n    class NewsAPISchema(BaseModel):\n        api_key: str = Field(..., description=\"Your News API Key\")\n        query: str = Field(..., description=\"The search query to look for in articles\")\n        page_size: int = Field(10, description=\"Number of articles to return\")\n        language: str = Field(\"en\", description=\"The language of the articles (default is 'en')\")\n        sort_by: str = Field(\"publishedAt\", description=\"Sort by relevancy, popularity, or published date (default is 'publishedAt')\")\n        from_date: str = Field(None, description=\"Start date for the news articles (YYYY-MM-DD)\")\n        to_date: str = Field(None, description=\"End date for the news articles (YYYY-MM-DD)\")\n        sources: str = Field(None, description=\"Comma-separated list of news sources (e.g., 'bbc-news, techcrunch')\")\n        domains: str = Field(None, description=\"Comma-separated list of domains (e.g., 'wsj.com, bbc.co.uk')\")\n\n    # Define the API Wrapper for News API\n    class NewsAPIWrapper:\n        BASE_URL = \"https://newsapi.org/v2/everything\"\n\n        def __init__(self, api_key: str):\n            self.api_key = api_key\n\n        def get_news(self, query: str, page_size: int = 10, language: str = \"en\", sort_by: str = \"publishedAt\", from_date: str = None, to_date: str = None, sources: str = None, domains: str = None) -> List[Dict[str, Any]]:\n            # Prepare request parameters based on inputs\n            params = {\n                \"q\": query,\n                \"pageSize\": page_size,\n                \"language\": language,\n                \"sortBy\": sort_by,\n                \"from\": from_date,\n                \"to\": to_date,\n                \"sources\": sources,\n                \"domains\": domains,\n                \"apiKey\": \"32e88604cf474c199dea193cccd63e96\"  # self.api_key,  # Use the provided API key dynamically\n            }\n\n            # Remove None values from params\n            params = {k: v for k, v in params.items() if v is not None}\n\n            # Print out the details of the API request\n            print(\"\\n[INFO] - Sending request to News API...\")\n            print(f\"[INFO] - API Endpoint: {self.BASE_URL}\")\n            print(f\"[INFO] - Request Parameters: {params}\")\n\n            response = requests.get(self.BASE_URL, params=params)\n\n            # Handle common errors gracefully\n            if response.status_code == 401:\n                print(\"[ERROR] - Unauthorized request. Check your API key.\")\n                raise Exception(\"Error 401: Unauthorized. Please check your API key.\")\n            elif response.status_code == 429:\n                print(\"[ERROR] - Rate limit exceeded.\")\n                raise Exception(\"Error 429: Too many requests. Rate limit exceeded.\")\n            elif response.status_code != 200:\n                error_message = response.json().get('message', 'Unknown error')\n                print(f\"[ERROR] - Error {response.status_code}: {error_message}\")\n                raise Exception(f\"Error {response.status_code}: {error_message}\")\n\n            print(\"[INFO] - Request successful. Processing response data...\")\n            return response.json().get('articles', [])\n\n    # Build the API wrapper\n    def _build_wrapper(self, api_key: str):\n        print(f\"[INFO] - Building API wrapper with API Key: {api_key[:5]}***\")\n        return self.NewsAPIWrapper(api_key=api_key)\n\n    # Tool builder function\n    def build_tool(self) -> Tool:\n        def get_news(api_key: str, query: str, page_size: int = 10, language: str = \"en\", sort_by: str = \"publishedAt\", from_date: str = None, to_date: str = None, sources: str = None, domains: str = None) -> List[Dict[str, Any]]:\n            wrapper = self._build_wrapper(api_key=api_key)\n            return wrapper.get_news(query=query, page_size=page_size, language=language, sort_by=sort_by, from_date=from_date, to_date=to_date, sources=sources, domains=domains)\n\n        tool = StructuredTool.from_function(\n            name=\"news_api\",\n            description=\"Fetch the latest news articles using the News API\",\n            func=get_news,\n            args_schema=self.NewsAPISchema,\n        )\n\n        print(\"[INFO] - News API Tool created successfully.\")\n        return tool\n\n    # Run model function to trigger the API call\n    def run_model(self, inputs: Dict[str, Any]) -> List[Data]:\n        tool = self.build_tool()\n\n        # Print the inputs received\n        print(\"[INFO] - Running model with the following inputs:\")\n        for key, value in inputs.items():\n            print(f\"  {key}: {value}\")\n\n        # The API key and other inputs are passed dynamically\n        results = tool.run(\n            {\n                \"api_key\": inputs[\"api_key\"],\n                \"query\": inputs[\"query\"],\n                \"page_size\": inputs.get(\"page_size\", 10),\n                \"language\": inputs.get(\"language\", \"en\"),\n                \"sort_by\": inputs.get(\"sort_by\", \"publishedAt\"),\n                \"from_date\": inputs.get(\"from_date\", None),\n                \"to_date\": inputs.get(\"to_date\", None),\n                \"sources\": inputs.get(\"sources\", None),\n                \"domains\": inputs.get(\"domains\", None),\n            }\n        )\n\n        # Format the results for output\n        data_list = [\n            Data(\n                data=result,\n                text=f\"Title: {result.get('title', 'N/A')}, Description: {result.get('description', 'N/A')}, URL: {result.get('url', 'N/A')}\"\n            )\n            for result in results\n        ]\n\n        print(\"[INFO] - Finished processing the News API response.\")\n        \n        # Print out a cURL command for manual testing\n        print(\"\\n[INFO] - cURL Command for manual test:\")\n        curl_command = (\n            f\"curl -X GET 'https://newsapi.org/v2/everything?\"\n            f\"q={inputs['query']}&\"\n            f\"pageSize={inputs.get('page_size', 10)}&\"\n            f\"language={inputs.get('language', 'en')}&\"\n            f\"sortBy={inputs.get('sort_by', 'publishedAt')}&\"\n            f\"from={inputs.get('from_date', '')}&\"\n            f\"to={inputs.get('to_date', '')}&\"\n            f\"apiKey={inputs['api_key']}'\"\n        )\n        print(curl_command)\n\n        self.status = data_list\n        return data_list\n","fileTypes":[],"file_path":"","password":false,"name":"code","advanced":true,"dynamic":true,"info":"","load_from_db":false,"title_case":false},"domains":{"trace_as_input":true,"trace_as_metadata":true,"load_from_db":false,"list":false,"required":false,"placeholder":"","show":true,"name":"domains","value":"","display_name":"Domains","advanced":false,"input_types":["Message"],"dynamic":false,"info":"","title_case":false,"type":"str","_input_type":"MessageTextInput"},"from_date":{"trace_as_input":true,"trace_as_metadata":true,"load_from_db":false,"list":false,"required":false,"placeholder":"","show":true,"name":"from_date","value":"","display_name":"From Date (YYYY-MM-DD)","advanced":false,"input_types":["Message"],"dynamic":false,"info":"","title_case":false,"type":"str","_input_type":"MessageTextInput"},"language":{"trace_as_input":true,"trace_as_metadata":true,"load_from_db":false,"list":false,"required":false,"placeholder":"","show":true,"name":"language","value":"en","display_name":"Language","advanced":true,"input_types":["Message"],"dynamic":false,"info":"","title_case":false,"type":"str","_input_type":"MessageTextInput"},"page_size":{"trace_as_metadata":true,"list":false,"required":false,"placeholder":"","show":true,"name":"page_size","value":10,"display_name":"Number of Results","advanced":false,"dynamic":false,"info":"","title_case":false,"type":"int","_input_type":"IntInput"},"query":{"trace_as_input":true,"trace_as_metadata":true,"load_from_db":false,"list":false,"required":true,"placeholder":"","show":true,"name":"query","value":"cryptocurrency","display_name":"Search Query","advanced":false,"input_types":["Message"],"dynamic":false,"info":"","title_case":false,"type":"str","_input_type":"MessageTextInput"},"sort_by":{"trace_as_input":true,"trace_as_metadata":true,"load_from_db":false,"list":false,"required":false,"placeholder":"","show":true,"name":"sort_by","value":"publishedAt","display_name":"Sort By","advanced":false,"input_types":["Message"],"dynamic":false,"info":"","title_case":false,"type":"str","_input_type":"MessageTextInput"},"sources":{"trace_as_input":true,"trace_as_metadata":true,"load_from_db":false,"list":false,"required":false,"placeholder":"","show":true,"name":"sources","value":"","display_name":"News Sources","advanced":false,"input_types":["Message"],"dynamic":false,"info":"","title_case":false,"type":"str","_input_type":"MessageTextInput"},"to_date":{"trace_as_input":true,"trace_as_metadata":true,"load_from_db":false,"list":false,"required":false,"placeholder":"","show":true,"name":"to_date","value":"","display_name":"To Date (YYYY-MM-DD)","advanced":false,"input_types":["Message"],"dynamic":false,"info":"","title_case":false,"type":"str","_input_type":"MessageTextInput"}},"description":"Retrieve the latest news articles using the News API.","base_classes":["Data","Tool"],"display_name":"News API","documentation":"https://newsapi.org/docs/endpoints/everything","custom_fields":{},"output_types":[],"pinned":false,"conditional_paths":[],"frozen":false,"outputs":[{"types":["Data"],"selected":"Data","name":"api_run_model","display_name":"Data","method":"run_model","value":"__UNDEFINED__","cache":true,"required_inputs":["api_key"],"hidden":true},{"types":["Tool"],"selected":"Tool","name":"api_build_tool","display_name":"Tool","method":"build_tool","value":"__UNDEFINED__","cache":true,"required_inputs":["api_key"]}],"field_order":["api_key","query","page_size","language","sort_by","from_date","to_date","sources","domains"],"beta":false,"edited":true,"metadata":{},"lf_version":"1.0.19","official":false},"id":"NewsAPI-yDDMS"},"selected":false,"width":384,"height":913,"positionAbsolute":{"x":-392.46040357553187,"y":617.266968611706},"dragging":false},{"id":"AmazonBedrockModel-pwl8Y","type":"genericNode","position":{"x":2229.8873920170136,"y":1427.9010460745203},"data":{"type":"AmazonBedrockModel","node":{"template":{"_type":"Component","output_parser":{"trace_as_metadata":true,"list":false,"required":false,"placeholder":"","show":true,"name":"output_parser","value":"","display_name":"Output Parser","advanced":true,"input_types":["OutputParser"],"dynamic":false,"info":"The parser to use to parse the output of the model","title_case":false,"type":"other","_input_type":"HandleInput"},"aws_access_key":{"load_from_db":false,"required":false,"placeholder":"","show":true,"name":"aws_access_key","value":"","display_name":"Access Key","advanced":true,"input_types":["Message"],"dynamic":false,"info":"","title_case":false,"password":true,"type":"str","_input_type":"SecretStrInput"},"aws_secret_key":{"load_from_db":false,"required":false,"placeholder":"","show":true,"name":"aws_secret_key","value":"","display_name":"Secret Key","advanced":true,"input_types":["Message"],"dynamic":false,"info":"","title_case":false,"password":true,"type":"str","_input_type":"SecretStrInput"},"code":{"type":"code","required":true,"placeholder":"","list":false,"show":true,"multiline":true,"value":"from langflow.base.models.model import LCModelComponent\nfrom langflow.field_typing import LanguageModel\nfrom langflow.inputs import MessageTextInput, SecretStrInput\nfrom langflow.inputs.inputs import HandleInput\nfrom langflow.io import DictInput, DropdownInput\n\n\nclass AmazonBedrockComponent(LCModelComponent):\n    display_name: str = \"Amazon Bedrock\"\n    description: str = \"Generate text using Amazon Bedrock LLMs.\"\n    icon = \"Amazon\"\n    name = \"AmazonBedrockModel\"\n\n    inputs = [\n        *LCModelComponent._base_inputs,\n        DropdownInput(\n            name=\"model_id\",\n            display_name=\"Model ID\",\n            options=[\n                \"amazon.titan-text-express-v1\",\n                \"amazon.titan-text-lite-v1\",\n                \"amazon.titan-text-premier-v1:0\",\n                \"amazon.titan-embed-text-v1\",\n                \"amazon.titan-embed-text-v2:0\",\n                \"amazon.titan-embed-image-v1\",\n                \"amazon.titan-image-generator-v1\",\n                \"anthropic.claude-v2\",\n                \"anthropic.claude-v2:1\",\n                \"anthropic.claude-3-sonnet-20240229-v1:0\",\n                \"anthropic.claude-3-haiku-20240307-v1:0\",\n                \"anthropic.claude-3-opus-20240229-v1:0\",\n                \"anthropic.claude-3-5-sonnet-20240620-v1:0\",\n                \"anthropic.claude-instant-v1\",\n                \"ai21.j2-mid-v1\",\n                \"ai21.j2-ultra-v1\",\n                \"cohere.command-text-v14\",\n                \"cohere.command-light-text-v14\",\n                \"cohere.command-r-v1:0\",\n                \"cohere.command-r-plus-v1:0\",\n                \"cohere.embed-english-v3\",\n                \"cohere.embed-multilingual-v3\",\n                \"meta.llama2-13b-chat-v1\",\n                \"meta.llama2-70b-chat-v1\",\n                \"meta.llama3-8b-instruct-v1:0\",\n                \"meta.llama3-70b-instruct-v1:0\",\n                \"mistral.mistral-7b-instruct-v0:2\",\n                \"mistral.mixtral-8x7b-instruct-v0:1\",\n                \"mistral.mistral-large-2402-v1:0\",\n                \"mistral.mistral-small-2402-v1:0\",\n                \"stability.stable-diffusion-xl-v0\",\n                \"stability.stable-diffusion-xl-v1\",\n            ],\n            value=\"anthropic.claude-3-5-sonnet-20240620-v1:0\",\n        ),\n        SecretStrInput(name=\"aws_access_key\", display_name=\"Access Key\"),\n        SecretStrInput(name=\"aws_secret_key\", display_name=\"Secret Key\"),\n        MessageTextInput(name=\"credentials_profile_name\", display_name=\"Credentials Profile Name\", advanced=True),\n        MessageTextInput(name=\"region_name\", display_name=\"Region Name\", value=\"us-east-1\"),\n        DictInput(name=\"model_kwargs\", display_name=\"Model Kwargs\", advanced=True, is_list=True),\n        MessageTextInput(name=\"endpoint_url\", display_name=\"Endpoint URL\", advanced=True),\n        HandleInput(\n            name=\"output_parser\",\n            display_name=\"Output Parser\",\n            info=\"The parser to use to parse the output of the model\",\n            advanced=True,\n            input_types=[\"OutputParser\"],\n        ),\n    ]\n\n    def build_model(self) -> LanguageModel:  # type: ignore[type-var]\n        try:\n            from langchain_aws import ChatBedrock\n        except ImportError as e:\n            msg = \"langchain_aws is not installed. Please install it with `pip install langchain_aws`.\"\n            raise ImportError(msg) from e\n        if self.aws_access_key:\n            import boto3\n\n            session = boto3.Session(\n                aws_access_key_id=\"AKIA5RKJRW74ZO5DHGU7\",\n                aws_secret_access_key=\"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\",\n            )\n        elif self.credentials_profile_name:\n            import boto3\n\n            session = boto3.Session(profile_name=self.credentials_profile_name)\n        else:\n            import boto3\n\n            session = boto3.Session()\n\n        client_params = {}\n        if self.endpoint_url:\n            client_params[\"endpoint_url\"] = self.endpoint_url\n        if self.region_name:\n            client_params[\"region_name\"] = self.region_name\n\n        boto3_client = session.client(\"bedrock-runtime\", **client_params)\n        try:\n            output = ChatBedrock(\n                client=boto3_client,\n                model_id=self.model_id,\n                region_name=self.region_name,\n                model_kwargs=self.model_kwargs,\n                endpoint_url=self.endpoint_url,\n                streaming=self.stream,\n            )\n        except Exception as e:\n            msg = \"Could not connect to AmazonBedrock API.\"\n            raise ValueError(msg) from e\n        return output\n","fileTypes":[],"file_path":"","password":false,"name":"code","advanced":true,"dynamic":true,"info":"","load_from_db":false,"title_case":false},"credentials_profile_name":{"trace_as_input":true,"trace_as_metadata":true,"load_from_db":false,"list":false,"required":false,"placeholder":"","show":true,"name":"credentials_profile_name","value":"","display_name":"Credentials Profile Name","advanced":true,"input_types":["Message"],"dynamic":false,"info":"","title_case":false,"type":"str","_input_type":"MessageTextInput"},"endpoint_url":{"trace_as_input":true,"trace_as_metadata":true,"load_from_db":false,"list":false,"required":false,"placeholder":"","show":true,"name":"endpoint_url","value":"","display_name":"Endpoint URL","advanced":true,"input_types":["Message"],"dynamic":false,"info":"","title_case":false,"type":"str","_input_type":"MessageTextInput"},"input_value":{"trace_as_input":true,"trace_as_metadata":true,"load_from_db":false,"list":false,"required":false,"placeholder":"","show":true,"name":"input_value","value":"","display_name":"Input","advanced":true,"input_types":["Message"],"dynamic":false,"info":"","title_case":false,"type":"str","_input_type":"MessageInput"},"model_id":{"trace_as_metadata":true,"options":["amazon.titan-text-express-v1","amazon.titan-text-lite-v1","amazon.titan-text-premier-v1:0","amazon.titan-embed-text-v1","amazon.titan-embed-text-v2:0","amazon.titan-embed-image-v1","amazon.titan-image-generator-v1","anthropic.claude-v2","anthropic.claude-v2:1","anthropic.claude-3-sonnet-20240229-v1:0","anthropic.claude-3-haiku-20240307-v1:0","anthropic.claude-3-opus-20240229-v1:0","anthropic.claude-3-5-sonnet-20240620-v1:0","anthropic.claude-instant-v1","ai21.j2-mid-v1","ai21.j2-ultra-v1","cohere.command-text-v14","cohere.command-light-text-v14","cohere.command-r-v1:0","cohere.command-r-plus-v1:0","cohere.embed-english-v3","cohere.embed-multilingual-v3","meta.llama2-13b-chat-v1","meta.llama2-70b-chat-v1","meta.llama3-8b-instruct-v1:0","meta.llama3-70b-instruct-v1:0","mistral.mistral-7b-instruct-v0:2","mistral.mixtral-8x7b-instruct-v0:1","mistral.mistral-large-2402-v1:0","mistral.mistral-small-2402-v1:0","stability.stable-diffusion-xl-v0","stability.stable-diffusion-xl-v1"],"combobox":false,"required":false,"placeholder":"","show":true,"name":"model_id","value":"anthropic.claude-3-5-sonnet-20240620-v1:0","display_name":"Model ID","advanced":false,"dynamic":false,"info":"","title_case":false,"type":"str","_input_type":"DropdownInput"},"model_kwargs":{"trace_as_input":true,"list":true,"required":false,"placeholder":"","show":true,"name":"model_kwargs","value":{},"display_name":"Model Kwargs","advanced":true,"dynamic":false,"info":"","title_case":false,"type":"dict","_input_type":"DictInput"},"region_name":{"trace_as_input":true,"trace_as_metadata":true,"load_from_db":false,"list":false,"required":false,"placeholder":"","show":true,"name":"region_name","value":"us-east-1","display_name":"Region Name","advanced":true,"input_types":["Message"],"dynamic":false,"info":"","title_case":false,"type":"str","_input_type":"MessageTextInput"},"stream":{"trace_as_metadata":true,"list":false,"required":false,"placeholder":"","show":true,"name":"stream","value":false,"display_name":"Stream","advanced":true,"dynamic":false,"info":"Stream the response from the model. Streaming works only in Chat.","title_case":false,"type":"bool","_input_type":"BoolInput"},"system_message":{"trace_as_input":true,"trace_as_metadata":true,"load_from_db":false,"list":false,"required":false,"placeholder":"","show":true,"name":"system_message","value":"","display_name":"System Message","advanced":true,"input_types":["Message"],"dynamic":false,"info":"System message to pass to the model.","title_case":false,"type":"str","_input_type":"MessageTextInput"}},"description":"Generate text using Amazon Bedrock LLMs.","icon":"Amazon","base_classes":["LanguageModel","Message"],"display_name":"Claude Amazon Bedrock","documentation":"","custom_fields":{},"output_types":[],"pinned":false,"conditional_paths":[],"frozen":false,"outputs":[{"types":["Message"],"selected":"Message","name":"text_output","display_name":"Text","method":"text_response","value":"__UNDEFINED__","cache":true,"required_inputs":["input_value","stream","system_message"]},{"types":["LanguageModel"],"selected":"LanguageModel","name":"model_output","display_name":"Language Model","method":"build_model","value":"__UNDEFINED__","cache":true,"required_inputs":["aws_access_key","credentials_profile_name","endpoint_url","model_id","model_kwargs","region_name","stream"]}],"field_order":["input_value","system_message","stream","model_id","aws_access_key","aws_secret_key","credentials_profile_name","region_name","model_kwargs","endpoint_url","output_parser"],"beta":false,"edited":true,"metadata":{},"lf_version":"1.0.19","official":false},"id":"AmazonBedrockModel-pwl8Y"},"selected":false,"width":384,"height":331,"positionAbsolute":{"x":2229.8873920170136,"y":1427.9010460745203},"dragging":false},{"id":"AgentAsTool_Sentiment-2mIYL","type":"genericNode","position":{"x":2673.1299669573827,"y":1577.8326160650824},"data":{"type":"AgentAsTool_Sentiment","node":{"template":{"_type":"Component","agent":{"trace_as_metadata":true,"list":false,"required":true,"placeholder":"","show":true,"name":"agent","value":"","display_name":"Agent","advanced":false,"input_types":["AgentExecutor"],"dynamic":false,"info":"","title_case":false,"type":"other","_input_type":"HandleInput"},"code":{"type":"code","required":true,"placeholder":"","list":false,"show":true,"multiline":true,"value":"from langflow.custom import Component\nfrom langflow.inputs import HandleInput\nfrom langchain_core.tools import Tool, tool\nfrom langflow.template import Output\nfrom typing import Any, Dict\nfrom langflow.base.agents.callback import AgentAsyncHandler\n\nclass AgentAsTool(Component):\n    icon = \"arrow-right-to-line\"\n    display_name = \"Sentiment Agent As Tool\"\n    description = \"Allows to invoke another agent as a tool\"\n    name = \"AgentAsTool_Sentiment\"\n\n    inputs = [\n        HandleInput(name=\"agent\", display_name=\"Agent\", input_types=[\"AgentExecutor\"], required=True),\n    ]\n\n    outputs = [\n       Output(display_name=\"Tool\", name=\"agent_tool\", method=\"get_tool_agent\"),\n    ]\n\n    def get_tool_agent(\n        self\n    ) -> Tool:     \n                \n        \n\n        @tool()\n        def toolAgent(query: str) -> Dict[str, Any]:\n            \"\"\"\n                This will invoke another agent as a tool and reurn the response form the agent\n            \"\"\"\n            #name= \"ToolCallingAgent_Sentiment\"\n            local_agent = self.agent\n            return local_agent.invoke(query, config={\"callbacks\": [AgentAsyncHandler(self.log), *self.get_langchain_callbacks()]})\n\n        return toolAgent # type: ignore","fileTypes":[],"file_path":"","password":false,"name":"code","advanced":true,"dynamic":true,"info":"","load_from_db":false,"title_case":false}},"description":"Allows to invoke another agent as a tool","icon":"arrow-right-to-line","base_classes":["Tool"],"display_name":"Custom Component Sentiment","documentation":"","custom_fields":{},"output_types":[],"pinned":false,"conditional_paths":[],"frozen":false,"outputs":[{"types":["Tool"],"selected":"Tool","name":"agent_tool","display_name":"Tool","method":"get_tool_agent","value":"__UNDEFINED__","cache":true}],"field_order":["agent"],"beta":false,"edited":true,"metadata":{},"official":false,"lf_version":"1.0.19"},"id":"AgentAsTool_Sentiment-2mIYL"},"selected":false,"width":384,"height":252,"positionAbsolute":{"x":2673.1299669573827,"y":1577.8326160650824},"dragging":false},{"id":"ToolCallingAgent_Sentiment-zWY6e","type":"genericNode","position":{"x":2670.80155160897,"y":1183.688664390593},"data":{"type":"ToolCallingAgent_Sentiment","node":{"template":{"_type":"Component","chat_history":{"trace_as_metadata":true,"list":true,"trace_as_input":true,"required":false,"placeholder":"","show":true,"name":"chat_history","value":"","display_name":"Chat History","advanced":true,"input_types":["Data"],"dynamic":false,"info":"","title_case":false,"type":"other","_input_type":"DataInput"},"llm":{"trace_as_metadata":true,"list":false,"required":true,"placeholder":"","show":true,"name":"llm","value":"","display_name":"Language Model","advanced":false,"input_types":["LanguageModel"],"dynamic":false,"info":"","title_case":false,"type":"other","_input_type":"HandleInput"},"tools":{"trace_as_metadata":true,"list":true,"required":false,"placeholder":"","show":true,"name":"tools","value":"","display_name":"Tools","advanced":false,"input_types":["Tool","BaseTool","StructuredTool"],"dynamic":false,"info":"","title_case":false,"type":"other","_input_type":"HandleInput"},"code":{"type":"code","required":true,"placeholder":"","list":false,"show":true,"multiline":true,"value":"from langchain.agents import create_tool_calling_agent\nfrom langchain_core.prompts import ChatPromptTemplate, HumanMessagePromptTemplate, PromptTemplate\n\nfrom langflow.base.agents.agent import LCToolsAgentComponent\nfrom langflow.inputs import MultilineInput\nfrom langflow.inputs.inputs import DataInput, HandleInput\nfrom langflow.schema import Data\n\n\nclass ToolCallingAgentComponent(LCToolsAgentComponent):\n    display_name: str = \"Sentiment Tool Calling Agent\"\n    description: str = \"Sentiment Agent that uses tools\"\n    icon = \"LangChain\"\n    beta = True\n    name = \"ToolCallingAgent_Sentiment\"\n\n    inputs = [\n        *LCToolsAgentComponent._base_inputs,\n        HandleInput(name=\"llm\", display_name=\"Language Model\", input_types=[\"LanguageModel\"], required=True),\n        MultilineInput(\n            name=\"system_prompt\",\n            display_name=\"System Prompt\",\n            info=\"System prompt for the agent.\",\n            value=\"You are a helpful assistant\",\n        ),\n        MultilineInput(\n            name=\"user_prompt\", display_name=\"Prompt\", info=\"This prompt must contain 'input' key.\", value=\"{input}\"\n        ),\n        DataInput(name=\"chat_history\", display_name=\"Chat History\", is_list=True, advanced=True),\n    ]\n\n    def get_chat_history_data(self) -> list[Data] | None:\n        return self.chat_history\n\n    def create_agent_runnable(self):\n        if \"input\" not in self.user_prompt:\n            msg = \"Prompt must contain 'input' key.\"\n            raise ValueError(msg)\n        messages = [\n            (\"system\", self.system_prompt),\n            (\"placeholder\", \"{chat_history}\"),\n            HumanMessagePromptTemplate(prompt=PromptTemplate(input_variables=[\"input\"], template=self.user_prompt)),\n            (\"placeholder\", \"{agent_scratchpad}\"),\n        ]\n        prompt = ChatPromptTemplate.from_messages(messages)\n        return create_tool_calling_agent(self.llm, self.tools, prompt)\n","fileTypes":[],"file_path":"","password":false,"name":"code","advanced":true,"dynamic":true,"info":"","load_from_db":false,"title_case":false},"handle_parsing_errors":{"trace_as_metadata":true,"list":false,"required":false,"placeholder":"","show":true,"name":"handle_parsing_errors","value":true,"display_name":"Handle Parse Errors","advanced":true,"dynamic":false,"info":"","title_case":false,"type":"bool","_input_type":"BoolInput"},"input_value":{"trace_as_input":true,"trace_as_metadata":true,"load_from_db":false,"list":false,"required":false,"placeholder":"","show":true,"name":"input_value","value":"","display_name":"Input","advanced":true,"input_types":["Message"],"dynamic":false,"info":"","title_case":false,"type":"str","_input_type":"MessageTextInput"},"max_iterations":{"trace_as_metadata":true,"list":false,"required":false,"placeholder":"","show":true,"name":"max_iterations","value":5,"display_name":"Max Iterations","advanced":true,"dynamic":false,"info":"","title_case":false,"type":"int","_input_type":"IntInput","load_from_db":false},"system_prompt":{"trace_as_input":true,"multiline":true,"trace_as_metadata":true,"load_from_db":false,"list":false,"required":false,"placeholder":"","show":true,"name":"system_prompt","value":"You are a helpful assistant","display_name":"System Prompt","advanced":true,"input_types":["Message"],"dynamic":false,"info":"System prompt for the agent.","title_case":false,"type":"str","_input_type":"MultilineInput"},"user_prompt":{"trace_as_input":true,"multiline":true,"trace_as_metadata":true,"load_from_db":false,"list":false,"required":false,"placeholder":"","show":true,"name":"user_prompt","value":"You are an expert data sentiment analyst tasked with detecting and analyzing text-based sentiments in a document's content. Your goal is to perform a deep analysis of a single document and provide a detailed report that will contribute to a Trends Datastore for larger dataset insights.\n\nYou will receive a text input with the following structure:\n\n<text_input>\n{input}\n</text_input>\n\nFollow these steps to complete your analysis:\n\n1. Preprocessing:\n   - Clean, tokenize, and normalize the text in the \"content\" field\n   - Remove stop words to improve accuracy\n\n2. Sentiment Detection:\n   - Apply NLP techniques to detect overall sentiment (positive, negative, neutral)\n   - Identify subtle emotional tones (anger, joy, sadness, surprise)\n\n3. Classification of Sentiment Data:\n   - Categorize sentiments into domain-specific categories\n   - Tag data with relevant metadata\n\n4. Identifying Trends and Patterns:\n   - Analyze sentiment trends within the document\n   - Look for emerging patterns or shifts in sentiment\n\n5. Entity and Topic Extraction:\n   - Extract key entities (people, organizations, products)\n   - Identify main topics related to the sentiment\n\n6. Anomaly Detection and Deeper Insights:\n   - Identify outliers or sudden changes in sentiment\n   - Uncover hidden insights by correlating sentiment data with content\n\nAfter completing your analysis, provide your output in the following JSON format:\n\n<output_format>\n\\x7B\n  \"sentiment_analysis\": \\x7B\n    \"overall_sentiment_score\": 0.0,\n    \"sentiment_classification\": \"positive | negative | neutral\",\n    \"sentiment_trends\": [\n      \\x7B\n        \"text_segment\": \"string\",\n        \"sentiment_score\": 0.0,\n        \"sentiment_classification\": \"positive | negative | neutral\",\n        \"start_position\": 0,\n        \"end_position\": 0\n      \\x7D\n    ],\n    \"sentiment_by_section\": \\x7B\n      \"introduction\": \\x7B\n        \"sentiment_score\": 0.0,\n        \"sentiment_classification\": \"positive | negative | neutral\"\n      \\x7D,\n      \"body\": \\x7B\n        \"sentiment_score\": 0.0,\n        \"sentiment_classification\": \"positive | negative | neutral\"\n      \\x7D,\n      \"conclusion\": \\x7B\n        \"sentiment_score\": 0.0,\n        \"sentiment_classification\": \"positive | negative | neutral\"\n      \\x7D\n    \\x7D\n  \\x7D,\n  \"key_entities\": \\x7B\n    \"persons\": [\n      \\x7B\n        \"name\": \"string\",\n        \"sentiment_associated\": 0.0,\n        \"frequency\": 0\n      \\x7D\n    ],\n    \"organizations\": [\n      \\x7B\n        \"name\": \"string\",\n        \"sentiment_associated\": 0.0,\n        \"frequency\": 0\n      \\x7D\n    ],\n    \"locations\": [\n      \\x7B\n        \"name\": \"string\",\n        \"sentiment_associated\": 0.0,\n        \"frequency\": 0\n      \\x7D\n    ],\n    \"topics\": [\n      \\x7B\n        \"topic\": \"string\",\n        \"sentiment_associated\": 0.0,\n        \"frequency\": 0\n      \\x7D\n    ]\n  \\x7D,\n  \"deep_insights\": \\x7B\n    \"key_findings\": [\n      \\x7B\n        \"finding\": \"string\",\n        \"supporting_evidence\": \"string\",\n        \"relevance_score\": 0.0\n      \\x7D\n    ],\n    \"emerging_patterns\": [\n      \\x7B\n        \"pattern\": \"string\",\n        \"correlation_strength\": 0.0,\n        \"dimension_affected\": \"string\"\n      \\x7D\n    ]\n  \\x7D\n\\x7D\n</output_format>\n\nFill out each section of the output JSON as follows:\n\n1. sentiment_analysis: Provide overall scores, classifications, and detailed breakdowns\n2. key_entities: List and analyze important persons, organizations, locations, and topics\n3. deep_insights: Highlight key findings and emerging patterns\n\nEnsure that all numerical scores are between 0 and 1, where applicable. Provide detailed justifications for your classifications and insights. Maintain consistency and accuracy throughout your analysis, and ensure that your output adheres strictly to the provided JSON structure.","display_name":"Prompt","advanced":true,"input_types":["Message"],"dynamic":false,"info":"This prompt must contain 'input' key.","title_case":false,"type":"str","_input_type":"MultilineInput"},"verbose":{"trace_as_metadata":true,"list":false,"required":false,"placeholder":"","show":true,"name":"verbose","value":true,"display_name":"Verbose","advanced":true,"dynamic":false,"info":"","title_case":false,"type":"bool","_input_type":"BoolInput"}},"description":"Sentiment Agent that uses tools","icon":"LangChain","base_classes":["AgentExecutor","Message"],"display_name":"Sentiment Analysis Agent","documentation":"","custom_fields":{},"output_types":[],"pinned":false,"conditional_paths":[],"frozen":false,"outputs":[{"types":["AgentExecutor"],"selected":"AgentExecutor","name":"agent","display_name":"Agent","method":"build_agent","value":"__UNDEFINED__","cache":true,"required_inputs":["tools"]},{"types":["Message"],"selected":"Message","name":"response","display_name":"Response","method":"message_response","value":"__UNDEFINED__","cache":true,"required_inputs":[]}],"field_order":["input_value","handle_parsing_errors","verbose","max_iterations","tools","llm","system_prompt","user_prompt","chat_history"],"beta":true,"edited":true,"metadata":{},"lf_version":"1.0.19","official":false},"id":"ToolCallingAgent_Sentiment-zWY6e"},"selected":false,"width":384,"height":340,"positionAbsolute":{"x":2670.80155160897,"y":1183.688664390593},"dragging":false},{"id":"AmazonBedrockModel-xuIEP","type":"genericNode","position":{"x":1216.601607158102,"y":1134.3542866089338},"data":{"type":"AmazonBedrockModel","node":{"template":{"_type":"Component","output_parser":{"trace_as_metadata":true,"list":false,"required":false,"placeholder":"","show":true,"name":"output_parser","value":"","display_name":"Output Parser","advanced":true,"input_types":["OutputParser"],"dynamic":false,"info":"The parser to use to parse the output of the model","title_case":false,"type":"other","_input_type":"HandleInput"},"aws_access_key":{"load_from_db":false,"required":false,"placeholder":"","show":true,"name":"aws_access_key","value":"","display_name":"Access Key","advanced":true,"input_types":["Message"],"dynamic":false,"info":"","title_case":false,"password":true,"type":"str","_input_type":"SecretStrInput"},"aws_secret_key":{"load_from_db":false,"required":false,"placeholder":"","show":true,"name":"aws_secret_key","value":"","display_name":"Secret Key","advanced":true,"input_types":["Message"],"dynamic":false,"info":"","title_case":false,"password":true,"type":"str","_input_type":"SecretStrInput"},"code":{"type":"code","required":true,"placeholder":"","list":false,"show":true,"multiline":true,"value":"from langflow.base.models.model import LCModelComponent\nfrom langflow.field_typing import LanguageModel\nfrom langflow.inputs import MessageTextInput, SecretStrInput\nfrom langflow.inputs.inputs import HandleInput\nfrom langflow.io import DictInput, DropdownInput\n\n\nclass AmazonBedrockComponent(LCModelComponent):\n    display_name: str = \"Amazon Bedrock\"\n    description: str = \"Generate text using Amazon Bedrock LLMs.\"\n    icon = \"Amazon\"\n    name = \"AmazonBedrockModel\"\n\n    inputs = [\n        *LCModelComponent._base_inputs,\n        DropdownInput(\n            name=\"model_id\",\n            display_name=\"Model ID\",\n            options=[\n                \"amazon.titan-text-express-v1\",\n                \"amazon.titan-text-lite-v1\",\n                \"amazon.titan-text-premier-v1:0\",\n                \"amazon.titan-embed-text-v1\",\n                \"amazon.titan-embed-text-v2:0\",\n                \"amazon.titan-embed-image-v1\",\n                \"amazon.titan-image-generator-v1\",\n                \"anthropic.claude-v2\",\n                \"anthropic.claude-v2:1\",\n                \"anthropic.claude-3-sonnet-20240229-v1:0\",\n                \"anthropic.claude-3-haiku-20240307-v1:0\",\n                \"anthropic.claude-3-opus-20240229-v1:0\",\n                \"anthropic.claude-3-5-sonnet-20240620-v1:0\",\n                \"anthropic.claude-instant-v1\",\n                \"ai21.j2-mid-v1\",\n                \"ai21.j2-ultra-v1\",\n                \"cohere.command-text-v14\",\n                \"cohere.command-light-text-v14\",\n                \"cohere.command-r-v1:0\",\n                \"cohere.command-r-plus-v1:0\",\n                \"cohere.embed-english-v3\",\n                \"cohere.embed-multilingual-v3\",\n                \"meta.llama2-13b-chat-v1\",\n                \"meta.llama2-70b-chat-v1\",\n                \"meta.llama3-8b-instruct-v1:0\",\n                \"meta.llama3-70b-instruct-v1:0\",\n                \"mistral.mistral-7b-instruct-v0:2\",\n                \"mistral.mixtral-8x7b-instruct-v0:1\",\n                \"mistral.mistral-large-2402-v1:0\",\n                \"mistral.mistral-small-2402-v1:0\",\n                \"stability.stable-diffusion-xl-v0\",\n                \"stability.stable-diffusion-xl-v1\",\n            ],\n            value=\"anthropic.claude-3-5-sonnet-20240620-v1:0\",\n        ),\n        SecretStrInput(name=\"aws_access_key\", display_name=\"Access Key\"),\n        SecretStrInput(name=\"aws_secret_key\", display_name=\"Secret Key\"),\n        MessageTextInput(name=\"credentials_profile_name\", display_name=\"Credentials Profile Name\", advanced=True),\n        MessageTextInput(name=\"region_name\", display_name=\"Region Name\", value=\"us-east-1\"),\n        DictInput(name=\"model_kwargs\", display_name=\"Model Kwargs\", advanced=True, is_list=True),\n        MessageTextInput(name=\"endpoint_url\", display_name=\"Endpoint URL\", advanced=True),\n        HandleInput(\n            name=\"output_parser\",\n            display_name=\"Output Parser\",\n            info=\"The parser to use to parse the output of the model\",\n            advanced=True,\n            input_types=[\"OutputParser\"],\n        ),\n    ]\n\n    def build_model(self) -> LanguageModel:  # type: ignore[type-var]\n        try:\n            from langchain_aws import ChatBedrock\n        except ImportError as e:\n            msg = \"langchain_aws is not installed. Please install it with `pip install langchain_aws`.\"\n            raise ImportError(msg) from e\n        if self.aws_access_key:\n            import boto3\n\n            session = boto3.Session(\n                aws_access_key_id=\"AKIA5RKJRW74ZO5DHGU7\",\n                aws_secret_access_key=\"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\",\n            )\n        elif self.credentials_profile_name:\n            import boto3\n\n            session = boto3.Session(profile_name=self.credentials_profile_name)\n        else:\n            import boto3\n\n            session = boto3.Session()\n\n        client_params = {}\n        if self.endpoint_url:\n            client_params[\"endpoint_url\"] = self.endpoint_url\n        if self.region_name:\n            client_params[\"region_name\"] = self.region_name\n\n        boto3_client = session.client(\"bedrock-runtime\", **client_params)\n        try:\n            output = ChatBedrock(\n                client=boto3_client,\n                model_id=self.model_id,\n                region_name=self.region_name,\n                model_kwargs=self.model_kwargs,\n                endpoint_url=self.endpoint_url,\n                streaming=self.stream,\n            )\n        except Exception as e:\n            msg = \"Could not connect to AmazonBedrock API.\"\n            raise ValueError(msg) from e\n        return output\n","fileTypes":[],"file_path":"","password":false,"name":"code","advanced":true,"dynamic":true,"info":"","load_from_db":false,"title_case":false},"credentials_profile_name":{"trace_as_input":true,"trace_as_metadata":true,"load_from_db":false,"list":false,"required":false,"placeholder":"","show":true,"name":"credentials_profile_name","value":"","display_name":"Credentials Profile Name","advanced":true,"input_types":["Message"],"dynamic":false,"info":"","title_case":false,"type":"str","_input_type":"MessageTextInput"},"endpoint_url":{"trace_as_input":true,"trace_as_metadata":true,"load_from_db":false,"list":false,"required":false,"placeholder":"","show":true,"name":"endpoint_url","value":"","display_name":"Endpoint URL","advanced":true,"input_types":["Message"],"dynamic":false,"info":"","title_case":false,"type":"str","_input_type":"MessageTextInput"},"input_value":{"trace_as_input":true,"trace_as_metadata":true,"load_from_db":false,"list":false,"required":false,"placeholder":"","show":true,"name":"input_value","value":"","display_name":"Input","advanced":true,"input_types":["Message"],"dynamic":false,"info":"","title_case":false,"type":"str","_input_type":"MessageInput"},"model_id":{"trace_as_metadata":true,"options":["amazon.titan-text-express-v1","amazon.titan-text-lite-v1","amazon.titan-text-premier-v1:0","amazon.titan-embed-text-v1","amazon.titan-embed-text-v2:0","amazon.titan-embed-image-v1","amazon.titan-image-generator-v1","anthropic.claude-v2","anthropic.claude-v2:1","anthropic.claude-3-sonnet-20240229-v1:0","anthropic.claude-3-haiku-20240307-v1:0","anthropic.claude-3-opus-20240229-v1:0","anthropic.claude-3-5-sonnet-20240620-v1:0","anthropic.claude-instant-v1","ai21.j2-mid-v1","ai21.j2-ultra-v1","cohere.command-text-v14","cohere.command-light-text-v14","cohere.command-r-v1:0","cohere.command-r-plus-v1:0","cohere.embed-english-v3","cohere.embed-multilingual-v3","meta.llama2-13b-chat-v1","meta.llama2-70b-chat-v1","meta.llama3-8b-instruct-v1:0","meta.llama3-70b-instruct-v1:0","mistral.mistral-7b-instruct-v0:2","mistral.mixtral-8x7b-instruct-v0:1","mistral.mistral-large-2402-v1:0","mistral.mistral-small-2402-v1:0","stability.stable-diffusion-xl-v0","stability.stable-diffusion-xl-v1"],"combobox":false,"required":false,"placeholder":"","show":true,"name":"model_id","value":"anthropic.claude-3-5-sonnet-20240620-v1:0","display_name":"Model ID","advanced":false,"dynamic":false,"info":"","title_case":false,"type":"str","_input_type":"DropdownInput"},"model_kwargs":{"trace_as_input":true,"list":true,"required":false,"placeholder":"","show":true,"name":"model_kwargs","value":{},"display_name":"Model Kwargs","advanced":true,"dynamic":false,"info":"","title_case":false,"type":"dict","_input_type":"DictInput"},"region_name":{"trace_as_input":true,"trace_as_metadata":true,"load_from_db":false,"list":false,"required":false,"placeholder":"","show":true,"name":"region_name","value":"us-east-1","display_name":"Region Name","advanced":true,"input_types":["Message"],"dynamic":false,"info":"","title_case":false,"type":"str","_input_type":"MessageTextInput"},"stream":{"trace_as_metadata":true,"list":false,"required":false,"placeholder":"","show":true,"name":"stream","value":false,"display_name":"Stream","advanced":true,"dynamic":false,"info":"Stream the response from the model. Streaming works only in Chat.","title_case":false,"type":"bool","_input_type":"BoolInput"},"system_message":{"trace_as_input":true,"trace_as_metadata":true,"load_from_db":false,"list":false,"required":false,"placeholder":"","show":true,"name":"system_message","value":"","display_name":"System Message","advanced":true,"input_types":["Message"],"dynamic":false,"info":"System message to pass to the model.","title_case":false,"type":"str","_input_type":"MessageTextInput"}},"description":"Generate text using Amazon Bedrock LLMs.","icon":"Amazon","base_classes":["LanguageModel","Message"],"display_name":"Claude Amazon Bedrock","documentation":"","custom_fields":{},"output_types":[],"pinned":false,"conditional_paths":[],"frozen":false,"outputs":[{"types":["Message"],"selected":"Message","name":"text_output","display_name":"Text","method":"text_response","value":"__UNDEFINED__","cache":true,"required_inputs":["input_value","stream","system_message"]},{"types":["LanguageModel"],"selected":"LanguageModel","name":"model_output","display_name":"Language Model","method":"build_model","value":"__UNDEFINED__","cache":true,"required_inputs":["aws_access_key","credentials_profile_name","endpoint_url","model_id","model_kwargs","region_name","stream"]}],"field_order":["input_value","system_message","stream","model_id","aws_access_key","aws_secret_key","credentials_profile_name","region_name","model_kwargs","endpoint_url","output_parser"],"beta":false,"edited":true,"metadata":{},"lf_version":"1.0.19","official":false},"id":"AmazonBedrockModel-xuIEP"},"selected":false,"width":384,"height":331,"positionAbsolute":{"x":1216.601607158102,"y":1134.3542866089338},"dragging":false},{"id":"DuckDuckGoSearch-OHwCp","type":"genericNode","position":{"x":3129.189611675288,"y":1164.9833639993678},"data":{"type":"DuckDuckGoSearch","node":{"template":{"_type":"Component","code":{"type":"code","required":true,"placeholder":"","list":false,"show":true,"multiline":true,"value":"from typing import Any, List\r\nfrom langchain.tools import StructuredTool\r\nfrom langchain_community.tools import DuckDuckGoSearchRun\r\nfrom pydantic import BaseModel, Field\r\nfrom langflow.base.langchain_utilities.model import LCToolComponent\r\nfrom langflow.field_typing import Tool\r\nfrom langflow.inputs import IntInput, MessageTextInput\r\nfrom langflow.schema import Data\r\nimport requests\r\n\r\n\r\nclass DuckDuckGoSearchComponent(LCToolComponent):\r\n    display_name: str = \"DuckDuckGo Search\"\r\n    description: str = \"Perform web searches using the DuckDuckGo search engine with result limiting\"\r\n    name = \"DuckDuckGoSearch\"\r\n    documentation: str = \"https://python.langchain.com/docs/integrations/tools/ddg\"\r\n    icon: str = \"DuckDuckGo1\"\r\n    inputs = [\r\n        MessageTextInput(\r\n            name=\"input_value\",\r\n            display_name=\"Search Query\",\r\n            required=True,\r\n        ),\r\n        IntInput(name=\"max_results\", display_name=\"Max Results\", value=5, advanced=True),\r\n        IntInput(name=\"max_snippet_length\", display_name=\"Max Snippet Length\", value=100, advanced=True),\r\n    ]\r\n\r\n    class DuckDuckGoSearchSchema(BaseModel):\r\n        query: str = Field(..., description=\"The search query\")\r\n        max_results: int = Field(5, description=\"Maximum number of results to return\")\r\n        max_snippet_length: int = Field(100, description=\"Maximum length of each result snippet\")\r\n\r\n    def _build_wrapper(self):\r\n        return DuckDuckGoSearchRun()\r\n\r\n    def build_tool(self) -> Tool:\r\n        wrapper = self._build_wrapper()\r\n\r\n        def search_func(query: str, max_results: int = 5, max_snippet_length: int = 100) -> List[dict[str, Any]]:\r\n            try:\r\n                full_results = wrapper.run(f\"{query} (site:*)\")\r\n            except requests.exceptions.HTTPError as e:\r\n                if e.response.status_code == 429:\r\n                    # Handle rate limit issue\r\n                    print(f\"Rate limit reached: {e}\")\r\n                    return [{\"snippet\": \"Rate limit exceeded. Please try again later.\"}]\r\n                else:\r\n                    # Handle other possible HTTP errors\r\n                    print(f\"HTTP Error: {e}\")\r\n                    return [{\"snippet\": \"An error occurred while performing the search.\"}]\r\n            except Exception as e:\r\n                # Handle any other exception\r\n                print(f\"Unexpected error: {e}\")\r\n                return [{\"snippet\": \"An unexpected error occurred.\"}]\r\n\r\n            # Process results\r\n            result_list = full_results.split(\"\\n\")[:max_results]\r\n            limited_results = []\r\n            for result in result_list:\r\n                limited_result = {\r\n                    \"snippet\": result[:max_snippet_length],\r\n                }\r\n                limited_results.append(limited_result)\r\n            return limited_results\r\n\r\n        tool = StructuredTool.from_function(\r\n            name=\"duckduckgo_search\",\r\n            description=\"Search for recent results using DuckDuckGo with result limiting\",\r\n            func=search_func,\r\n            args_schema=self.DuckDuckGoSearchSchema,\r\n        )\r\n        self.status = \"DuckDuckGo Search Tool created\"\r\n        return tool\r\n\r\n    def run_model(self) -> list[Data]:\r\n        tool = self.build_tool()\r\n        results = tool.run(\r\n            {\r\n                \"query\": self.input_value,\r\n                \"max_results\": self.max_results,\r\n                \"max_snippet_length\": self.max_snippet_length,\r\n            }\r\n        )\r\n        data_list = [Data(data=result, text=result.get(\"snippet\", \"\")) for result in results]\r\n        self.status = data_list\r\n        return data_list\r\n","fileTypes":[],"file_path":"","password":false,"name":"code","advanced":true,"dynamic":true,"info":"","load_from_db":false,"title_case":false},"input_value":{"trace_as_input":true,"trace_as_metadata":true,"load_from_db":false,"list":false,"required":true,"placeholder":"","show":true,"name":"input_value","value":"cryptocurrency","display_name":"Search Query","advanced":false,"input_types":["Message"],"dynamic":false,"info":"","title_case":false,"type":"str","_input_type":"MessageTextInput"},"max_results":{"trace_as_metadata":true,"list":false,"required":false,"placeholder":"","show":true,"name":"max_results","value":5,"display_name":"Max Results","advanced":true,"dynamic":false,"info":"","title_case":false,"type":"int","_input_type":"IntInput"},"max_snippet_length":{"trace_as_metadata":true,"list":false,"required":false,"placeholder":"","show":true,"name":"max_snippet_length","value":100,"display_name":"Max Snippet Length","advanced":true,"dynamic":false,"info":"","title_case":false,"type":"int","_input_type":"IntInput"}},"description":"Perform web searches using the DuckDuckGo search engine with result limiting","icon":"DuckDuckGo1","base_classes":["Data","Tool"],"display_name":"DuckDuckGo Search","documentation":"https://python.langchain.com/docs/integrations/tools/ddg","custom_fields":{},"output_types":[],"pinned":false,"conditional_paths":[],"frozen":false,"outputs":[{"types":["Data"],"selected":"Data","name":"api_run_model","display_name":"Data","method":"run_model","value":"__UNDEFINED__","cache":true,"required_inputs":["input_value","max_results","max_snippet_length"]},{"types":["Tool"],"selected":"Tool","name":"api_build_tool","display_name":"Tool","method":"build_tool","value":"__UNDEFINED__","cache":true,"required_inputs":["input_value","max_results","max_snippet_length"]}],"field_order":["input_value","max_results","max_snippet_length"],"beta":false,"edited":true,"metadata":{},"lf_version":"1.0.19"},"id":"DuckDuckGoSearch-OHwCp"},"selected":false,"width":384,"height":347,"positionAbsolute":{"x":3129.189611675288,"y":1164.9833639993678},"dragging":false},{"id":"WikipediaAPI-M6Dt3","type":"genericNode","position":{"x":-1657.9327488873973,"y":1349.652565061555},"data":{"type":"WikipediaAPI","node":{"template":{"_type":"Component","code":{"type":"code","required":true,"placeholder":"","list":false,"show":true,"multiline":true,"value":"from typing import cast, List\nfrom langchain_community.tools import WikipediaQueryRun\nfrom langchain_community.utilities.wikipedia import WikipediaAPIWrapper\nfrom langflow.base.langchain_utilities.model import LCToolComponent\nfrom langflow.field_typing import Tool\nfrom langflow.inputs import BoolInput, IntInput, MessageTextInput, MultilineInput\nfrom langflow.schema import Data\nimport requests\n\n\nclass WikipediaAPIComponent(LCToolComponent):\n    display_name = \"Wikipedia API\"\n    description = \"Call Wikipedia API.\"\n    name = \"WikipediaAPI\"\n\n    inputs = [\n        MultilineInput(\n            name=\"input_value\",\n            display_name=\"Input\",\n        ),\n        MessageTextInput(name=\"lang\", display_name=\"Language\", value=\"en\"),\n        IntInput(name=\"k\", display_name=\"Number of results\", value=4, required=True),\n        BoolInput(name=\"load_all_available_meta\", display_name=\"Load all available meta\", value=False, advanced=True),\n        IntInput(\n            name=\"doc_content_chars_max\", display_name=\"Document content characters max\", value=4000, advanced=True\n        ),\n    ]\n\n    def run_model(self) -> List[Data]:\n        wrapper = self._build_wrapper()\n        try:\n            # Attempt to load documents from Wikipedia\n            docs = wrapper.load(self.input_value)\n            data = [Data.from_document(doc) for doc in docs]\n            self.status = data\n            return data\n        except requests.exceptions.HTTPError as e:\n            # Check for rate-limiting (429 error) and handle it gracefully\n            if e.response.status_code == 429:\n                print(f\"Rate limit reached: {e}\")\n                self.status = \"Rate limit exceeded. Please try again later.\"\n                return [Data(data={\"error\": \"Rate limit exceeded. Please try again later.\"})]\n            else:\n                print(f\"HTTP Error: {e}\")\n                self.status = f\"HTTP Error: {e}\"\n                return [Data(data={\"error\": \"An error occurred while retrieving Wikipedia data.\"})]\n        except Exception as e:\n            # Catch other general exceptions and handle gracefully\n            print(f\"Unexpected error: {e}\")\n            self.status = f\"Unexpected error: {e}\"\n            return [Data(data={\"error\": \"An unexpected error occurred.\"})]\n\n    def build_tool(self) -> Tool:\n        wrapper = self._build_wrapper()\n        return cast(Tool, WikipediaQueryRun(api_wrapper=wrapper))\n\n    def _build_wrapper(self) -> WikipediaAPIWrapper:\n        return WikipediaAPIWrapper(\n            top_k_results=self.k,\n            lang=self.lang,\n            load_all_available_meta=self.load_all_available_meta,\n            doc_content_chars_max=self.doc_content_chars_max,\n        )\n","fileTypes":[],"file_path":"","password":false,"name":"code","advanced":true,"dynamic":true,"info":"","load_from_db":false,"title_case":false},"doc_content_chars_max":{"trace_as_metadata":true,"list":false,"required":false,"placeholder":"","show":true,"name":"doc_content_chars_max","value":4000,"display_name":"Document content characters max","advanced":true,"dynamic":false,"info":"","title_case":false,"type":"int","_input_type":"IntInput"},"input_value":{"trace_as_input":true,"multiline":true,"trace_as_metadata":true,"load_from_db":false,"list":false,"required":false,"placeholder":"","show":true,"name":"input_value","value":"","display_name":"Input","advanced":false,"input_types":["Message"],"dynamic":false,"info":"","title_case":false,"type":"str","_input_type":"MultilineInput"},"k":{"trace_as_metadata":true,"list":false,"required":true,"placeholder":"","show":true,"name":"k","value":4,"display_name":"Number of results","advanced":false,"dynamic":false,"info":"","title_case":false,"type":"int","_input_type":"IntInput"},"lang":{"trace_as_input":true,"trace_as_metadata":true,"load_from_db":false,"list":false,"required":false,"placeholder":"","show":true,"name":"lang","value":"en","display_name":"Language","advanced":false,"input_types":["Message"],"dynamic":false,"info":"","title_case":false,"type":"str","_input_type":"MessageTextInput"},"load_all_available_meta":{"trace_as_metadata":true,"list":false,"required":false,"placeholder":"","show":true,"name":"load_all_available_meta","value":false,"display_name":"Load all available meta","advanced":true,"dynamic":false,"info":"","title_case":false,"type":"bool","_input_type":"BoolInput"}},"description":"Call Wikipedia API.","base_classes":["Data","Tool"],"display_name":"Wikipedia API","documentation":"","custom_fields":{},"output_types":[],"pinned":false,"conditional_paths":[],"frozen":false,"outputs":[{"types":["Data"],"selected":"Data","name":"api_run_model","display_name":"Data","method":"run_model","value":"__UNDEFINED__","cache":true,"required_inputs":["doc_content_chars_max","input_value","k","lang","load_all_available_meta"]},{"types":["Tool"],"selected":"Tool","name":"api_build_tool","display_name":"Tool","method":"build_tool","value":"__UNDEFINED__","cache":true,"required_inputs":["doc_content_chars_max","input_value","k","lang","load_all_available_meta"]}],"field_order":["input_value","lang","k","load_all_available_meta","doc_content_chars_max"],"beta":false,"edited":true,"metadata":{},"lf_version":"1.0.19","official":false},"id":"WikipediaAPI-M6Dt3"},"selected":false,"width":384,"height":504,"positionAbsolute":{"x":-1657.9327488873973,"y":1349.652565061555},"dragging":false},{"id":"WikipediaAPI-kdsNV","type":"genericNode","position":{"x":3126.7099807642944,"y":1552.883748966663},"data":{"type":"WikipediaAPI1","node":{"template":{"_type":"Component","code":{"type":"code","required":true,"placeholder":"","list":false,"show":true,"multiline":true,"value":"from typing import cast, List\nfrom langchain_community.tools import WikipediaQueryRun\nfrom langchain_community.utilities.wikipedia import WikipediaAPIWrapper\nfrom langflow.base.langchain_utilities.model import LCToolComponent\nfrom langflow.field_typing import Tool\nfrom langflow.inputs import BoolInput, IntInput, MessageTextInput, MultilineInput\nfrom langflow.schema import Data\nimport requests\n\n\nclass WikipediaAPIComponent(LCToolComponent):\n    display_name = \"Wikipedia API\"\n    description = \"Call Wikipedia API.\"\n    name = \"WikipediaAPI1\"\n\n    inputs = [\n        MultilineInput(\n            name=\"input_value\",\n            display_name=\"Input\",\n        ),\n        MessageTextInput(name=\"lang\", display_name=\"Language\", value=\"en\"),\n        IntInput(name=\"k\", display_name=\"Number of results\", value=4, required=True),\n        BoolInput(name=\"load_all_available_meta\", display_name=\"Load all available meta\", value=False, advanced=True),\n        IntInput(\n            name=\"doc_content_chars_max\", display_name=\"Document content characters max\", value=4000, advanced=True\n        ),\n    ]\n\n    def run_model(self) -> List[Data]:\n        wrapper = self._build_wrapper()\n        try:\n            # Attempt to load documents from Wikipedia\n            docs = wrapper.load(self.input_value)\n            data = [Data.from_document(doc) for doc in docs]\n            self.status = data\n            return data\n        except requests.exceptions.HTTPError as e:\n            # Check for rate-limiting (429 error) and handle it gracefully\n            if e.response.status_code == 429:\n                print(f\"Rate limit reached: {e}\")\n                self.status = \"Rate limit exceeded. Please try again later.\"\n                return [Data(data={\"error\": \"Rate limit exceeded. Please try again later.\"})]\n            else:\n                print(f\"HTTP Error: {e}\")\n                self.status = f\"HTTP Error: {e}\"\n                return [Data(data={\"error\": \"An error occurred while retrieving Wikipedia data.\"})]\n        except Exception as e:\n            # Catch other general exceptions and handle gracefully\n            print(f\"Unexpected error: {e}\")\n            self.status = f\"Unexpected error: {e}\"\n            return [Data(data={\"error\": \"An unexpected error occurred.\"})]\n\n    def build_tool(self) -> Tool:\n        wrapper = self._build_wrapper()\n        return cast(Tool, WikipediaQueryRun(api_wrapper=wrapper))\n\n    def _build_wrapper(self) -> WikipediaAPIWrapper:\n        return WikipediaAPIWrapper(\n            top_k_results=self.k,\n            lang=self.lang,\n            load_all_available_meta=self.load_all_available_meta,\n            doc_content_chars_max=self.doc_content_chars_max,\n        )\n","fileTypes":[],"file_path":"","password":false,"name":"code","advanced":true,"dynamic":true,"info":"","load_from_db":false,"title_case":false},"doc_content_chars_max":{"trace_as_metadata":true,"list":false,"required":false,"placeholder":"","show":true,"name":"doc_content_chars_max","value":4000,"display_name":"Document content characters max","advanced":true,"dynamic":false,"info":"","title_case":false,"type":"int","_input_type":"IntInput"},"input_value":{"trace_as_input":true,"multiline":true,"trace_as_metadata":true,"load_from_db":false,"list":false,"required":false,"placeholder":"","show":true,"name":"input_value","value":"","display_name":"Input","advanced":false,"input_types":["Message"],"dynamic":false,"info":"","title_case":false,"type":"str","_input_type":"MultilineInput"},"k":{"trace_as_metadata":true,"list":false,"required":true,"placeholder":"","show":true,"name":"k","value":4,"display_name":"Number of results","advanced":false,"dynamic":false,"info":"","title_case":false,"type":"int","_input_type":"IntInput"},"lang":{"trace_as_input":true,"trace_as_metadata":true,"load_from_db":false,"list":false,"required":false,"placeholder":"","show":true,"name":"lang","value":"en","display_name":"Language","advanced":false,"input_types":["Message"],"dynamic":false,"info":"","title_case":false,"type":"str","_input_type":"MessageTextInput"},"load_all_available_meta":{"trace_as_metadata":true,"list":false,"required":false,"placeholder":"","show":true,"name":"load_all_available_meta","value":false,"display_name":"Load all available meta","advanced":true,"dynamic":false,"info":"","title_case":false,"type":"bool","_input_type":"BoolInput"}},"description":"Call Wikipedia API.","base_classes":["Data","Tool"],"display_name":"Wikipedia API","documentation":"","custom_fields":{},"output_types":[],"pinned":false,"conditional_paths":[],"frozen":false,"outputs":[{"types":["Data"],"selected":"Data","name":"api_run_model","display_name":"Data","method":"run_model","value":"__UNDEFINED__","cache":true,"required_inputs":["doc_content_chars_max","input_value","k","lang","load_all_available_meta"]},{"types":["Tool"],"selected":"Tool","name":"api_build_tool","display_name":"Tool","method":"build_tool","value":"__UNDEFINED__","cache":true,"required_inputs":["doc_content_chars_max","input_value","k","lang","load_all_available_meta"]}],"field_order":["input_value","lang","k","load_all_available_meta","doc_content_chars_max"],"beta":false,"edited":true,"metadata":{},"lf_version":"1.0.19"},"id":"WikipediaAPI-kdsNV"},"selected":false,"width":384,"height":504,"positionAbsolute":{"x":3126.7099807642944,"y":1552.883748966663},"dragging":false}],"edges":[{"source":"ToolCallingAgent-4YjHu","sourceHandle":"{œdataTypeœ:œToolCallingAgentœ,œidœ:œToolCallingAgent-4YjHuœ,œnameœ:œresponseœ,œoutput_typesœ:[œMessageœ]}","target":"ChatOutput-ciDCw","targetHandle":"{œfieldNameœ:œinput_valueœ,œidœ:œChatOutput-ciDCwœ,œinputTypesœ:[œMessageœ],œtypeœ:œstrœ}","data":{"targetHandle":{"fieldName":"input_value","id":"ChatOutput-ciDCw","inputTypes":["Message"],"type":"str"},"sourceHandle":{"dataType":"ToolCallingAgent","id":"ToolCallingAgent-4YjHu","name":"response","output_types":["Message"]}},"id":"reactflow__edge-ToolCallingAgent-4YjHu{œdataTypeœ:œToolCallingAgentœ,œidœ:œToolCallingAgent-4YjHuœ,œnameœ:œresponseœ,œoutput_typesœ:[œMessageœ]}-ChatOutput-ciDCw{œfieldNameœ:œinput_valueœ,œidœ:œChatOutput-ciDCwœ,œinputTypesœ:[œMessageœ],œtypeœ:œstrœ}","animated":false,"className":""},{"source":"TextInput-ZZBQ3","sourceHandle":"{œdataTypeœ:œTextInputœ,œidœ:œTextInput-ZZBQ3œ,œnameœ:œtextœ,œoutput_typesœ:[œMessageœ]}","target":"Prompt-ByZ5b","targetHandle":"{œfieldNameœ:œmarket_nameœ,œidœ:œPrompt-ByZ5bœ,œinputTypesœ:[œMessageœ,œTextœ],œtypeœ:œstrœ}","data":{"targetHandle":{"fieldName":"market_name","id":"Prompt-ByZ5b","inputTypes":["Message","Text"],"type":"str"},"sourceHandle":{"dataType":"TextInput","id":"TextInput-ZZBQ3","name":"text","output_types":["Message"]}},"id":"reactflow__edge-TextInput-ZZBQ3{œdataTypeœ:œTextInputœ,œidœ:œTextInput-ZZBQ3œ,œnameœ:œtextœ,œoutput_typesœ:[œMessageœ]}-Prompt-ByZ5b{œfieldNameœ:œmarket_nameœ,œidœ:œPrompt-ByZ5bœ,œinputTypesœ:[œMessageœ,œTextœ],œtypeœ:œstrœ}","animated":false,"className":""},{"source":"TextInput-3BKfI","sourceHandle":"{œdataTypeœ:œTextInputœ,œidœ:œTextInput-3BKfIœ,œnameœ:œtextœ,œoutput_typesœ:[œMessageœ]}","target":"Prompt-ByZ5b","targetHandle":"{œfieldNameœ:œticker_symbolœ,œidœ:œPrompt-ByZ5bœ,œinputTypesœ:[œMessageœ,œTextœ],œtypeœ:œstrœ}","data":{"targetHandle":{"fieldName":"ticker_symbol","id":"Prompt-ByZ5b","inputTypes":["Message","Text"],"type":"str"},"sourceHandle":{"dataType":"TextInput","id":"TextInput-3BKfI","name":"text","output_types":["Message"]}},"id":"reactflow__edge-TextInput-3BKfI{œdataTypeœ:œTextInputœ,œidœ:œTextInput-3BKfIœ,œnameœ:œtextœ,œoutput_typesœ:[œMessageœ]}-Prompt-ByZ5b{œfieldNameœ:œticker_symbolœ,œidœ:œPrompt-ByZ5bœ,œinputTypesœ:[œMessageœ,œTextœ],œtypeœ:œstrœ}","animated":false,"className":""},{"source":"TextInput-truHA","sourceHandle":"{œdataTypeœ:œTextInputœ,œidœ:œTextInput-truHAœ,œnameœ:œtextœ,œoutput_typesœ:[œMessageœ]}","target":"Prompt-ByZ5b","targetHandle":"{œfieldNameœ:œinputœ,œidœ:œPrompt-ByZ5bœ,œinputTypesœ:[œMessageœ,œTextœ],œtypeœ:œstrœ}","data":{"targetHandle":{"fieldName":"input","id":"Prompt-ByZ5b","inputTypes":["Message","Text"],"type":"str"},"sourceHandle":{"dataType":"TextInput","id":"TextInput-truHA","name":"text","output_types":["Message"]}},"id":"reactflow__edge-TextInput-truHA{œdataTypeœ:œTextInputœ,œidœ:œTextInput-truHAœ,œnameœ:œtextœ,œoutput_typesœ:[œMessageœ]}-Prompt-ByZ5b{œfieldNameœ:œinputœ,œidœ:œPrompt-ByZ5bœ,œinputTypesœ:[œMessageœ,œTextœ],œtypeœ:œstrœ}","animated":false,"className":""},{"source":"Prompt-ByZ5b","sourceHandle":"{œdataTypeœ:œPromptœ,œidœ:œPrompt-ByZ5bœ,œnameœ:œpromptœ,œoutput_typesœ:[œMessageœ]}","target":"ToolCallingAgent-4YjHu","targetHandle":"{œfieldNameœ:œinput_valueœ,œidœ:œToolCallingAgent-4YjHuœ,œinputTypesœ:[œMessageœ],œtypeœ:œstrœ}","data":{"targetHandle":{"fieldName":"input_value","id":"ToolCallingAgent-4YjHu","inputTypes":["Message"],"type":"str"},"sourceHandle":{"dataType":"Prompt","id":"Prompt-ByZ5b","name":"prompt","output_types":["Message"]}},"id":"reactflow__edge-Prompt-ByZ5b{œdataTypeœ:œPromptœ,œidœ:œPrompt-ByZ5bœ,œnameœ:œpromptœ,œoutput_typesœ:[œMessageœ]}-ToolCallingAgent-4YjHu{œfieldNameœ:œinput_valueœ,œidœ:œToolCallingAgent-4YjHuœ,œinputTypesœ:[œMessageœ],œtypeœ:œstrœ}","animated":false,"className":""},{"source":"CustomComponent-XmV6b","sourceHandle":"{œdataTypeœ:œTechnicalAnalysis_stocksœ,œidœ:œCustomComponent-XmV6bœ,œnameœ:œapi_build_toolœ,œoutput_typesœ:[œToolœ]}","target":"ToolCallingAgent-4YjHu","targetHandle":"{œfieldNameœ:œtoolsœ,œidœ:œToolCallingAgent-4YjHuœ,œinputTypesœ:[œToolœ,œBaseToolœ],œtypeœ:œotherœ}","data":{"targetHandle":{"fieldName":"tools","id":"ToolCallingAgent-4YjHu","inputTypes":["Tool","BaseTool"],"type":"other"},"sourceHandle":{"dataType":"TechnicalAnalysis_stocks","id":"CustomComponent-XmV6b","name":"api_build_tool","output_types":["Tool"]}},"id":"reactflow__edge-CustomComponent-XmV6b{œdataTypeœ:œTechnicalAnalysis_stocksœ,œidœ:œCustomComponent-XmV6bœ,œnameœ:œapi_build_toolœ,œoutput_typesœ:[œToolœ]}-ToolCallingAgent-4YjHu{œfieldNameœ:œtoolsœ,œidœ:œToolCallingAgent-4YjHuœ,œinputTypesœ:[œToolœ,œBaseToolœ],œtypeœ:œotherœ}","animated":false,"className":""},{"source":"NewsAPI-yDDMS","sourceHandle":"{œdataTypeœ:œNewsAPIœ,œidœ:œNewsAPI-yDDMSœ,œnameœ:œapi_build_toolœ,œoutput_typesœ:[œToolœ]}","target":"ToolCallingAgent-4YjHu","targetHandle":"{œfieldNameœ:œtoolsœ,œidœ:œToolCallingAgent-4YjHuœ,œinputTypesœ:[œToolœ,œBaseToolœ],œtypeœ:œotherœ}","data":{"targetHandle":{"fieldName":"tools","id":"ToolCallingAgent-4YjHu","inputTypes":["Tool","BaseTool"],"type":"other"},"sourceHandle":{"dataType":"NewsAPI","id":"NewsAPI-yDDMS","name":"api_build_tool","output_types":["Tool"]}},"id":"reactflow__edge-NewsAPI-yDDMS{œdataTypeœ:œNewsAPIœ,œidœ:œNewsAPI-yDDMSœ,œnameœ:œapi_build_toolœ,œoutput_typesœ:[œToolœ]}-ToolCallingAgent-4YjHu{œfieldNameœ:œtoolsœ,œidœ:œToolCallingAgent-4YjHuœ,œinputTypesœ:[œToolœ,œBaseToolœ],œtypeœ:œotherœ}","animated":false,"className":""},{"source":"GoogleSerpAPI-52qf3","sourceHandle":"{œdataTypeœ:œGoogleSerpAPIœ,œidœ:œGoogleSerpAPI-52qf3œ,œnameœ:œapi_build_toolœ,œoutput_typesœ:[œToolœ]}","target":"ToolCallingAgent-4YjHu","targetHandle":"{œfieldNameœ:œtoolsœ,œidœ:œToolCallingAgent-4YjHuœ,œinputTypesœ:[œToolœ,œBaseToolœ],œtypeœ:œotherœ}","data":{"targetHandle":{"fieldName":"tools","id":"ToolCallingAgent-4YjHu","inputTypes":["Tool","BaseTool"],"type":"other"},"sourceHandle":{"dataType":"GoogleSerpAPI","id":"GoogleSerpAPI-52qf3","name":"api_build_tool","output_types":["Tool"]}},"id":"reactflow__edge-GoogleSerpAPI-52qf3{œdataTypeœ:œGoogleSerpAPIœ,œidœ:œGoogleSerpAPI-52qf3œ,œnameœ:œapi_build_toolœ,œoutput_typesœ:[œToolœ]}-ToolCallingAgent-4YjHu{œfieldNameœ:œtoolsœ,œidœ:œToolCallingAgent-4YjHuœ,œinputTypesœ:[œToolœ,œBaseToolœ],œtypeœ:œotherœ}","animated":false,"className":""},{"source":"DuckDuckGoSearch-4IgeD","sourceHandle":"{œdataTypeœ:œDuckDuckGoSearchœ,œidœ:œDuckDuckGoSearch-4IgeDœ,œnameœ:œapi_build_toolœ,œoutput_typesœ:[œToolœ]}","target":"ToolCallingAgent-4YjHu","targetHandle":"{œfieldNameœ:œtoolsœ,œidœ:œToolCallingAgent-4YjHuœ,œinputTypesœ:[œToolœ,œBaseToolœ],œtypeœ:œotherœ}","data":{"targetHandle":{"fieldName":"tools","id":"ToolCallingAgent-4YjHu","inputTypes":["Tool","BaseTool"],"type":"other"},"sourceHandle":{"dataType":"DuckDuckGoSearch","id":"DuckDuckGoSearch-4IgeD","name":"api_build_tool","output_types":["Tool"]}},"id":"reactflow__edge-DuckDuckGoSearch-4IgeD{œdataTypeœ:œDuckDuckGoSearchœ,œidœ:œDuckDuckGoSearch-4IgeDœ,œnameœ:œapi_build_toolœ,œoutput_typesœ:[œToolœ]}-ToolCallingAgent-4YjHu{œfieldNameœ:œtoolsœ,œidœ:œToolCallingAgent-4YjHuœ,œinputTypesœ:[œToolœ,œBaseToolœ],œtypeœ:œotherœ}","animated":false,"className":""},{"source":"ToolCallingAgent_Sentiment-zWY6e","sourceHandle":"{œdataTypeœ:œToolCallingAgent_Sentimentœ,œidœ:œToolCallingAgent_Sentiment-zWY6eœ,œnameœ:œagentœ,œoutput_typesœ:[œAgentExecutorœ]}","target":"AgentAsTool_Sentiment-2mIYL","targetHandle":"{œfieldNameœ:œagentœ,œidœ:œAgentAsTool_Sentiment-2mIYLœ,œinputTypesœ:[œAgentExecutorœ],œtypeœ:œotherœ}","data":{"targetHandle":{"fieldName":"agent","id":"AgentAsTool_Sentiment-2mIYL","inputTypes":["AgentExecutor"],"type":"other"},"sourceHandle":{"dataType":"ToolCallingAgent_Sentiment","id":"ToolCallingAgent_Sentiment-zWY6e","name":"agent","output_types":["AgentExecutor"]}},"id":"reactflow__edge-ToolCallingAgent_Sentiment-zWY6e{œdataTypeœ:œToolCallingAgent_Sentimentœ,œidœ:œToolCallingAgent_Sentiment-zWY6eœ,œnameœ:œagentœ,œoutput_typesœ:[œAgentExecutorœ]}-AgentAsTool_Sentiment-2mIYL{œfieldNameœ:œagentœ,œidœ:œAgentAsTool_Sentiment-2mIYLœ,œinputTypesœ:[œAgentExecutorœ],œtypeœ:œotherœ}","animated":false,"className":""},{"source":"AmazonBedrockModel-pwl8Y","sourceHandle":"{œdataTypeœ:œAmazonBedrockModelœ,œidœ:œAmazonBedrockModel-pwl8Yœ,œnameœ:œmodel_outputœ,œoutput_typesœ:[œLanguageModelœ]}","target":"ToolCallingAgent_Sentiment-zWY6e","targetHandle":"{œfieldNameœ:œllmœ,œidœ:œToolCallingAgent_Sentiment-zWY6eœ,œinputTypesœ:[œLanguageModelœ],œtypeœ:œotherœ}","data":{"targetHandle":{"fieldName":"llm","id":"ToolCallingAgent_Sentiment-zWY6e","inputTypes":["LanguageModel"],"type":"other"},"sourceHandle":{"dataType":"AmazonBedrockModel","id":"AmazonBedrockModel-pwl8Y","name":"model_output","output_types":["LanguageModel"]}},"id":"reactflow__edge-AmazonBedrockModel-pwl8Y{œdataTypeœ:œAmazonBedrockModelœ,œidœ:œAmazonBedrockModel-pwl8Yœ,œnameœ:œmodel_outputœ,œoutput_typesœ:[œLanguageModelœ]}-ToolCallingAgent_Sentiment-zWY6e{œfieldNameœ:œllmœ,œidœ:œToolCallingAgent_Sentiment-zWY6eœ,œinputTypesœ:[œLanguageModelœ],œtypeœ:œotherœ}","animated":false,"className":""},{"source":"AgentAsTool_Sentiment-2mIYL","sourceHandle":"{œdataTypeœ:œAgentAsTool_Sentimentœ,œidœ:œAgentAsTool_Sentiment-2mIYLœ,œnameœ:œagent_toolœ,œoutput_typesœ:[œToolœ]}","target":"ToolCallingAgent-4YjHu","targetHandle":"{œfieldNameœ:œtoolsœ,œidœ:œToolCallingAgent-4YjHuœ,œinputTypesœ:[œToolœ,œBaseToolœ],œtypeœ:œotherœ}","data":{"targetHandle":{"fieldName":"tools","id":"ToolCallingAgent-4YjHu","inputTypes":["Tool","BaseTool"],"type":"other"},"sourceHandle":{"dataType":"AgentAsTool_Sentiment","id":"AgentAsTool_Sentiment-2mIYL","name":"agent_tool","output_types":["Tool"]}},"id":"reactflow__edge-AgentAsTool_Sentiment-2mIYL{œdataTypeœ:œAgentAsTool_Sentimentœ,œidœ:œAgentAsTool_Sentiment-2mIYLœ,œnameœ:œagent_toolœ,œoutput_typesœ:[œToolœ]}-ToolCallingAgent-4YjHu{œfieldNameœ:œtoolsœ,œidœ:œToolCallingAgent-4YjHuœ,œinputTypesœ:[œToolœ,œBaseToolœ],œtypeœ:œotherœ}","animated":false,"className":""},{"source":"AmazonBedrockModel-xuIEP","sourceHandle":"{œdataTypeœ:œAmazonBedrockModelœ,œidœ:œAmazonBedrockModel-xuIEPœ,œnameœ:œmodel_outputœ,œoutput_typesœ:[œLanguageModelœ]}","target":"ToolCallingAgent-4YjHu","targetHandle":"{œfieldNameœ:œllmœ,œidœ:œToolCallingAgent-4YjHuœ,œinputTypesœ:[œLanguageModelœ],œtypeœ:œotherœ}","data":{"targetHandle":{"fieldName":"llm","id":"ToolCallingAgent-4YjHu","inputTypes":["LanguageModel"],"type":"other"},"sourceHandle":{"dataType":"AmazonBedrockModel","id":"AmazonBedrockModel-xuIEP","name":"model_output","output_types":["LanguageModel"]}},"id":"reactflow__edge-AmazonBedrockModel-xuIEP{œdataTypeœ:œAmazonBedrockModelœ,œidœ:œAmazonBedrockModel-xuIEPœ,œnameœ:œmodel_outputœ,œoutput_typesœ:[œLanguageModelœ]}-ToolCallingAgent-4YjHu{œfieldNameœ:œllmœ,œidœ:œToolCallingAgent-4YjHuœ,œinputTypesœ:[œLanguageModelœ],œtypeœ:œotherœ}","animated":false,"className":""},{"source":"DuckDuckGoSearch-OHwCp","sourceHandle":"{œdataTypeœ:œDuckDuckGoSearchœ,œidœ:œDuckDuckGoSearch-OHwCpœ,œnameœ:œapi_build_toolœ,œoutput_typesœ:[œToolœ]}","target":"ToolCallingAgent_Sentiment-zWY6e","targetHandle":"{œfieldNameœ:œtoolsœ,œidœ:œToolCallingAgent_Sentiment-zWY6eœ,œinputTypesœ:[œToolœ,œBaseToolœ,œStructuredToolœ],œtypeœ:œotherœ}","data":{"targetHandle":{"fieldName":"tools","id":"ToolCallingAgent_Sentiment-zWY6e","inputTypes":["Tool","BaseTool","StructuredTool"],"type":"other"},"sourceHandle":{"dataType":"DuckDuckGoSearch","id":"DuckDuckGoSearch-OHwCp","name":"api_build_tool","output_types":["Tool"]}},"id":"reactflow__edge-DuckDuckGoSearch-OHwCp{œdataTypeœ:œDuckDuckGoSearchœ,œidœ:œDuckDuckGoSearch-OHwCpœ,œnameœ:œapi_build_toolœ,œoutput_typesœ:[œToolœ]}-ToolCallingAgent_Sentiment-zWY6e{œfieldNameœ:œtoolsœ,œidœ:œToolCallingAgent_Sentiment-zWY6eœ,œinputTypesœ:[œToolœ,œBaseToolœ,œStructuredToolœ],œtypeœ:œotherœ}","animated":false,"className":""},{"source":"WikipediaAPI-M6Dt3","sourceHandle":"{œdataTypeœ:œWikipediaAPIœ,œidœ:œWikipediaAPI-M6Dt3œ,œnameœ:œapi_build_toolœ,œoutput_typesœ:[œToolœ]}","target":"ToolCallingAgent-4YjHu","targetHandle":"{œfieldNameœ:œtoolsœ,œidœ:œToolCallingAgent-4YjHuœ,œinputTypesœ:[œToolœ,œBaseToolœ],œtypeœ:œotherœ}","data":{"targetHandle":{"fieldName":"tools","id":"ToolCallingAgent-4YjHu","inputTypes":["Tool","BaseTool"],"type":"other"},"sourceHandle":{"dataType":"WikipediaAPI","id":"WikipediaAPI-M6Dt3","name":"api_build_tool","output_types":["Tool"]}},"id":"reactflow__edge-WikipediaAPI-M6Dt3{œdataTypeœ:œWikipediaAPIœ,œidœ:œWikipediaAPI-M6Dt3œ,œnameœ:œapi_build_toolœ,œoutput_typesœ:[œToolœ]}-ToolCallingAgent-4YjHu{œfieldNameœ:œtoolsœ,œidœ:œToolCallingAgent-4YjHuœ,œinputTypesœ:[œToolœ,œBaseToolœ],œtypeœ:œotherœ}","animated":false,"className":""},{"source":"WikipediaAPI-kdsNV","sourceHandle":"{œdataTypeœ:œWikipediaAPI1œ,œidœ:œWikipediaAPI-kdsNVœ,œnameœ:œapi_build_toolœ,œoutput_typesœ:[œToolœ]}","target":"ToolCallingAgent_Sentiment-zWY6e","targetHandle":"{œfieldNameœ:œtoolsœ,œidœ:œToolCallingAgent_Sentiment-zWY6eœ,œinputTypesœ:[œToolœ,œBaseToolœ,œStructuredToolœ],œtypeœ:œotherœ}","data":{"targetHandle":{"fieldName":"tools","id":"ToolCallingAgent_Sentiment-zWY6e","inputTypes":["Tool","BaseTool","StructuredTool"],"type":"other"},"sourceHandle":{"dataType":"WikipediaAPI1","id":"WikipediaAPI-kdsNV","name":"api_build_tool","output_types":["Tool"]}},"id":"reactflow__edge-WikipediaAPI-kdsNV{œdataTypeœ:œWikipediaAPI1œ,œidœ:œWikipediaAPI-kdsNVœ,œnameœ:œapi_build_toolœ,œoutput_typesœ:[œToolœ]}-ToolCallingAgent_Sentiment-zWY6e{œfieldNameœ:œtoolsœ,œidœ:œToolCallingAgent_Sentiment-zWY6eœ,œinputTypesœ:[œToolœ,œBaseToolœ,œStructuredToolœ],œtypeœ:œotherœ}","animated":false,"className":""}],"viewport":{"x":355.51660420084227,"y":-63.40728598796386,"zoom":0.5166529957775875}},"description":"Building Linguistic Labyrinths.","name":"technical_analysis_stocks","last_tested_version":"1.0.19","endpoint_name":null,"is_component":false}